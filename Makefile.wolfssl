# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

######## SGX SDK Settings ########

SGX_SDK ?= /opt/intel/sgxsdk
SGX_MODE ?= HW
SGX_ARCH ?= x64
SGX_DEBUG ?=

export SGX_DEBUG

TOP_DIR := .
include $(TOP_DIR)/buildenv.mk

ifeq ($(shell getconf LONG_BIT), 32)
	SGX_ARCH := x86
else ifeq ($(findstring -m32, $(CXXFLAGS)), -m32)
	SGX_ARCH := x86
endif

ifeq ($(SGX_ARCH), x86)
	SGX_COMMON_CFLAGS := -m32
	SGX_LIBRARY_PATH := $(SGX_SDK)/lib
	SGX_ENCLAVE_SIGNER := $(SGX_SDK)/bin/x86/sgx_sign
	SGX_EDGER8R := $(SGX_SDK)/bin/x86/sgx_edger8r
else
	SGX_COMMON_CFLAGS := -m64
	SGX_LIBRARY_PATH := $(SGX_SDK)/lib64
	SGX_ENCLAVE_SIGNER := $(SGX_SDK)/bin/x64/sgx_sign
	SGX_EDGER8R := $(SGX_SDK)/bin/x64/sgx_edger8r
endif

ifeq ($(SGX_DEBUG), 1)
ifeq ($(SGX_PRERELEASE), 1)
$(error Cannot set SGX_DEBUG and SGX_PRERELEASE at the same time!!)
endif
endif

ifeq ($(SGX_DEBUG), 1)
	SGX_COMMON_CFLAGS += -O0 -g -ggdb -DDEBUG -UNDEBUG -UEDEBUG
else
	SGX_COMMON_CFLAGS += -O2
endif

SGX_COMMON_CFLAGS += -fstack-protector

######## CUSTOM Settings ########

CUSTOM_LIBRARY_PATH := ./lib
CUSTOM_BIN_PATH := ./bin
CUSTOM_EDL_PATH := ./stub-enclave.wolfssl
RA_TLS_EDL_PATH := ../ra-tls/sgx-ra-tls
CUSTOM_COMMON_PATH := ../../common

######## EDL Settings ########

Enclave_EDL_Files := stub-enclave.wolfssl/Enclave_t.c stub-enclave.wolfssl/Enclave_t.h app.wolfssl/Enclave_u.c app.wolfssl/Enclave_u.h

######## APP Settings ########

ifneq ($(SGX_DEBUG), 1)
App_Rust_Flags := --release
App_Rust_Release_Mode := release
else
App_Rust_Flags :=
App_Rust_Release_Mode := debug
endif
App_SRC_Files := $(shell find app.wolfssl/ -type f -name '*.rs') $(shell find app.wolfssl/ -type f -name 'Cargo.toml')
App_Include_Paths := -I ./app.wolfssl -I./include -I$(SGX_SDK)/include -I$(CUSTOM_EDL_PATH) -I$(RA_TLS_EDL_PATH)
App_C_Flags := $(SGX_COMMON_CFLAGS) -fPIC -Wno-attributes $(App_Include_Paths)

App_Rust_Path := ./app.wolfssl/target/$(App_Rust_Release_Mode)
App_Enclave_u_Object := app.wolfssl/libEnclave_u.a
App_Name := bin/inclavared.wolfssl

######## Enclave Settings ########

ifneq ($(SGX_MODE), HW)
	Trts_Library_Name := sgx_trts_sim
	Service_Library_Name := sgx_tservice_sim
else
	Trts_Library_Name := sgx_trts
	Service_Library_Name := sgx_tservice
endif
Crypto_Library_Name := sgx_tcrypto
KeyExchange_Library_Name := sgx_tkey_exchange
ProtectedFs_Library_Name := sgx_tprotected_fs

RustEnclave_C_Files := $(wildcard ./stub-enclave.wolfssl/*.c)
RustEnclave_C_Objects := $(RustEnclave_C_Files:.c=.o)
RustEnclave_Include_Paths := -I$(CUSTOM_COMMON_PATH)/inc -I$(CUSTOM_EDL_PATH) -I$(RA_TLS_EDL_PATH) -I$(SGX_SDK)/include -I$(SGX_SDK)/include/tlibc -I$(SGX_SDK)/include/stlport -I$(SGX_SDK)/include/epid -I ./enclave -I./include

RustEnclave_Link_Libs := -L$(CUSTOM_LIBRARY_PATH) -lenclave
RustEnclave_Compile_Flags := $(SGX_COMMON_CFLAGS) $(ENCLAVE_CFLAGS) $(RustEnclave_Include_Paths)
RustEnclave_Link_Flags := -Wl,--no-undefined -nostdlib -nodefaultlibs -nostartfiles -L$(SGX_LIBRARY_PATH) -L../ra-tls/build/lib \
	-Wl,--whole-archive -l$(Trts_Library_Name) -lenclave -L./lib -Wl,--no-whole-archive \
	-Wl,--start-group -lsgx_tstdc -l$(Service_Library_Name) -l$(Crypto_Library_Name) $(RustEnclave_Link_Libs) -lwolfssl.sgx.static.lib -Wl,--end-group \
        -Wl,-Bstatic -Wl,-Bsymbolic -Wl,--no-undefined \
        -Wl,-pie,-eenclave_entry -Wl,--export-dynamic  \
        -Wl,--defsym,__ImageBase=0 \
	-Wl,--version-script=stub-enclave.wolfssl/Enclave.lds \
	$(ENCLAVE_LDFLAGS)
#RustEnclave_Link_Flags := $(SGX_COMMON_CFLAGS) -Wl,--no-undefined -nostdlib \
#        -nodefaultlibs -nostartfiles -L$(SGX_LIBRARY_PATH) \
#        -L$(SGX_RA_TLS_LIB) -lsgx_ra_tls_wolfssl \
#        -L$(SGX_WOLFSSL_LIB) -lwolfssl.sgx.static.lib \
#        -Wl,--whole-archive -l$(Trts_Library_Name) -Wl,--no-whole-archive \
#        -Wl,--start-group -lsgx_tstdc -l$(Crypto_Library_Name) -l$(Service_Library_Name) -Wl,--end-group \
#        -Wl,-Bstatic -Wl,-Bsymbolic -Wl,--no-undefined \
#        -Wl,-pie,-eenclave_entry -Wl,--export-dynamic  \
#        -Wl,--defsym,__ImageBase=0 \
#        -Wl,--version-script=stub-enclave.wolfssl/Enclave.lds

RustEnclave_Name := stub-enclave.wolfssl/enclave.so
Signed_RustEnclave_Name := bin/enclave.signed.so
Rust_SDK := rust-sgx
WOLFSSL_RA_LIB_SRC_NAME := ../ra-tls/build/lib/libsgx_ra_tls_wolfssl.a
WOLFSSL_RA_LIB_NAME := ../ra-tls/build/lib/libsgx_ra.a

$(WOLFSSL_RA_LIB_SRC_NAME):
	$(MAKE) -C ../ra-tls

$(WOLFSSL_RA_LIB_NAME): $(WOLFSSL_RA_LIB_SRC_NAME)
	mkdir ../ra-tls/build/lib/ra && cd ../ra-tls/build/lib/ra && $(AR) -x ../libsgx_ra_tls_wolfssl.a && rm -f ra_tls_t.o && $(AR) rcs ../libsgx_ra.a *.o && cd ../../../../inclavared

.PHONY: all
all: $(WOLFSSL_RA_LIB_NAME) $(Rust_SDK) $(App_Name) $(Signed_RustEnclave_Name)

$(Rust_SDK):
	git clone https://github.com/apache/incubator-teaclave-sgx-sdk.git $(Rust_SDK) && \
	cd $(Rust_SDK) && git checkout 2de49915434a98d7669a1a88c2b0845349e93dcc
	#cd $(Rust_SDK) && git checkout 4fdac94b9f002f432d4a10e5de80c56d3f7a10eb && \
	#sed -i 's#struct tm {#struct tm_bak {#g' ./common/inc/time.h && cd ../

######## EDL Objects ########

stub-enclave.wolfssl/Enclave.edl: stub-enclave.wolfssl/Enclave.edl.sh
	bash $^ > $@

$(Enclave_EDL_Files): stub-enclave.wolfssl/Enclave.edl
	$(SGX_EDGER8R) --trusted $< --search-path $(SGX_SDK)/include --search-path $(CUSTOM_EDL_PATH) --search-path $(RA_TLS_EDL_PATH) --search-path rust-sgx/edl/ --trusted-dir stub-enclave.wolfssl
	$(SGX_EDGER8R) --untrusted $< --search-path $(SGX_SDK)/include --search-path $(CUSTOM_EDL_PATH) --search-path $(RA_TLS_EDL_PATH) --search-path rust-sgx/edl/ --untrusted-dir app.wolfssl
	@echo "GEN  =>  $(Enclave_EDL_Files)"

######## App Objects ########

app.wolfssl/Enclave_u.o: $(Enclave_EDL_Files)
	@C_INCLUDE_PATH=../ra-tls/wolfssl $(CC) $(App_C_Flags) -I./app.wolfssl -I./rust-sgx/edl/ -c app.wolfssl/Enclave_u.c -o $@
	@echo "CC   <=  $<"

$(App_Enclave_u_Object): app.wolfssl/Enclave_u.o
	$(AR) rcsD $@ $^
	mkdir -p ./lib
	cp $(App_Enclave_u_Object) ./lib

$(App_Name): $(App_Enclave_u_Object) $(App_SRC_Files)
	$(MAKE) -C ./app.wolfssl
	@echo "Cargo  =>  $@"
	mkdir -p bin
	cp $(App_Rust_Path)/inclavared ./bin/inclavared.wolfssl

######## Enclave Objects ########

stub-enclave.wolfssl/Enclave_t.o: $(Enclave_EDL_Files)
	@cc -Wno-implicit-function-declaration -std=c11 -m64 -O0 -g -DSGX_DEBUG -nostdinc -fvisibility=hidden -fpie -fstack-protector -I. -I./rust-sgx/common/inc -I./rust-sgx/edl -I./../ra-tls/wolfssl -I./../ra-tls/wolfssl//wolfcrypt -I/opt/intel/sgxsdk/include -I/opt/intel/sgxsdk/include/tlibc -I/opt/intel/sgxsdk/include/stlport -I../ra-tls/sgx-ra-tls -fno-builtin -fno-builtin-printf -DSGX_SDK -DWOLFSSL_SGX -DWOLFSSL_SGX_ATTESTATION -DUSER_TIME -DWOLFSSL_CERT_EXT -D_TM_DEFINED -c stub-enclave.wolfssl/Enclave_t.c -o stub-enclave.wolfssl/Enclave_t.o
	@echo "CC   <=  $<"

$(RustEnclave_Name): enclave stub-enclave.wolfssl/Enclave_t.o
	@$(CXX) stub-enclave.wolfssl/Enclave_t.o -o $@ $(RustEnclave_Link_Flags)
	@echo "LINK =>  $@"

$(Signed_RustEnclave_Name): $(RustEnclave_Name)
	mkdir -p bin
	@echo $(SGX_ENCLAVE_SIGNER) sign -key stub-enclave.wolfssl/Enclave_private.pem -enclave $(RustEnclave_Name) -out $@ -config stub-enclave.wolfssl/Enclave.config.xml
	@$(SGX_ENCLAVE_SIGNER) sign -key stub-enclave.wolfssl/Enclave_private.pem -enclave $(RustEnclave_Name) -out $@ -config stub-enclave.wolfssl/Enclave.config.xml
	@echo "SIGN =>  $@"

.PHONY: enclave
enclave:
	$(MAKE) -C ./stub-enclave.wolfssl/

.PHONY: clean
clean:
	@rm -f $(App_Name) $(RustEnclave_Name) $(Signed_RustEnclave_Name) stub-enclave.wolfssl/*_t.* app.wolfssl/*_u.* lib/*.a
	@$(MAKE) -C stub-enclave.wolfssl clean
	@$(MAKE) -C app.wolfssl clean
