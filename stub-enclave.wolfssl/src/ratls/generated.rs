/* automatically generated by rust-bindgen 0.55.1 */

// Generated ra-tls trusted codes.

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const WOLFSSL_GENERAL_ALIGNMENT: u32 = 0;
pub const AES_MAX_KEY_SIZE: u32 = 256;
pub const WOLFSSL_MIN_AUTH_TAG_SZ: u32 = 12;
pub const WC_ASYNC_DEV_SIZE: u32 = 0;
pub const WOLFSSL_ALERT_COUNT_MAX: u32 = 5;
pub const LIBWOLFSSL_VERSION_STRING: &'static [u8; 7usize] = b"3.12.2\0";
pub const LIBWOLFSSL_VERSION_HEX: u32 = 50405378;
pub const WOLFSSL_VERSION: &'static [u8; 7usize] = b"3.12.2\0";
pub const _SYS_TYPES_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __STDC_NO_THREADS__: u32 = 1;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 27;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\0";
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _SYS_SYSMACROS_H: u32 = 1;
pub const _BITS_SYSMACROS_H: u32 = 1;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const __PTHREAD_MUTEX_LOCK_ELISION: u32 = 1;
pub const __PTHREAD_MUTEX_NUSERS_AFTER_KIND: u32 = 0;
pub const __PTHREAD_MUTEX_USE_UNION: u32 = 0;
pub const __PTHREAD_RWLOCK_INT_FLAGS_SHARED: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _ERRNO_H: u32 = 1;
pub const _BITS_ERRNO_H: u32 = 1;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const ENOTBLK: u32 = 15;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const EINVAL: u32 = 22;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const ETXTBSY: u32 = 26;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const ERANGE: u32 = 34;
pub const EDEADLK: u32 = 35;
pub const ENAMETOOLONG: u32 = 36;
pub const ENOLCK: u32 = 37;
pub const ENOSYS: u32 = 38;
pub const ENOTEMPTY: u32 = 39;
pub const ELOOP: u32 = 40;
pub const EWOULDBLOCK: u32 = 11;
pub const ENOMSG: u32 = 42;
pub const EIDRM: u32 = 43;
pub const ECHRNG: u32 = 44;
pub const EL2NSYNC: u32 = 45;
pub const EL3HLT: u32 = 46;
pub const EL3RST: u32 = 47;
pub const ELNRNG: u32 = 48;
pub const EUNATCH: u32 = 49;
pub const ENOCSI: u32 = 50;
pub const EL2HLT: u32 = 51;
pub const EBADE: u32 = 52;
pub const EBADR: u32 = 53;
pub const EXFULL: u32 = 54;
pub const ENOANO: u32 = 55;
pub const EBADRQC: u32 = 56;
pub const EBADSLT: u32 = 57;
pub const EDEADLOCK: u32 = 35;
pub const EBFONT: u32 = 59;
pub const ENOSTR: u32 = 60;
pub const ENODATA: u32 = 61;
pub const ETIME: u32 = 62;
pub const ENOSR: u32 = 63;
pub const ENONET: u32 = 64;
pub const ENOPKG: u32 = 65;
pub const EREMOTE: u32 = 66;
pub const ENOLINK: u32 = 67;
pub const EADV: u32 = 68;
pub const ESRMNT: u32 = 69;
pub const ECOMM: u32 = 70;
pub const EPROTO: u32 = 71;
pub const EMULTIHOP: u32 = 72;
pub const EDOTDOT: u32 = 73;
pub const EBADMSG: u32 = 74;
pub const EOVERFLOW: u32 = 75;
pub const ENOTUNIQ: u32 = 76;
pub const EBADFD: u32 = 77;
pub const EREMCHG: u32 = 78;
pub const ELIBACC: u32 = 79;
pub const ELIBBAD: u32 = 80;
pub const ELIBSCN: u32 = 81;
pub const ELIBMAX: u32 = 82;
pub const ELIBEXEC: u32 = 83;
pub const EILSEQ: u32 = 84;
pub const ERESTART: u32 = 85;
pub const ESTRPIPE: u32 = 86;
pub const EUSERS: u32 = 87;
pub const ENOTSOCK: u32 = 88;
pub const EDESTADDRREQ: u32 = 89;
pub const EMSGSIZE: u32 = 90;
pub const EPROTOTYPE: u32 = 91;
pub const ENOPROTOOPT: u32 = 92;
pub const EPROTONOSUPPORT: u32 = 93;
pub const ESOCKTNOSUPPORT: u32 = 94;
pub const EOPNOTSUPP: u32 = 95;
pub const EPFNOSUPPORT: u32 = 96;
pub const EAFNOSUPPORT: u32 = 97;
pub const EADDRINUSE: u32 = 98;
pub const EADDRNOTAVAIL: u32 = 99;
pub const ENETDOWN: u32 = 100;
pub const ENETUNREACH: u32 = 101;
pub const ENETRESET: u32 = 102;
pub const ECONNABORTED: u32 = 103;
pub const ECONNRESET: u32 = 104;
pub const ENOBUFS: u32 = 105;
pub const EISCONN: u32 = 106;
pub const ENOTCONN: u32 = 107;
pub const ESHUTDOWN: u32 = 108;
pub const ETOOMANYREFS: u32 = 109;
pub const ETIMEDOUT: u32 = 110;
pub const ECONNREFUSED: u32 = 111;
pub const EHOSTDOWN: u32 = 112;
pub const EHOSTUNREACH: u32 = 113;
pub const EALREADY: u32 = 114;
pub const EINPROGRESS: u32 = 115;
pub const ESTALE: u32 = 116;
pub const EUCLEAN: u32 = 117;
pub const ENOTNAM: u32 = 118;
pub const ENAVAIL: u32 = 119;
pub const EISNAM: u32 = 120;
pub const EREMOTEIO: u32 = 121;
pub const EDQUOT: u32 = 122;
pub const ENOMEDIUM: u32 = 123;
pub const EMEDIUMTYPE: u32 = 124;
pub const ECANCELED: u32 = 125;
pub const ENOKEY: u32 = 126;
pub const EKEYEXPIRED: u32 = 127;
pub const EKEYREVOKED: u32 = 128;
pub const EKEYREJECTED: u32 = 129;
pub const EOWNERDEAD: u32 = 130;
pub const ENOTRECOVERABLE: u32 = 131;
pub const ERFKILL: u32 = 132;
pub const EHWPOISON: u32 = 133;
pub const ENOTSUP: u32 = 95;
pub const _UNISTD_H: u32 = 1;
pub const _POSIX_VERSION: u32 = 200809;
pub const __POSIX2_THIS_VERSION: u32 = 200809;
pub const _POSIX2_VERSION: u32 = 200809;
pub const _POSIX2_C_VERSION: u32 = 200809;
pub const _POSIX2_C_BIND: u32 = 200809;
pub const _POSIX2_C_DEV: u32 = 200809;
pub const _POSIX2_SW_DEV: u32 = 200809;
pub const _POSIX2_LOCALEDEF: u32 = 200809;
pub const _XOPEN_VERSION: u32 = 700;
pub const _XOPEN_XCU_VERSION: u32 = 4;
pub const _XOPEN_XPG2: u32 = 1;
pub const _XOPEN_XPG3: u32 = 1;
pub const _XOPEN_XPG4: u32 = 1;
pub const _XOPEN_UNIX: u32 = 1;
pub const _XOPEN_CRYPT: u32 = 1;
pub const _XOPEN_ENH_I18N: u32 = 1;
pub const _XOPEN_LEGACY: u32 = 1;
pub const _BITS_POSIX_OPT_H: u32 = 1;
pub const _POSIX_JOB_CONTROL: u32 = 1;
pub const _POSIX_SAVED_IDS: u32 = 1;
pub const _POSIX_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_SYNCHRONIZED_IO: u32 = 200809;
pub const _POSIX_FSYNC: u32 = 200809;
pub const _POSIX_MAPPED_FILES: u32 = 200809;
pub const _POSIX_MEMLOCK: u32 = 200809;
pub const _POSIX_MEMLOCK_RANGE: u32 = 200809;
pub const _POSIX_MEMORY_PROTECTION: u32 = 200809;
pub const _POSIX_CHOWN_RESTRICTED: u32 = 0;
pub const _POSIX_VDISABLE: u8 = 0u8;
pub const _POSIX_NO_TRUNC: u32 = 1;
pub const _XOPEN_REALTIME: u32 = 1;
pub const _XOPEN_REALTIME_THREADS: u32 = 1;
pub const _XOPEN_SHM: u32 = 1;
pub const _POSIX_THREADS: u32 = 200809;
pub const _POSIX_REENTRANT_FUNCTIONS: u32 = 1;
pub const _POSIX_THREAD_SAFE_FUNCTIONS: u32 = 200809;
pub const _POSIX_THREAD_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKSIZE: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKADDR: u32 = 200809;
pub const _POSIX_THREAD_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_PRIO_PROTECT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_PROTECT: i32 = -1;
pub const _POSIX_SEMAPHORES: u32 = 200809;
pub const _POSIX_REALTIME_SIGNALS: u32 = 200809;
pub const _POSIX_ASYNCHRONOUS_IO: u32 = 200809;
pub const _POSIX_ASYNC_IO: u32 = 1;
pub const _LFS_ASYNCHRONOUS_IO: u32 = 1;
pub const _POSIX_PRIORITIZED_IO: u32 = 200809;
pub const _LFS64_ASYNCHRONOUS_IO: u32 = 1;
pub const _LFS_LARGEFILE: u32 = 1;
pub const _LFS64_LARGEFILE: u32 = 1;
pub const _LFS64_STDIO: u32 = 1;
pub const _POSIX_SHARED_MEMORY_OBJECTS: u32 = 200809;
pub const _POSIX_CPUTIME: u32 = 0;
pub const _POSIX_THREAD_CPUTIME: u32 = 0;
pub const _POSIX_REGEXP: u32 = 1;
pub const _POSIX_READER_WRITER_LOCKS: u32 = 200809;
pub const _POSIX_SHELL: u32 = 1;
pub const _POSIX_TIMEOUTS: u32 = 200809;
pub const _POSIX_SPIN_LOCKS: u32 = 200809;
pub const _POSIX_SPAWN: u32 = 200809;
pub const _POSIX_TIMERS: u32 = 200809;
pub const _POSIX_BARRIERS: u32 = 200809;
pub const _POSIX_MESSAGE_PASSING: u32 = 200809;
pub const _POSIX_THREAD_PROCESS_SHARED: u32 = 200809;
pub const _POSIX_MONOTONIC_CLOCK: u32 = 0;
pub const _POSIX_CLOCK_SELECTION: u32 = 200809;
pub const _POSIX_ADVISORY_INFO: u32 = 200809;
pub const _POSIX_IPV6: u32 = 200809;
pub const _POSIX_RAW_SOCKETS: u32 = 200809;
pub const _POSIX2_CHAR_TERM: u32 = 200809;
pub const _POSIX_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_THREAD_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_TRACE: i32 = -1;
pub const _POSIX_TRACE_EVENT_FILTER: i32 = -1;
pub const _POSIX_TRACE_INHERIT: i32 = -1;
pub const _POSIX_TRACE_LOG: i32 = -1;
pub const _POSIX_TYPED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX_V7_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V6_LPBIG_OFFBIG: i32 = -1;
pub const _XBS5_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V7_LP64_OFF64: u32 = 1;
pub const _POSIX_V6_LP64_OFF64: u32 = 1;
pub const _XBS5_LP64_OFF64: u32 = 1;
pub const __ILP32_OFF32_CFLAGS: &'static [u8; 5usize] = b"-m32\0";
pub const __ILP32_OFF32_LDFLAGS: &'static [u8; 5usize] = b"-m32\0";
pub const __ILP32_OFFBIG_CFLAGS: &'static [u8; 48usize] =
    b"-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64\0";
pub const __ILP32_OFFBIG_LDFLAGS: &'static [u8; 5usize] = b"-m32\0";
pub const __LP64_OFF64_CFLAGS: &'static [u8; 5usize] = b"-m64\0";
pub const __LP64_OFF64_LDFLAGS: &'static [u8; 5usize] = b"-m64\0";
pub const STDIN_FILENO: u32 = 0;
pub const STDOUT_FILENO: u32 = 1;
pub const STDERR_FILENO: u32 = 2;
pub const R_OK: u32 = 4;
pub const W_OK: u32 = 2;
pub const X_OK: u32 = 1;
pub const F_OK: u32 = 0;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const L_SET: u32 = 0;
pub const L_INCR: u32 = 1;
pub const L_XTND: u32 = 2;
pub const _GETOPT_POSIX_H: u32 = 1;
pub const _GETOPT_CORE_H: u32 = 1;
pub const F_ULOCK: u32 = 0;
pub const F_LOCK: u32 = 1;
pub const F_TLOCK: u32 = 2;
pub const F_TEST: u32 = 3;
pub const _FCNTL_H: u32 = 1;
pub const __O_LARGEFILE: u32 = 0;
pub const F_GETLK64: u32 = 5;
pub const F_SETLK64: u32 = 6;
pub const F_SETLKW64: u32 = 7;
pub const O_ACCMODE: u32 = 3;
pub const O_RDONLY: u32 = 0;
pub const O_WRONLY: u32 = 1;
pub const O_RDWR: u32 = 2;
pub const O_CREAT: u32 = 64;
pub const O_EXCL: u32 = 128;
pub const O_NOCTTY: u32 = 256;
pub const O_TRUNC: u32 = 512;
pub const O_APPEND: u32 = 1024;
pub const O_NONBLOCK: u32 = 2048;
pub const O_NDELAY: u32 = 2048;
pub const O_SYNC: u32 = 1052672;
pub const O_FSYNC: u32 = 1052672;
pub const O_ASYNC: u32 = 8192;
pub const __O_DIRECTORY: u32 = 65536;
pub const __O_NOFOLLOW: u32 = 131072;
pub const __O_CLOEXEC: u32 = 524288;
pub const __O_DIRECT: u32 = 16384;
pub const __O_NOATIME: u32 = 262144;
pub const __O_PATH: u32 = 2097152;
pub const __O_DSYNC: u32 = 4096;
pub const __O_TMPFILE: u32 = 4259840;
pub const F_GETLK: u32 = 5;
pub const F_SETLK: u32 = 6;
pub const F_SETLKW: u32 = 7;
pub const O_DIRECTORY: u32 = 65536;
pub const O_NOFOLLOW: u32 = 131072;
pub const O_CLOEXEC: u32 = 524288;
pub const O_DSYNC: u32 = 4096;
pub const O_RSYNC: u32 = 1052672;
pub const F_DUPFD: u32 = 0;
pub const F_GETFD: u32 = 1;
pub const F_SETFD: u32 = 2;
pub const F_GETFL: u32 = 3;
pub const F_SETFL: u32 = 4;
pub const __F_SETOWN: u32 = 8;
pub const __F_GETOWN: u32 = 9;
pub const F_SETOWN: u32 = 8;
pub const F_GETOWN: u32 = 9;
pub const __F_SETSIG: u32 = 10;
pub const __F_GETSIG: u32 = 11;
pub const __F_SETOWN_EX: u32 = 15;
pub const __F_GETOWN_EX: u32 = 16;
pub const F_DUPFD_CLOEXEC: u32 = 1030;
pub const FD_CLOEXEC: u32 = 1;
pub const F_RDLCK: u32 = 0;
pub const F_WRLCK: u32 = 1;
pub const F_UNLCK: u32 = 2;
pub const F_EXLCK: u32 = 4;
pub const F_SHLCK: u32 = 8;
pub const LOCK_SH: u32 = 1;
pub const LOCK_EX: u32 = 2;
pub const LOCK_NB: u32 = 4;
pub const LOCK_UN: u32 = 8;
pub const FAPPEND: u32 = 1024;
pub const FFSYNC: u32 = 1052672;
pub const FASYNC: u32 = 8192;
pub const FNONBLOCK: u32 = 2048;
pub const FNDELAY: u32 = 2048;
pub const __POSIX_FADV_DONTNEED: u32 = 4;
pub const __POSIX_FADV_NOREUSE: u32 = 5;
pub const POSIX_FADV_NORMAL: u32 = 0;
pub const POSIX_FADV_RANDOM: u32 = 1;
pub const POSIX_FADV_SEQUENTIAL: u32 = 2;
pub const POSIX_FADV_WILLNEED: u32 = 3;
pub const POSIX_FADV_DONTNEED: u32 = 4;
pub const POSIX_FADV_NOREUSE: u32 = 5;
pub const AT_FDCWD: i32 = -100;
pub const AT_SYMLINK_NOFOLLOW: u32 = 256;
pub const AT_REMOVEDIR: u32 = 512;
pub const AT_SYMLINK_FOLLOW: u32 = 1024;
pub const AT_EACCESS: u32 = 512;
pub const _BITS_STAT_H: u32 = 1;
pub const _STAT_VER_KERNEL: u32 = 0;
pub const _STAT_VER_LINUX: u32 = 1;
pub const _MKNOD_VER_LINUX: u32 = 0;
pub const _STAT_VER: u32 = 1;
pub const __S_IFMT: u32 = 61440;
pub const __S_IFDIR: u32 = 16384;
pub const __S_IFCHR: u32 = 8192;
pub const __S_IFBLK: u32 = 24576;
pub const __S_IFREG: u32 = 32768;
pub const __S_IFIFO: u32 = 4096;
pub const __S_IFLNK: u32 = 40960;
pub const __S_IFSOCK: u32 = 49152;
pub const __S_ISUID: u32 = 2048;
pub const __S_ISGID: u32 = 1024;
pub const __S_ISVTX: u32 = 512;
pub const __S_IREAD: u32 = 256;
pub const __S_IWRITE: u32 = 128;
pub const __S_IEXEC: u32 = 64;
pub const UTIME_NOW: u32 = 1073741823;
pub const UTIME_OMIT: u32 = 1073741822;
pub const S_IFMT: u32 = 61440;
pub const S_IFDIR: u32 = 16384;
pub const S_IFCHR: u32 = 8192;
pub const S_IFBLK: u32 = 24576;
pub const S_IFREG: u32 = 32768;
pub const S_IFIFO: u32 = 4096;
pub const S_IFLNK: u32 = 40960;
pub const S_IFSOCK: u32 = 49152;
pub const S_ISUID: u32 = 2048;
pub const S_ISGID: u32 = 1024;
pub const S_ISVTX: u32 = 512;
pub const S_IRUSR: u32 = 256;
pub const S_IWUSR: u32 = 128;
pub const S_IXUSR: u32 = 64;
pub const S_IRWXU: u32 = 448;
pub const S_IRGRP: u32 = 32;
pub const S_IWGRP: u32 = 16;
pub const S_IXGRP: u32 = 8;
pub const S_IRWXG: u32 = 56;
pub const S_IROTH: u32 = 4;
pub const S_IWOTH: u32 = 2;
pub const S_IXOTH: u32 = 1;
pub const S_IRWXO: u32 = 7;
pub const _SYS_SOCKET_H: u32 = 1;
pub const __iovec_defined: u32 = 1;
pub const PF_UNSPEC: u32 = 0;
pub const PF_LOCAL: u32 = 1;
pub const PF_UNIX: u32 = 1;
pub const PF_FILE: u32 = 1;
pub const PF_INET: u32 = 2;
pub const PF_AX25: u32 = 3;
pub const PF_IPX: u32 = 4;
pub const PF_APPLETALK: u32 = 5;
pub const PF_NETROM: u32 = 6;
pub const PF_BRIDGE: u32 = 7;
pub const PF_ATMPVC: u32 = 8;
pub const PF_X25: u32 = 9;
pub const PF_INET6: u32 = 10;
pub const PF_ROSE: u32 = 11;
pub const PF_DECnet: u32 = 12;
pub const PF_NETBEUI: u32 = 13;
pub const PF_SECURITY: u32 = 14;
pub const PF_KEY: u32 = 15;
pub const PF_NETLINK: u32 = 16;
pub const PF_ROUTE: u32 = 16;
pub const PF_PACKET: u32 = 17;
pub const PF_ASH: u32 = 18;
pub const PF_ECONET: u32 = 19;
pub const PF_ATMSVC: u32 = 20;
pub const PF_RDS: u32 = 21;
pub const PF_SNA: u32 = 22;
pub const PF_IRDA: u32 = 23;
pub const PF_PPPOX: u32 = 24;
pub const PF_WANPIPE: u32 = 25;
pub const PF_LLC: u32 = 26;
pub const PF_IB: u32 = 27;
pub const PF_MPLS: u32 = 28;
pub const PF_CAN: u32 = 29;
pub const PF_TIPC: u32 = 30;
pub const PF_BLUETOOTH: u32 = 31;
pub const PF_IUCV: u32 = 32;
pub const PF_RXRPC: u32 = 33;
pub const PF_ISDN: u32 = 34;
pub const PF_PHONET: u32 = 35;
pub const PF_IEEE802154: u32 = 36;
pub const PF_CAIF: u32 = 37;
pub const PF_ALG: u32 = 38;
pub const PF_NFC: u32 = 39;
pub const PF_VSOCK: u32 = 40;
pub const PF_KCM: u32 = 41;
pub const PF_QIPCRTR: u32 = 42;
pub const PF_SMC: u32 = 43;
pub const PF_MAX: u32 = 44;
pub const AF_UNSPEC: u32 = 0;
pub const AF_LOCAL: u32 = 1;
pub const AF_UNIX: u32 = 1;
pub const AF_FILE: u32 = 1;
pub const AF_INET: u32 = 2;
pub const AF_AX25: u32 = 3;
pub const AF_IPX: u32 = 4;
pub const AF_APPLETALK: u32 = 5;
pub const AF_NETROM: u32 = 6;
pub const AF_BRIDGE: u32 = 7;
pub const AF_ATMPVC: u32 = 8;
pub const AF_X25: u32 = 9;
pub const AF_INET6: u32 = 10;
pub const AF_ROSE: u32 = 11;
pub const AF_DECnet: u32 = 12;
pub const AF_NETBEUI: u32 = 13;
pub const AF_SECURITY: u32 = 14;
pub const AF_KEY: u32 = 15;
pub const AF_NETLINK: u32 = 16;
pub const AF_ROUTE: u32 = 16;
pub const AF_PACKET: u32 = 17;
pub const AF_ASH: u32 = 18;
pub const AF_ECONET: u32 = 19;
pub const AF_ATMSVC: u32 = 20;
pub const AF_RDS: u32 = 21;
pub const AF_SNA: u32 = 22;
pub const AF_IRDA: u32 = 23;
pub const AF_PPPOX: u32 = 24;
pub const AF_WANPIPE: u32 = 25;
pub const AF_LLC: u32 = 26;
pub const AF_IB: u32 = 27;
pub const AF_MPLS: u32 = 28;
pub const AF_CAN: u32 = 29;
pub const AF_TIPC: u32 = 30;
pub const AF_BLUETOOTH: u32 = 31;
pub const AF_IUCV: u32 = 32;
pub const AF_RXRPC: u32 = 33;
pub const AF_ISDN: u32 = 34;
pub const AF_PHONET: u32 = 35;
pub const AF_IEEE802154: u32 = 36;
pub const AF_CAIF: u32 = 37;
pub const AF_ALG: u32 = 38;
pub const AF_NFC: u32 = 39;
pub const AF_VSOCK: u32 = 40;
pub const AF_KCM: u32 = 41;
pub const AF_QIPCRTR: u32 = 42;
pub const AF_SMC: u32 = 43;
pub const AF_MAX: u32 = 44;
pub const SOL_RAW: u32 = 255;
pub const SOL_DECNET: u32 = 261;
pub const SOL_X25: u32 = 262;
pub const SOL_PACKET: u32 = 263;
pub const SOL_ATM: u32 = 264;
pub const SOL_AAL: u32 = 265;
pub const SOL_IRDA: u32 = 266;
pub const SOL_NETBEUI: u32 = 267;
pub const SOL_LLC: u32 = 268;
pub const SOL_DCCP: u32 = 269;
pub const SOL_NETLINK: u32 = 270;
pub const SOL_TIPC: u32 = 271;
pub const SOL_RXRPC: u32 = 272;
pub const SOL_PPPOL2TP: u32 = 273;
pub const SOL_BLUETOOTH: u32 = 274;
pub const SOL_PNPIPE: u32 = 275;
pub const SOL_RDS: u32 = 276;
pub const SOL_IUCV: u32 = 277;
pub const SOL_CAIF: u32 = 278;
pub const SOL_ALG: u32 = 279;
pub const SOL_NFC: u32 = 280;
pub const SOL_KCM: u32 = 281;
pub const SOL_TLS: u32 = 282;
pub const SOMAXCONN: u32 = 128;
pub const _BITS_SOCKADDR_H: u32 = 1;
pub const _SS_SIZE: u32 = 128;
pub const FIOSETOWN: u32 = 35073;
pub const SIOCSPGRP: u32 = 35074;
pub const FIOGETOWN: u32 = 35075;
pub const SIOCGPGRP: u32 = 35076;
pub const SIOCATMARK: u32 = 35077;
pub const SIOCGSTAMP: u32 = 35078;
pub const SIOCGSTAMPNS: u32 = 35079;
pub const SOL_SOCKET: u32 = 1;
pub const SO_DEBUG: u32 = 1;
pub const SO_REUSEADDR: u32 = 2;
pub const SO_TYPE: u32 = 3;
pub const SO_ERROR: u32 = 4;
pub const SO_DONTROUTE: u32 = 5;
pub const SO_BROADCAST: u32 = 6;
pub const SO_SNDBUF: u32 = 7;
pub const SO_RCVBUF: u32 = 8;
pub const SO_SNDBUFFORCE: u32 = 32;
pub const SO_RCVBUFFORCE: u32 = 33;
pub const SO_KEEPALIVE: u32 = 9;
pub const SO_OOBINLINE: u32 = 10;
pub const SO_NO_CHECK: u32 = 11;
pub const SO_PRIORITY: u32 = 12;
pub const SO_LINGER: u32 = 13;
pub const SO_BSDCOMPAT: u32 = 14;
pub const SO_REUSEPORT: u32 = 15;
pub const SO_PASSCRED: u32 = 16;
pub const SO_PEERCRED: u32 = 17;
pub const SO_RCVLOWAT: u32 = 18;
pub const SO_SNDLOWAT: u32 = 19;
pub const SO_RCVTIMEO: u32 = 20;
pub const SO_SNDTIMEO: u32 = 21;
pub const SO_SECURITY_AUTHENTICATION: u32 = 22;
pub const SO_SECURITY_ENCRYPTION_TRANSPORT: u32 = 23;
pub const SO_SECURITY_ENCRYPTION_NETWORK: u32 = 24;
pub const SO_BINDTODEVICE: u32 = 25;
pub const SO_ATTACH_FILTER: u32 = 26;
pub const SO_DETACH_FILTER: u32 = 27;
pub const SO_GET_FILTER: u32 = 26;
pub const SO_PEERNAME: u32 = 28;
pub const SO_TIMESTAMP: u32 = 29;
pub const SCM_TIMESTAMP: u32 = 29;
pub const SO_ACCEPTCONN: u32 = 30;
pub const SO_PEERSEC: u32 = 31;
pub const SO_PASSSEC: u32 = 34;
pub const SO_TIMESTAMPNS: u32 = 35;
pub const SCM_TIMESTAMPNS: u32 = 35;
pub const SO_MARK: u32 = 36;
pub const SO_TIMESTAMPING: u32 = 37;
pub const SCM_TIMESTAMPING: u32 = 37;
pub const SO_PROTOCOL: u32 = 38;
pub const SO_DOMAIN: u32 = 39;
pub const SO_RXQ_OVFL: u32 = 40;
pub const SO_WIFI_STATUS: u32 = 41;
pub const SCM_WIFI_STATUS: u32 = 41;
pub const SO_PEEK_OFF: u32 = 42;
pub const SO_NOFCS: u32 = 43;
pub const SO_LOCK_FILTER: u32 = 44;
pub const SO_SELECT_ERR_QUEUE: u32 = 45;
pub const SO_BUSY_POLL: u32 = 46;
pub const SO_MAX_PACING_RATE: u32 = 47;
pub const SO_BPF_EXTENSIONS: u32 = 48;
pub const SO_INCOMING_CPU: u32 = 49;
pub const SO_ATTACH_BPF: u32 = 50;
pub const SO_DETACH_BPF: u32 = 27;
pub const SO_ATTACH_REUSEPORT_CBPF: u32 = 51;
pub const SO_ATTACH_REUSEPORT_EBPF: u32 = 52;
pub const SO_CNX_ADVICE: u32 = 53;
pub const SCM_TIMESTAMPING_OPT_STATS: u32 = 54;
pub const SO_MEMINFO: u32 = 55;
pub const SO_INCOMING_NAPI_ID: u32 = 56;
pub const SO_COOKIE: u32 = 57;
pub const SCM_TIMESTAMPING_PKTINFO: u32 = 58;
pub const SO_PEERGROUPS: u32 = 59;
pub const SO_ZEROCOPY: u32 = 60;
pub const __osockaddr_defined: u32 = 1;
pub const _ARPA_INET_H: u32 = 1;
pub const _NETINET_IN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const __USE_KERNEL_IPV6_DEFS: u32 = 0;
pub const IP_OPTIONS: u32 = 4;
pub const IP_HDRINCL: u32 = 3;
pub const IP_TOS: u32 = 1;
pub const IP_TTL: u32 = 2;
pub const IP_RECVOPTS: u32 = 6;
pub const IP_RETOPTS: u32 = 7;
pub const IP_MULTICAST_IF: u32 = 32;
pub const IP_MULTICAST_TTL: u32 = 33;
pub const IP_MULTICAST_LOOP: u32 = 34;
pub const IP_ADD_MEMBERSHIP: u32 = 35;
pub const IP_DROP_MEMBERSHIP: u32 = 36;
pub const IP_UNBLOCK_SOURCE: u32 = 37;
pub const IP_BLOCK_SOURCE: u32 = 38;
pub const IP_ADD_SOURCE_MEMBERSHIP: u32 = 39;
pub const IP_DROP_SOURCE_MEMBERSHIP: u32 = 40;
pub const IP_MSFILTER: u32 = 41;
pub const MCAST_JOIN_GROUP: u32 = 42;
pub const MCAST_BLOCK_SOURCE: u32 = 43;
pub const MCAST_UNBLOCK_SOURCE: u32 = 44;
pub const MCAST_LEAVE_GROUP: u32 = 45;
pub const MCAST_JOIN_SOURCE_GROUP: u32 = 46;
pub const MCAST_LEAVE_SOURCE_GROUP: u32 = 47;
pub const MCAST_MSFILTER: u32 = 48;
pub const IP_MULTICAST_ALL: u32 = 49;
pub const IP_UNICAST_IF: u32 = 50;
pub const MCAST_EXCLUDE: u32 = 0;
pub const MCAST_INCLUDE: u32 = 1;
pub const IP_ROUTER_ALERT: u32 = 5;
pub const IP_PKTINFO: u32 = 8;
pub const IP_PKTOPTIONS: u32 = 9;
pub const IP_PMTUDISC: u32 = 10;
pub const IP_MTU_DISCOVER: u32 = 10;
pub const IP_RECVERR: u32 = 11;
pub const IP_RECVTTL: u32 = 12;
pub const IP_RECVTOS: u32 = 13;
pub const IP_MTU: u32 = 14;
pub const IP_FREEBIND: u32 = 15;
pub const IP_IPSEC_POLICY: u32 = 16;
pub const IP_XFRM_POLICY: u32 = 17;
pub const IP_PASSSEC: u32 = 18;
pub const IP_TRANSPARENT: u32 = 19;
pub const IP_ORIGDSTADDR: u32 = 20;
pub const IP_RECVORIGDSTADDR: u32 = 20;
pub const IP_MINTTL: u32 = 21;
pub const IP_NODEFRAG: u32 = 22;
pub const IP_CHECKSUM: u32 = 23;
pub const IP_BIND_ADDRESS_NO_PORT: u32 = 24;
pub const IP_RECVFRAGSIZE: u32 = 25;
pub const IP_PMTUDISC_DONT: u32 = 0;
pub const IP_PMTUDISC_WANT: u32 = 1;
pub const IP_PMTUDISC_DO: u32 = 2;
pub const IP_PMTUDISC_PROBE: u32 = 3;
pub const IP_PMTUDISC_INTERFACE: u32 = 4;
pub const IP_PMTUDISC_OMIT: u32 = 5;
pub const SOL_IP: u32 = 0;
pub const IP_DEFAULT_MULTICAST_TTL: u32 = 1;
pub const IP_DEFAULT_MULTICAST_LOOP: u32 = 1;
pub const IP_MAX_MEMBERSHIPS: u32 = 20;
pub const IPV6_ADDRFORM: u32 = 1;
pub const IPV6_2292PKTINFO: u32 = 2;
pub const IPV6_2292HOPOPTS: u32 = 3;
pub const IPV6_2292DSTOPTS: u32 = 4;
pub const IPV6_2292RTHDR: u32 = 5;
pub const IPV6_2292PKTOPTIONS: u32 = 6;
pub const IPV6_CHECKSUM: u32 = 7;
pub const IPV6_2292HOPLIMIT: u32 = 8;
pub const IPV6_NEXTHOP: u32 = 9;
pub const IPV6_AUTHHDR: u32 = 10;
pub const IPV6_UNICAST_HOPS: u32 = 16;
pub const IPV6_MULTICAST_IF: u32 = 17;
pub const IPV6_MULTICAST_HOPS: u32 = 18;
pub const IPV6_MULTICAST_LOOP: u32 = 19;
pub const IPV6_JOIN_GROUP: u32 = 20;
pub const IPV6_LEAVE_GROUP: u32 = 21;
pub const IPV6_ROUTER_ALERT: u32 = 22;
pub const IPV6_MTU_DISCOVER: u32 = 23;
pub const IPV6_MTU: u32 = 24;
pub const IPV6_RECVERR: u32 = 25;
pub const IPV6_V6ONLY: u32 = 26;
pub const IPV6_JOIN_ANYCAST: u32 = 27;
pub const IPV6_LEAVE_ANYCAST: u32 = 28;
pub const IPV6_IPSEC_POLICY: u32 = 34;
pub const IPV6_XFRM_POLICY: u32 = 35;
pub const IPV6_HDRINCL: u32 = 36;
pub const IPV6_RECVPKTINFO: u32 = 49;
pub const IPV6_PKTINFO: u32 = 50;
pub const IPV6_RECVHOPLIMIT: u32 = 51;
pub const IPV6_HOPLIMIT: u32 = 52;
pub const IPV6_RECVHOPOPTS: u32 = 53;
pub const IPV6_HOPOPTS: u32 = 54;
pub const IPV6_RTHDRDSTOPTS: u32 = 55;
pub const IPV6_RECVRTHDR: u32 = 56;
pub const IPV6_RTHDR: u32 = 57;
pub const IPV6_RECVDSTOPTS: u32 = 58;
pub const IPV6_DSTOPTS: u32 = 59;
pub const IPV6_RECVPATHMTU: u32 = 60;
pub const IPV6_PATHMTU: u32 = 61;
pub const IPV6_DONTFRAG: u32 = 62;
pub const IPV6_RECVTCLASS: u32 = 66;
pub const IPV6_TCLASS: u32 = 67;
pub const IPV6_AUTOFLOWLABEL: u32 = 70;
pub const IPV6_ADDR_PREFERENCES: u32 = 72;
pub const IPV6_MINHOPCOUNT: u32 = 73;
pub const IPV6_ORIGDSTADDR: u32 = 74;
pub const IPV6_RECVORIGDSTADDR: u32 = 74;
pub const IPV6_TRANSPARENT: u32 = 75;
pub const IPV6_UNICAST_IF: u32 = 76;
pub const IPV6_RECVFRAGSIZE: u32 = 77;
pub const IPV6_ADD_MEMBERSHIP: u32 = 20;
pub const IPV6_DROP_MEMBERSHIP: u32 = 21;
pub const IPV6_RXHOPOPTS: u32 = 54;
pub const IPV6_RXDSTOPTS: u32 = 59;
pub const IPV6_PMTUDISC_DONT: u32 = 0;
pub const IPV6_PMTUDISC_WANT: u32 = 1;
pub const IPV6_PMTUDISC_DO: u32 = 2;
pub const IPV6_PMTUDISC_PROBE: u32 = 3;
pub const IPV6_PMTUDISC_INTERFACE: u32 = 4;
pub const IPV6_PMTUDISC_OMIT: u32 = 5;
pub const SOL_IPV6: u32 = 41;
pub const SOL_ICMPV6: u32 = 58;
pub const IPV6_RTHDR_LOOSE: u32 = 0;
pub const IPV6_RTHDR_STRICT: u32 = 1;
pub const IPV6_RTHDR_TYPE_0: u32 = 0;
pub const IN_CLASSA_NET: u32 = 4278190080;
pub const IN_CLASSA_NSHIFT: u32 = 24;
pub const IN_CLASSA_HOST: u32 = 16777215;
pub const IN_CLASSA_MAX: u32 = 128;
pub const IN_CLASSB_NET: u32 = 4294901760;
pub const IN_CLASSB_NSHIFT: u32 = 16;
pub const IN_CLASSB_HOST: u32 = 65535;
pub const IN_CLASSB_MAX: u32 = 65536;
pub const IN_CLASSC_NET: u32 = 4294967040;
pub const IN_CLASSC_NSHIFT: u32 = 8;
pub const IN_CLASSC_HOST: u32 = 255;
pub const IN_LOOPBACKNET: u32 = 127;
pub const INET_ADDRSTRLEN: u32 = 16;
pub const INET6_ADDRSTRLEN: u32 = 46;
pub const _NETDB_H: u32 = 1;
pub const _RPC_NETDB_H: u32 = 1;
pub const _PATH_HEQUIV: &'static [u8; 17usize] = b"/etc/hosts.equiv\0";
pub const _PATH_HOSTS: &'static [u8; 11usize] = b"/etc/hosts\0";
pub const _PATH_NETWORKS: &'static [u8; 14usize] = b"/etc/networks\0";
pub const _PATH_NSSWITCH_CONF: &'static [u8; 19usize] = b"/etc/nsswitch.conf\0";
pub const _PATH_PROTOCOLS: &'static [u8; 15usize] = b"/etc/protocols\0";
pub const _PATH_SERVICES: &'static [u8; 14usize] = b"/etc/services\0";
pub const HOST_NOT_FOUND: u32 = 1;
pub const TRY_AGAIN: u32 = 2;
pub const NO_RECOVERY: u32 = 3;
pub const NO_DATA: u32 = 4;
pub const NETDB_INTERNAL: i32 = -1;
pub const NETDB_SUCCESS: u32 = 0;
pub const NO_ADDRESS: u32 = 4;
pub const AI_PASSIVE: u32 = 1;
pub const AI_CANONNAME: u32 = 2;
pub const AI_NUMERICHOST: u32 = 4;
pub const AI_V4MAPPED: u32 = 8;
pub const AI_ALL: u32 = 16;
pub const AI_ADDRCONFIG: u32 = 32;
pub const AI_NUMERICSERV: u32 = 1024;
pub const EAI_BADFLAGS: i32 = -1;
pub const EAI_NONAME: i32 = -2;
pub const EAI_AGAIN: i32 = -3;
pub const EAI_FAIL: i32 = -4;
pub const EAI_FAMILY: i32 = -6;
pub const EAI_SOCKTYPE: i32 = -7;
pub const EAI_SERVICE: i32 = -8;
pub const EAI_MEMORY: i32 = -10;
pub const EAI_SYSTEM: i32 = -11;
pub const EAI_OVERFLOW: i32 = -12;
pub const NI_MAXHOST: u32 = 1025;
pub const NI_MAXSERV: u32 = 32;
pub const NI_NUMERICHOST: u32 = 1;
pub const NI_NUMERICSERV: u32 = 2;
pub const NI_NOFQDN: u32 = 4;
pub const NI_NAMEREQD: u32 = 8;
pub const NI_DGRAM: u32 = 16;
pub const _SYS_IOCTL_H: u32 = 1;
pub const _IOC_NRBITS: u32 = 8;
pub const _IOC_TYPEBITS: u32 = 8;
pub const _IOC_SIZEBITS: u32 = 14;
pub const _IOC_DIRBITS: u32 = 2;
pub const _IOC_NRMASK: u32 = 255;
pub const _IOC_TYPEMASK: u32 = 255;
pub const _IOC_SIZEMASK: u32 = 16383;
pub const _IOC_DIRMASK: u32 = 3;
pub const _IOC_NRSHIFT: u32 = 0;
pub const _IOC_TYPESHIFT: u32 = 8;
pub const _IOC_SIZESHIFT: u32 = 16;
pub const _IOC_DIRSHIFT: u32 = 30;
pub const _IOC_NONE: u32 = 0;
pub const _IOC_WRITE: u32 = 1;
pub const _IOC_READ: u32 = 2;
pub const IOC_IN: u32 = 1073741824;
pub const IOC_OUT: u32 = 2147483648;
pub const IOC_INOUT: u32 = 3221225472;
pub const IOCSIZE_MASK: u32 = 1073676288;
pub const IOCSIZE_SHIFT: u32 = 16;
pub const TCGETS: u32 = 21505;
pub const TCSETS: u32 = 21506;
pub const TCSETSW: u32 = 21507;
pub const TCSETSF: u32 = 21508;
pub const TCGETA: u32 = 21509;
pub const TCSETA: u32 = 21510;
pub const TCSETAW: u32 = 21511;
pub const TCSETAF: u32 = 21512;
pub const TCSBRK: u32 = 21513;
pub const TCXONC: u32 = 21514;
pub const TCFLSH: u32 = 21515;
pub const TIOCEXCL: u32 = 21516;
pub const TIOCNXCL: u32 = 21517;
pub const TIOCSCTTY: u32 = 21518;
pub const TIOCGPGRP: u32 = 21519;
pub const TIOCSPGRP: u32 = 21520;
pub const TIOCOUTQ: u32 = 21521;
pub const TIOCSTI: u32 = 21522;
pub const TIOCGWINSZ: u32 = 21523;
pub const TIOCSWINSZ: u32 = 21524;
pub const TIOCMGET: u32 = 21525;
pub const TIOCMBIS: u32 = 21526;
pub const TIOCMBIC: u32 = 21527;
pub const TIOCMSET: u32 = 21528;
pub const TIOCGSOFTCAR: u32 = 21529;
pub const TIOCSSOFTCAR: u32 = 21530;
pub const FIONREAD: u32 = 21531;
pub const TIOCINQ: u32 = 21531;
pub const TIOCLINUX: u32 = 21532;
pub const TIOCCONS: u32 = 21533;
pub const TIOCGSERIAL: u32 = 21534;
pub const TIOCSSERIAL: u32 = 21535;
pub const TIOCPKT: u32 = 21536;
pub const FIONBIO: u32 = 21537;
pub const TIOCNOTTY: u32 = 21538;
pub const TIOCSETD: u32 = 21539;
pub const TIOCGETD: u32 = 21540;
pub const TCSBRKP: u32 = 21541;
pub const TIOCSBRK: u32 = 21543;
pub const TIOCCBRK: u32 = 21544;
pub const TIOCGSID: u32 = 21545;
pub const TIOCGRS485: u32 = 21550;
pub const TIOCSRS485: u32 = 21551;
pub const TCGETX: u32 = 21554;
pub const TCSETX: u32 = 21555;
pub const TCSETXF: u32 = 21556;
pub const TCSETXW: u32 = 21557;
pub const TIOCVHANGUP: u32 = 21559;
pub const FIONCLEX: u32 = 21584;
pub const FIOCLEX: u32 = 21585;
pub const FIOASYNC: u32 = 21586;
pub const TIOCSERCONFIG: u32 = 21587;
pub const TIOCSERGWILD: u32 = 21588;
pub const TIOCSERSWILD: u32 = 21589;
pub const TIOCGLCKTRMIOS: u32 = 21590;
pub const TIOCSLCKTRMIOS: u32 = 21591;
pub const TIOCSERGSTRUCT: u32 = 21592;
pub const TIOCSERGETLSR: u32 = 21593;
pub const TIOCSERGETMULTI: u32 = 21594;
pub const TIOCSERSETMULTI: u32 = 21595;
pub const TIOCMIWAIT: u32 = 21596;
pub const TIOCGICOUNT: u32 = 21597;
pub const FIOQSIZE: u32 = 21600;
pub const TIOCPKT_DATA: u32 = 0;
pub const TIOCPKT_FLUSHREAD: u32 = 1;
pub const TIOCPKT_FLUSHWRITE: u32 = 2;
pub const TIOCPKT_STOP: u32 = 4;
pub const TIOCPKT_START: u32 = 8;
pub const TIOCPKT_NOSTOP: u32 = 16;
pub const TIOCPKT_DOSTOP: u32 = 32;
pub const TIOCPKT_IOCTL: u32 = 64;
pub const TIOCSER_TEMT: u32 = 1;
pub const SIOCADDRT: u32 = 35083;
pub const SIOCDELRT: u32 = 35084;
pub const SIOCRTMSG: u32 = 35085;
pub const SIOCGIFNAME: u32 = 35088;
pub const SIOCSIFLINK: u32 = 35089;
pub const SIOCGIFCONF: u32 = 35090;
pub const SIOCGIFFLAGS: u32 = 35091;
pub const SIOCSIFFLAGS: u32 = 35092;
pub const SIOCGIFADDR: u32 = 35093;
pub const SIOCSIFADDR: u32 = 35094;
pub const SIOCGIFDSTADDR: u32 = 35095;
pub const SIOCSIFDSTADDR: u32 = 35096;
pub const SIOCGIFBRDADDR: u32 = 35097;
pub const SIOCSIFBRDADDR: u32 = 35098;
pub const SIOCGIFNETMASK: u32 = 35099;
pub const SIOCSIFNETMASK: u32 = 35100;
pub const SIOCGIFMETRIC: u32 = 35101;
pub const SIOCSIFMETRIC: u32 = 35102;
pub const SIOCGIFMEM: u32 = 35103;
pub const SIOCSIFMEM: u32 = 35104;
pub const SIOCGIFMTU: u32 = 35105;
pub const SIOCSIFMTU: u32 = 35106;
pub const SIOCSIFNAME: u32 = 35107;
pub const SIOCSIFHWADDR: u32 = 35108;
pub const SIOCGIFENCAP: u32 = 35109;
pub const SIOCSIFENCAP: u32 = 35110;
pub const SIOCGIFHWADDR: u32 = 35111;
pub const SIOCGIFSLAVE: u32 = 35113;
pub const SIOCSIFSLAVE: u32 = 35120;
pub const SIOCADDMULTI: u32 = 35121;
pub const SIOCDELMULTI: u32 = 35122;
pub const SIOCGIFINDEX: u32 = 35123;
pub const SIOGIFINDEX: u32 = 35123;
pub const SIOCSIFPFLAGS: u32 = 35124;
pub const SIOCGIFPFLAGS: u32 = 35125;
pub const SIOCDIFADDR: u32 = 35126;
pub const SIOCSIFHWBROADCAST: u32 = 35127;
pub const SIOCGIFCOUNT: u32 = 35128;
pub const SIOCGIFBR: u32 = 35136;
pub const SIOCSIFBR: u32 = 35137;
pub const SIOCGIFTXQLEN: u32 = 35138;
pub const SIOCSIFTXQLEN: u32 = 35139;
pub const SIOCDARP: u32 = 35155;
pub const SIOCGARP: u32 = 35156;
pub const SIOCSARP: u32 = 35157;
pub const SIOCDRARP: u32 = 35168;
pub const SIOCGRARP: u32 = 35169;
pub const SIOCSRARP: u32 = 35170;
pub const SIOCGIFMAP: u32 = 35184;
pub const SIOCSIFMAP: u32 = 35185;
pub const SIOCADDDLCI: u32 = 35200;
pub const SIOCDELDLCI: u32 = 35201;
pub const SIOCDEVPRIVATE: u32 = 35312;
pub const SIOCPROTOPRIVATE: u32 = 35296;
pub const NCC: u32 = 8;
pub const TIOCM_LE: u32 = 1;
pub const TIOCM_DTR: u32 = 2;
pub const TIOCM_RTS: u32 = 4;
pub const TIOCM_ST: u32 = 8;
pub const TIOCM_SR: u32 = 16;
pub const TIOCM_CTS: u32 = 32;
pub const TIOCM_CAR: u32 = 64;
pub const TIOCM_RNG: u32 = 128;
pub const TIOCM_DSR: u32 = 256;
pub const TIOCM_CD: u32 = 64;
pub const TIOCM_RI: u32 = 128;
pub const N_TTY: u32 = 0;
pub const N_SLIP: u32 = 1;
pub const N_MOUSE: u32 = 2;
pub const N_PPP: u32 = 3;
pub const N_STRIP: u32 = 4;
pub const N_AX25: u32 = 5;
pub const N_X25: u32 = 6;
pub const N_6PACK: u32 = 7;
pub const N_MASC: u32 = 8;
pub const N_R3964: u32 = 9;
pub const N_PROFIBUS_FDL: u32 = 10;
pub const N_IRDA: u32 = 11;
pub const N_SMSBLOCK: u32 = 12;
pub const N_HDLC: u32 = 13;
pub const N_SYNC_PPP: u32 = 14;
pub const N_HCI: u32 = 15;
pub const CEOL: u8 = 0u8;
pub const CERASE: u32 = 127;
pub const CSTATUS: u8 = 0u8;
pub const CMIN: u32 = 1;
pub const CQUIT: u32 = 28;
pub const CTIME: u32 = 0;
pub const CBRK: u8 = 0u8;
pub const SOCKET_EWOULDBLOCK: u32 = 11;
pub const SOCKET_EAGAIN: u32 = 11;
pub const SOCKET_ECONNRESET: u32 = 104;
pub const SOCKET_EINTR: u32 = 4;
pub const SOCKET_EPIPE: u32 = 32;
pub const SOCKET_ECONNREFUSED: u32 = 111;
pub const SOCKET_ECONNABORTED: u32 = 103;
pub const WOLFSSL_IP4: u32 = 2;
pub const WOLFSSL_IP6: u32 = 10;
pub const WOLFSSL_MAX_MASTER_KEY_LENGTH: u32 = 48;
pub const WOLFSSL_DEFAULT_CIPHER_LIST: &'static [u8; 1usize] = b"\0";
pub const WOLFSSL_RSA_F4: u32 = 65537;
pub const _STDIO_H: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const _BITS_LIBIO_H: u32 = 1;
pub const _BITS_G_CONFIG_H: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _G_HAVE_MMAP: u32 = 1;
pub const _G_HAVE_MREMAP: u32 = 1;
pub const _G_IO_IO_FILE_VERSION: u32 = 131073;
pub const _G_BUFSIZ: u32 = 8192;
pub const _IO_BUFSIZ: u32 = 8192;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _IO_UNIFIED_JUMPTABLES: u32 = 1;
pub const EOF: i32 = -1;
pub const _IOS_INPUT: u32 = 1;
pub const _IOS_OUTPUT: u32 = 2;
pub const _IOS_ATEND: u32 = 4;
pub const _IOS_APPEND: u32 = 8;
pub const _IOS_TRUNC: u32 = 16;
pub const _IOS_NOCREATE: u32 = 32;
pub const _IOS_NOREPLACE: u32 = 64;
pub const _IOS_BIN: u32 = 128;
pub const _IO_MAGIC: u32 = 4222418944;
pub const _OLD_STDIO_MAGIC: u32 = 4206624768;
pub const _IO_MAGIC_MASK: u32 = 4294901760;
pub const _IO_USER_BUF: u32 = 1;
pub const _IO_UNBUFFERED: u32 = 2;
pub const _IO_NO_READS: u32 = 4;
pub const _IO_NO_WRITES: u32 = 8;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_DELETE_DONT_CLOSE: u32 = 64;
pub const _IO_LINKED: u32 = 128;
pub const _IO_IN_BACKUP: u32 = 256;
pub const _IO_LINE_BUF: u32 = 512;
pub const _IO_TIED_PUT_GET: u32 = 1024;
pub const _IO_CURRENTLY_PUTTING: u32 = 2048;
pub const _IO_IS_APPENDING: u32 = 4096;
pub const _IO_IS_FILEBUF: u32 = 8192;
pub const _IO_BAD_SEEN: u32 = 16384;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IO_FLAGS2_MMAP: u32 = 1;
pub const _IO_FLAGS2_NOTCANCEL: u32 = 2;
pub const _IO_FLAGS2_USER_WBUF: u32 = 8;
pub const _IO_SKIPWS: u32 = 1;
pub const _IO_LEFT: u32 = 2;
pub const _IO_RIGHT: u32 = 4;
pub const _IO_INTERNAL: u32 = 8;
pub const _IO_DEC: u32 = 16;
pub const _IO_OCT: u32 = 32;
pub const _IO_HEX: u32 = 64;
pub const _IO_SHOWBASE: u32 = 128;
pub const _IO_SHOWPOINT: u32 = 256;
pub const _IO_UPPERCASE: u32 = 512;
pub const _IO_SHOWPOS: u32 = 1024;
pub const _IO_SCIENTIFIC: u32 = 2048;
pub const _IO_FIXED: u32 = 4096;
pub const _IO_UNITBUF: u32 = 8192;
pub const _IO_STDIO: u32 = 16384;
pub const _IO_DONT_CLOSE: u32 = 32768;
pub const _IO_BOOLALPHA: u32 = 65536;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const P_tmpdir: &'static [u8; 5usize] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const _SYS_UIO_H: u32 = 1;
pub const _BITS_UIO_LIM_H: u32 = 1;
pub const __IOV_MAX: u32 = 1024;
pub const UIO_MAXIOV: u32 = 1024;
pub const WOLFSSL_CRL_MONITOR: u32 = 1;
pub const WOLFSSL_CRL_START_MON: u32 = 2;
pub const _PTHREAD_H: u32 = 1;
pub const _SCHED_H: u32 = 1;
pub const _BITS_SCHED_H: u32 = 1;
pub const SCHED_OTHER: u32 = 0;
pub const SCHED_FIFO: u32 = 1;
pub const SCHED_RR: u32 = 2;
pub const _BITS_CPU_SET_H: u32 = 1;
pub const __CPU_SETSIZE: u32 = 1024;
pub const _TIME_H: u32 = 1;
pub const _BITS_TIME_H: u32 = 1;
pub const CLOCK_REALTIME: u32 = 0;
pub const CLOCK_MONOTONIC: u32 = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
pub const CLOCK_MONOTONIC_RAW: u32 = 4;
pub const CLOCK_REALTIME_COARSE: u32 = 5;
pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
pub const CLOCK_BOOTTIME: u32 = 7;
pub const CLOCK_REALTIME_ALARM: u32 = 8;
pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
pub const CLOCK_TAI: u32 = 11;
pub const TIMER_ABSTIME: u32 = 1;
pub const __struct_tm_defined: u32 = 1;
pub const __itimerspec_defined: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const TIME_UTC: u32 = 1;
pub const _BITS_SETJMP_H: u32 = 1;
pub const PTHREAD_ONCE_INIT: u32 = 0;
pub const PTHREAD_BARRIER_SERIAL_THREAD: i32 = -1;
pub const WOLFSSL_CRYPT_HW_MUTEX: u32 = 0;
pub const XSEEK_END: u32 = 2;
pub const _DIRENT_H: u32 = 1;
pub const _DIRENT_MATCHES_DIRENT64: u32 = 1;
pub const _BITS_POSIX1_LIM_H: u32 = 1;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const NR_OPEN: u32 = 1024;
pub const NGROUPS_MAX: u32 = 65536;
pub const ARG_MAX: u32 = 131072;
pub const LINK_MAX: u32 = 127;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const PATH_MAX: u32 = 4096;
pub const PIPE_BUF: u32 = 4096;
pub const XATTR_NAME_MAX: u32 = 255;
pub const XATTR_SIZE_MAX: u32 = 65536;
pub const XATTR_LIST_MAX: u32 = 65536;
pub const RTSIG_MAX: u32 = 32;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const PTHREAD_KEYS_MAX: u32 = 1024;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const AIO_PRIO_DELTA_MAX: u32 = 20;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const DELAYTIMER_MAX: u32 = 2147483647;
pub const TTY_NAME_MAX: u32 = 32;
pub const LOGIN_NAME_MAX: u32 = 256;
pub const HOST_NAME_MAX: u32 = 64;
pub const MQ_PRIO_MAX: u32 = 32768;
pub const SEM_VALUE_MAX: u32 = 2147483647;
pub const MAXNAMLEN: u32 = 255;
pub const _SYS_STAT_H: u32 = 1;
pub const S_IREAD: u32 = 256;
pub const S_IWRITE: u32 = 128;
pub const S_IEXEC: u32 = 64;
pub const ACCESSPERMS: u32 = 511;
pub const ALLPERMS: u32 = 4095;
pub const DEFFILEMODE: u32 = 438;
pub const S_BLKSIZE: u32 = 512;
pub const _MKNOD_VER: u32 = 0;
pub const MAX_FILENAME_SZ: u32 = 256;
pub const MAX_PATH: u32 = 256;
pub const SIZEOF_LONG: u32 = 8;
pub const WOLFSSL_MAX_16BIT: u32 = 65535;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __ENUM_IDTYPE_T: u32 = 1;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _ALLOCA_H: u32 = 1;
pub const _STRING_H: u32 = 1;
pub const _STRINGS_H: u32 = 1;
pub const _CTYPE_H: u32 = 1;
pub const WOLFSSL_MAX_ERROR_SZ: u32 = 80;
pub const INVALID_DEVID: i32 = -2;
pub const TRUE: u32 = 1;
pub const FALSE: u32 = 0;
pub const RNG_MAX_BLOCK_LEN: u32 = 65536;
pub const DRBG_SEED_LEN: u32 = 55;
pub const WC_RESEED_INTERVAL: u32 = 1000000;
pub const _LIBC_LIMITS_H_: u32 = 1;
pub const MB_LEN_MAX: u32 = 16;
pub const _BITS_POSIX2_LIM_H: u32 = 1;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const COLL_WEIGHTS_MAX: u32 = 255;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const CHARCLASS_NAME_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 32767;
pub const DIGIT_BIT: u32 = 60;
pub const MP_DIGIT_BIT: u32 = 60;
pub const MP_LT: i32 = -1;
pub const MP_EQ: u32 = 0;
pub const MP_GT: u32 = 1;
pub const MP_ZPOS: u32 = 0;
pub const MP_NEG: u32 = 1;
pub const MP_OKAY: u32 = 0;
pub const MP_MEM: i32 = -2;
pub const MP_VAL: i32 = -3;
pub const MP_NOT_INF: i32 = -4;
pub const MP_RANGE: i32 = -4;
pub const MP_YES: u32 = 1;
pub const MP_NO: u32 = 0;
pub const LTM_PRIME_BBS: u32 = 1;
pub const LTM_PRIME_SAFE: u32 = 2;
pub const LTM_PRIME_2MSB_ON: u32 = 8;
pub const MP_PREC: u32 = 1;
pub const PRIME_SIZE: u32 = 256;
pub const MAX_INVMOD_SZ: u32 = 4096;
pub const MP_RADIX_BIN: u32 = 2;
pub const MP_RADIX_OCT: u32 = 8;
pub const MP_RADIX_DEC: u32 = 10;
pub const MP_RADIX_HEX: u32 = 16;
pub const MP_RADIX_MAX: u32 = 64;
pub const ASN_UTC_TIME_SIZE: u32 = 14;
pub const ASN_GENERALIZED_TIME_SIZE: u32 = 16;
pub const KEYUSE_DIGITAL_SIG: u32 = 128;
pub const KEYUSE_CONTENT_COMMIT: u32 = 64;
pub const KEYUSE_KEY_ENCIPHER: u32 = 32;
pub const KEYUSE_DATA_ENCIPHER: u32 = 16;
pub const KEYUSE_KEY_AGREE: u32 = 8;
pub const KEYUSE_KEY_CERT_SIGN: u32 = 4;
pub const KEYUSE_CRL_SIGN: u32 = 2;
pub const KEYUSE_ENCIPHER_ONLY: u32 = 1;
pub const KEYUSE_DECIPHER_ONLY: u32 = 32768;
pub const EXTKEYUSE_OCSP_SIGN: u32 = 64;
pub const EXTKEYUSE_TIMESTAMP: u32 = 32;
pub const EXTKEYUSE_EMAILPROT: u32 = 16;
pub const EXTKEYUSE_CODESIGN: u32 = 8;
pub const EXTKEYUSE_CLIENT_AUTH: u32 = 4;
pub const EXTKEYUSE_SERVER_AUTH: u32 = 2;
pub const EXTKEYUSE_ANY: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const SGX_FLAGS_INITTED: u32 = 1;
pub const SGX_FLAGS_DEBUG: u32 = 2;
pub const SGX_FLAGS_MODE64BIT: u32 = 4;
pub const SGX_FLAGS_PROVISION_KEY: u32 = 16;
pub const SGX_FLAGS_EINITTOKEN_KEY: u32 = 32;
pub const SGX_FLAGS_KSS: u32 = 128;
pub const SGX_XFRM_LEGACY: u32 = 3;
pub const SGX_XFRM_AVX: u32 = 6;
pub const SGX_XFRM_AVX512: u32 = 230;
pub const SGX_XFRM_MPX: u32 = 24;
pub const SGX_XFRM_RESERVED: i32 = -256;
pub const SGX_KEYSELECT_EINITTOKEN: u32 = 0;
pub const SGX_KEYSELECT_PROVISION: u32 = 1;
pub const SGX_KEYSELECT_PROVISION_SEAL: u32 = 2;
pub const SGX_KEYSELECT_REPORT: u32 = 3;
pub const SGX_KEYSELECT_SEAL: u32 = 4;
pub const SGX_KEYPOLICY_MRENCLAVE: u32 = 1;
pub const SGX_KEYPOLICY_MRSIGNER: u32 = 2;
pub const SGX_KEYPOLICY_NOISVPRODID: u32 = 4;
pub const SGX_KEYPOLICY_CONFIGID: u32 = 8;
pub const SGX_KEYPOLICY_ISVFAMILYID: u32 = 16;
pub const SGX_KEYPOLICY_ISVEXTPRODID: u32 = 32;
pub const SGX_KEYID_SIZE: u32 = 32;
pub const SGX_CPUSVN_SIZE: u32 = 16;
pub const SGX_CONFIGID_SIZE: u32 = 64;
pub const SGX_KEY_REQUEST_RESERVED2_BYTES: u32 = 434;
pub const SGX_HASH_SIZE: u32 = 32;
pub const SGX_MAC_SIZE: u32 = 16;
pub const SGX_REPORT_DATA_SIZE: u32 = 64;
pub const SGX_ISVEXT_PROD_ID_SIZE: u32 = 16;
pub const SGX_ISV_FAMILY_ID_SIZE: u32 = 16;
pub const SGX_TARGET_INFO_RESERVED1_BYTES: u32 = 2;
pub const SGX_TARGET_INFO_RESERVED2_BYTES: u32 = 8;
pub const SGX_TARGET_INFO_RESERVED3_BYTES: u32 = 384;
pub const SGX_REPORT_BODY_RESERVED1_BYTES: u32 = 12;
pub const SGX_REPORT_BODY_RESERVED2_BYTES: u32 = 32;
pub const SGX_REPORT_BODY_RESERVED3_BYTES: u32 = 32;
pub const SGX_REPORT_BODY_RESERVED4_BYTES: u32 = 42;
pub const SGX_PLATFORM_INFO_SIZE: u32 = 101;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WOLFSSL {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WOLFSSL_SESSION {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WOLFSSL_METHOD {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WOLFSSL_CTX {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WOLFSSL_STACK {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WOLFSSL_X509 {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WOLFSSL_X509_NAME {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WOLFSSL_X509_NAME_ENTRY {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WOLFSSL_X509_CHAIN {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WOLFSSL_CERT_MANAGER {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WOLFSSL_SOCKADDR {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WOLFSSL_CRL {
    _unused: [u8; 0],
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type ssize_t = __ssize_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type size_t = ::std::os::raw::c_ulong;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulong;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fd_set>())).__fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gnu_dev_major(__dev: __dev_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_minor(__dev: __dev_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_makedev(
        __major: ::std::os::raw::c_uint,
        __minor: ::std::os::raw::c_uint,
    ) -> __dev_t;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__readers as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__wrphase_futex as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers_futex as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad4 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__cur_writer as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__shared as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__rwelision as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad1 as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad2 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
impl Default for __pthread_internal_list {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__owner as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__nusers as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__kind as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__spins as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__elision as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__list as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
impl Default for __pthread_mutex_s {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::std::os::raw::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq32)
        )
    );
}
impl Default for __pthread_cond_s__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ::std::os::raw::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start32 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start32)
        )
    );
}
impl Default for __pthread_cond_s__bindgen_ty_2 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_refs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g1_orig_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__wrefs as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_signals as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
impl Default for __pthread_cond_s {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_mutexattr_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_condattr_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_attr_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 5usize],
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_mutex_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 6usize],
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_cond_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_rwlock_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_rwlockattr_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_barrier_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_barrierattr_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn __errno_location() -> *mut ::std::os::raw::c_int;
}
pub type useconds_t = __useconds_t;
pub type socklen_t = __socklen_t;
extern "C" {
    pub fn access(
        __name: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn faccessat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lseek(
        __fd: ::std::os::raw::c_int,
        __offset: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> __off_t;
}
extern "C" {
    pub fn close(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn read(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbytes: size_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn write(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: size_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn pread(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbytes: size_t,
        __offset: __off_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn pwrite(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: size_t,
        __offset: __off_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn pipe(__pipedes: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alarm(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sleep(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ualarm(__value: __useconds_t, __interval: __useconds_t) -> __useconds_t;
}
extern "C" {
    pub fn usleep(__useconds: __useconds_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pause() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chown(
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchown(
        __fd: ::std::os::raw::c_int,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lchown(
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchownat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chdir(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchdir(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getcwd(
        __buf: *mut ::std::os::raw::c_char,
        __size: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getwd(__buf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dup(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dup2(__fd: ::std::os::raw::c_int, __fd2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut __environ: *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn execve(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fexecve(
        __fd: ::std::os::raw::c_int,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execv(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execle(
        __path: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execl(
        __path: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execvp(
        __file: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execlp(
        __file: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nice(__inc: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _exit(__status: ::std::os::raw::c_int);
}
pub const _PC_LINK_MAX: ::std::os::raw::c_uint = 0;
pub const _PC_MAX_CANON: ::std::os::raw::c_uint = 1;
pub const _PC_MAX_INPUT: ::std::os::raw::c_uint = 2;
pub const _PC_NAME_MAX: ::std::os::raw::c_uint = 3;
pub const _PC_PATH_MAX: ::std::os::raw::c_uint = 4;
pub const _PC_PIPE_BUF: ::std::os::raw::c_uint = 5;
pub const _PC_CHOWN_RESTRICTED: ::std::os::raw::c_uint = 6;
pub const _PC_NO_TRUNC: ::std::os::raw::c_uint = 7;
pub const _PC_VDISABLE: ::std::os::raw::c_uint = 8;
pub const _PC_SYNC_IO: ::std::os::raw::c_uint = 9;
pub const _PC_ASYNC_IO: ::std::os::raw::c_uint = 10;
pub const _PC_PRIO_IO: ::std::os::raw::c_uint = 11;
pub const _PC_SOCK_MAXBUF: ::std::os::raw::c_uint = 12;
pub const _PC_FILESIZEBITS: ::std::os::raw::c_uint = 13;
pub const _PC_REC_INCR_XFER_SIZE: ::std::os::raw::c_uint = 14;
pub const _PC_REC_MAX_XFER_SIZE: ::std::os::raw::c_uint = 15;
pub const _PC_REC_MIN_XFER_SIZE: ::std::os::raw::c_uint = 16;
pub const _PC_REC_XFER_ALIGN: ::std::os::raw::c_uint = 17;
pub const _PC_ALLOC_SIZE_MIN: ::std::os::raw::c_uint = 18;
pub const _PC_SYMLINK_MAX: ::std::os::raw::c_uint = 19;
pub const _PC_2_SYMLINKS: ::std::os::raw::c_uint = 20;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub const _SC_ARG_MAX: ::std::os::raw::c_uint = 0;
pub const _SC_CHILD_MAX: ::std::os::raw::c_uint = 1;
pub const _SC_CLK_TCK: ::std::os::raw::c_uint = 2;
pub const _SC_NGROUPS_MAX: ::std::os::raw::c_uint = 3;
pub const _SC_OPEN_MAX: ::std::os::raw::c_uint = 4;
pub const _SC_STREAM_MAX: ::std::os::raw::c_uint = 5;
pub const _SC_TZNAME_MAX: ::std::os::raw::c_uint = 6;
pub const _SC_JOB_CONTROL: ::std::os::raw::c_uint = 7;
pub const _SC_SAVED_IDS: ::std::os::raw::c_uint = 8;
pub const _SC_REALTIME_SIGNALS: ::std::os::raw::c_uint = 9;
pub const _SC_PRIORITY_SCHEDULING: ::std::os::raw::c_uint = 10;
pub const _SC_TIMERS: ::std::os::raw::c_uint = 11;
pub const _SC_ASYNCHRONOUS_IO: ::std::os::raw::c_uint = 12;
pub const _SC_PRIORITIZED_IO: ::std::os::raw::c_uint = 13;
pub const _SC_SYNCHRONIZED_IO: ::std::os::raw::c_uint = 14;
pub const _SC_FSYNC: ::std::os::raw::c_uint = 15;
pub const _SC_MAPPED_FILES: ::std::os::raw::c_uint = 16;
pub const _SC_MEMLOCK: ::std::os::raw::c_uint = 17;
pub const _SC_MEMLOCK_RANGE: ::std::os::raw::c_uint = 18;
pub const _SC_MEMORY_PROTECTION: ::std::os::raw::c_uint = 19;
pub const _SC_MESSAGE_PASSING: ::std::os::raw::c_uint = 20;
pub const _SC_SEMAPHORES: ::std::os::raw::c_uint = 21;
pub const _SC_SHARED_MEMORY_OBJECTS: ::std::os::raw::c_uint = 22;
pub const _SC_AIO_LISTIO_MAX: ::std::os::raw::c_uint = 23;
pub const _SC_AIO_MAX: ::std::os::raw::c_uint = 24;
pub const _SC_AIO_PRIO_DELTA_MAX: ::std::os::raw::c_uint = 25;
pub const _SC_DELAYTIMER_MAX: ::std::os::raw::c_uint = 26;
pub const _SC_MQ_OPEN_MAX: ::std::os::raw::c_uint = 27;
pub const _SC_MQ_PRIO_MAX: ::std::os::raw::c_uint = 28;
pub const _SC_VERSION: ::std::os::raw::c_uint = 29;
pub const _SC_PAGESIZE: ::std::os::raw::c_uint = 30;
pub const _SC_RTSIG_MAX: ::std::os::raw::c_uint = 31;
pub const _SC_SEM_NSEMS_MAX: ::std::os::raw::c_uint = 32;
pub const _SC_SEM_VALUE_MAX: ::std::os::raw::c_uint = 33;
pub const _SC_SIGQUEUE_MAX: ::std::os::raw::c_uint = 34;
pub const _SC_TIMER_MAX: ::std::os::raw::c_uint = 35;
pub const _SC_BC_BASE_MAX: ::std::os::raw::c_uint = 36;
pub const _SC_BC_DIM_MAX: ::std::os::raw::c_uint = 37;
pub const _SC_BC_SCALE_MAX: ::std::os::raw::c_uint = 38;
pub const _SC_BC_STRING_MAX: ::std::os::raw::c_uint = 39;
pub const _SC_COLL_WEIGHTS_MAX: ::std::os::raw::c_uint = 40;
pub const _SC_EQUIV_CLASS_MAX: ::std::os::raw::c_uint = 41;
pub const _SC_EXPR_NEST_MAX: ::std::os::raw::c_uint = 42;
pub const _SC_LINE_MAX: ::std::os::raw::c_uint = 43;
pub const _SC_RE_DUP_MAX: ::std::os::raw::c_uint = 44;
pub const _SC_CHARCLASS_NAME_MAX: ::std::os::raw::c_uint = 45;
pub const _SC_2_VERSION: ::std::os::raw::c_uint = 46;
pub const _SC_2_C_BIND: ::std::os::raw::c_uint = 47;
pub const _SC_2_C_DEV: ::std::os::raw::c_uint = 48;
pub const _SC_2_FORT_DEV: ::std::os::raw::c_uint = 49;
pub const _SC_2_FORT_RUN: ::std::os::raw::c_uint = 50;
pub const _SC_2_SW_DEV: ::std::os::raw::c_uint = 51;
pub const _SC_2_LOCALEDEF: ::std::os::raw::c_uint = 52;
pub const _SC_PII: ::std::os::raw::c_uint = 53;
pub const _SC_PII_XTI: ::std::os::raw::c_uint = 54;
pub const _SC_PII_SOCKET: ::std::os::raw::c_uint = 55;
pub const _SC_PII_INTERNET: ::std::os::raw::c_uint = 56;
pub const _SC_PII_OSI: ::std::os::raw::c_uint = 57;
pub const _SC_POLL: ::std::os::raw::c_uint = 58;
pub const _SC_SELECT: ::std::os::raw::c_uint = 59;
pub const _SC_UIO_MAXIOV: ::std::os::raw::c_uint = 60;
pub const _SC_IOV_MAX: ::std::os::raw::c_uint = 60;
pub const _SC_PII_INTERNET_STREAM: ::std::os::raw::c_uint = 61;
pub const _SC_PII_INTERNET_DGRAM: ::std::os::raw::c_uint = 62;
pub const _SC_PII_OSI_COTS: ::std::os::raw::c_uint = 63;
pub const _SC_PII_OSI_CLTS: ::std::os::raw::c_uint = 64;
pub const _SC_PII_OSI_M: ::std::os::raw::c_uint = 65;
pub const _SC_T_IOV_MAX: ::std::os::raw::c_uint = 66;
pub const _SC_THREADS: ::std::os::raw::c_uint = 67;
pub const _SC_THREAD_SAFE_FUNCTIONS: ::std::os::raw::c_uint = 68;
pub const _SC_GETGR_R_SIZE_MAX: ::std::os::raw::c_uint = 69;
pub const _SC_GETPW_R_SIZE_MAX: ::std::os::raw::c_uint = 70;
pub const _SC_LOGIN_NAME_MAX: ::std::os::raw::c_uint = 71;
pub const _SC_TTY_NAME_MAX: ::std::os::raw::c_uint = 72;
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: ::std::os::raw::c_uint = 73;
pub const _SC_THREAD_KEYS_MAX: ::std::os::raw::c_uint = 74;
pub const _SC_THREAD_STACK_MIN: ::std::os::raw::c_uint = 75;
pub const _SC_THREAD_THREADS_MAX: ::std::os::raw::c_uint = 76;
pub const _SC_THREAD_ATTR_STACKADDR: ::std::os::raw::c_uint = 77;
pub const _SC_THREAD_ATTR_STACKSIZE: ::std::os::raw::c_uint = 78;
pub const _SC_THREAD_PRIORITY_SCHEDULING: ::std::os::raw::c_uint = 79;
pub const _SC_THREAD_PRIO_INHERIT: ::std::os::raw::c_uint = 80;
pub const _SC_THREAD_PRIO_PROTECT: ::std::os::raw::c_uint = 81;
pub const _SC_THREAD_PROCESS_SHARED: ::std::os::raw::c_uint = 82;
pub const _SC_NPROCESSORS_CONF: ::std::os::raw::c_uint = 83;
pub const _SC_NPROCESSORS_ONLN: ::std::os::raw::c_uint = 84;
pub const _SC_PHYS_PAGES: ::std::os::raw::c_uint = 85;
pub const _SC_AVPHYS_PAGES: ::std::os::raw::c_uint = 86;
pub const _SC_ATEXIT_MAX: ::std::os::raw::c_uint = 87;
pub const _SC_PASS_MAX: ::std::os::raw::c_uint = 88;
pub const _SC_XOPEN_VERSION: ::std::os::raw::c_uint = 89;
pub const _SC_XOPEN_XCU_VERSION: ::std::os::raw::c_uint = 90;
pub const _SC_XOPEN_UNIX: ::std::os::raw::c_uint = 91;
pub const _SC_XOPEN_CRYPT: ::std::os::raw::c_uint = 92;
pub const _SC_XOPEN_ENH_I18N: ::std::os::raw::c_uint = 93;
pub const _SC_XOPEN_SHM: ::std::os::raw::c_uint = 94;
pub const _SC_2_CHAR_TERM: ::std::os::raw::c_uint = 95;
pub const _SC_2_C_VERSION: ::std::os::raw::c_uint = 96;
pub const _SC_2_UPE: ::std::os::raw::c_uint = 97;
pub const _SC_XOPEN_XPG2: ::std::os::raw::c_uint = 98;
pub const _SC_XOPEN_XPG3: ::std::os::raw::c_uint = 99;
pub const _SC_XOPEN_XPG4: ::std::os::raw::c_uint = 100;
pub const _SC_CHAR_BIT: ::std::os::raw::c_uint = 101;
pub const _SC_CHAR_MAX: ::std::os::raw::c_uint = 102;
pub const _SC_CHAR_MIN: ::std::os::raw::c_uint = 103;
pub const _SC_INT_MAX: ::std::os::raw::c_uint = 104;
pub const _SC_INT_MIN: ::std::os::raw::c_uint = 105;
pub const _SC_LONG_BIT: ::std::os::raw::c_uint = 106;
pub const _SC_WORD_BIT: ::std::os::raw::c_uint = 107;
pub const _SC_MB_LEN_MAX: ::std::os::raw::c_uint = 108;
pub const _SC_NZERO: ::std::os::raw::c_uint = 109;
pub const _SC_SSIZE_MAX: ::std::os::raw::c_uint = 110;
pub const _SC_SCHAR_MAX: ::std::os::raw::c_uint = 111;
pub const _SC_SCHAR_MIN: ::std::os::raw::c_uint = 112;
pub const _SC_SHRT_MAX: ::std::os::raw::c_uint = 113;
pub const _SC_SHRT_MIN: ::std::os::raw::c_uint = 114;
pub const _SC_UCHAR_MAX: ::std::os::raw::c_uint = 115;
pub const _SC_UINT_MAX: ::std::os::raw::c_uint = 116;
pub const _SC_ULONG_MAX: ::std::os::raw::c_uint = 117;
pub const _SC_USHRT_MAX: ::std::os::raw::c_uint = 118;
pub const _SC_NL_ARGMAX: ::std::os::raw::c_uint = 119;
pub const _SC_NL_LANGMAX: ::std::os::raw::c_uint = 120;
pub const _SC_NL_MSGMAX: ::std::os::raw::c_uint = 121;
pub const _SC_NL_NMAX: ::std::os::raw::c_uint = 122;
pub const _SC_NL_SETMAX: ::std::os::raw::c_uint = 123;
pub const _SC_NL_TEXTMAX: ::std::os::raw::c_uint = 124;
pub const _SC_XBS5_ILP32_OFF32: ::std::os::raw::c_uint = 125;
pub const _SC_XBS5_ILP32_OFFBIG: ::std::os::raw::c_uint = 126;
pub const _SC_XBS5_LP64_OFF64: ::std::os::raw::c_uint = 127;
pub const _SC_XBS5_LPBIG_OFFBIG: ::std::os::raw::c_uint = 128;
pub const _SC_XOPEN_LEGACY: ::std::os::raw::c_uint = 129;
pub const _SC_XOPEN_REALTIME: ::std::os::raw::c_uint = 130;
pub const _SC_XOPEN_REALTIME_THREADS: ::std::os::raw::c_uint = 131;
pub const _SC_ADVISORY_INFO: ::std::os::raw::c_uint = 132;
pub const _SC_BARRIERS: ::std::os::raw::c_uint = 133;
pub const _SC_BASE: ::std::os::raw::c_uint = 134;
pub const _SC_C_LANG_SUPPORT: ::std::os::raw::c_uint = 135;
pub const _SC_C_LANG_SUPPORT_R: ::std::os::raw::c_uint = 136;
pub const _SC_CLOCK_SELECTION: ::std::os::raw::c_uint = 137;
pub const _SC_CPUTIME: ::std::os::raw::c_uint = 138;
pub const _SC_THREAD_CPUTIME: ::std::os::raw::c_uint = 139;
pub const _SC_DEVICE_IO: ::std::os::raw::c_uint = 140;
pub const _SC_DEVICE_SPECIFIC: ::std::os::raw::c_uint = 141;
pub const _SC_DEVICE_SPECIFIC_R: ::std::os::raw::c_uint = 142;
pub const _SC_FD_MGMT: ::std::os::raw::c_uint = 143;
pub const _SC_FIFO: ::std::os::raw::c_uint = 144;
pub const _SC_PIPE: ::std::os::raw::c_uint = 145;
pub const _SC_FILE_ATTRIBUTES: ::std::os::raw::c_uint = 146;
pub const _SC_FILE_LOCKING: ::std::os::raw::c_uint = 147;
pub const _SC_FILE_SYSTEM: ::std::os::raw::c_uint = 148;
pub const _SC_MONOTONIC_CLOCK: ::std::os::raw::c_uint = 149;
pub const _SC_MULTI_PROCESS: ::std::os::raw::c_uint = 150;
pub const _SC_SINGLE_PROCESS: ::std::os::raw::c_uint = 151;
pub const _SC_NETWORKING: ::std::os::raw::c_uint = 152;
pub const _SC_READER_WRITER_LOCKS: ::std::os::raw::c_uint = 153;
pub const _SC_SPIN_LOCKS: ::std::os::raw::c_uint = 154;
pub const _SC_REGEXP: ::std::os::raw::c_uint = 155;
pub const _SC_REGEX_VERSION: ::std::os::raw::c_uint = 156;
pub const _SC_SHELL: ::std::os::raw::c_uint = 157;
pub const _SC_SIGNALS: ::std::os::raw::c_uint = 158;
pub const _SC_SPAWN: ::std::os::raw::c_uint = 159;
pub const _SC_SPORADIC_SERVER: ::std::os::raw::c_uint = 160;
pub const _SC_THREAD_SPORADIC_SERVER: ::std::os::raw::c_uint = 161;
pub const _SC_SYSTEM_DATABASE: ::std::os::raw::c_uint = 162;
pub const _SC_SYSTEM_DATABASE_R: ::std::os::raw::c_uint = 163;
pub const _SC_TIMEOUTS: ::std::os::raw::c_uint = 164;
pub const _SC_TYPED_MEMORY_OBJECTS: ::std::os::raw::c_uint = 165;
pub const _SC_USER_GROUPS: ::std::os::raw::c_uint = 166;
pub const _SC_USER_GROUPS_R: ::std::os::raw::c_uint = 167;
pub const _SC_2_PBS: ::std::os::raw::c_uint = 168;
pub const _SC_2_PBS_ACCOUNTING: ::std::os::raw::c_uint = 169;
pub const _SC_2_PBS_LOCATE: ::std::os::raw::c_uint = 170;
pub const _SC_2_PBS_MESSAGE: ::std::os::raw::c_uint = 171;
pub const _SC_2_PBS_TRACK: ::std::os::raw::c_uint = 172;
pub const _SC_SYMLOOP_MAX: ::std::os::raw::c_uint = 173;
pub const _SC_STREAMS: ::std::os::raw::c_uint = 174;
pub const _SC_2_PBS_CHECKPOINT: ::std::os::raw::c_uint = 175;
pub const _SC_V6_ILP32_OFF32: ::std::os::raw::c_uint = 176;
pub const _SC_V6_ILP32_OFFBIG: ::std::os::raw::c_uint = 177;
pub const _SC_V6_LP64_OFF64: ::std::os::raw::c_uint = 178;
pub const _SC_V6_LPBIG_OFFBIG: ::std::os::raw::c_uint = 179;
pub const _SC_HOST_NAME_MAX: ::std::os::raw::c_uint = 180;
pub const _SC_TRACE: ::std::os::raw::c_uint = 181;
pub const _SC_TRACE_EVENT_FILTER: ::std::os::raw::c_uint = 182;
pub const _SC_TRACE_INHERIT: ::std::os::raw::c_uint = 183;
pub const _SC_TRACE_LOG: ::std::os::raw::c_uint = 184;
pub const _SC_LEVEL1_ICACHE_SIZE: ::std::os::raw::c_uint = 185;
pub const _SC_LEVEL1_ICACHE_ASSOC: ::std::os::raw::c_uint = 186;
pub const _SC_LEVEL1_ICACHE_LINESIZE: ::std::os::raw::c_uint = 187;
pub const _SC_LEVEL1_DCACHE_SIZE: ::std::os::raw::c_uint = 188;
pub const _SC_LEVEL1_DCACHE_ASSOC: ::std::os::raw::c_uint = 189;
pub const _SC_LEVEL1_DCACHE_LINESIZE: ::std::os::raw::c_uint = 190;
pub const _SC_LEVEL2_CACHE_SIZE: ::std::os::raw::c_uint = 191;
pub const _SC_LEVEL2_CACHE_ASSOC: ::std::os::raw::c_uint = 192;
pub const _SC_LEVEL2_CACHE_LINESIZE: ::std::os::raw::c_uint = 193;
pub const _SC_LEVEL3_CACHE_SIZE: ::std::os::raw::c_uint = 194;
pub const _SC_LEVEL3_CACHE_ASSOC: ::std::os::raw::c_uint = 195;
pub const _SC_LEVEL3_CACHE_LINESIZE: ::std::os::raw::c_uint = 196;
pub const _SC_LEVEL4_CACHE_SIZE: ::std::os::raw::c_uint = 197;
pub const _SC_LEVEL4_CACHE_ASSOC: ::std::os::raw::c_uint = 198;
pub const _SC_LEVEL4_CACHE_LINESIZE: ::std::os::raw::c_uint = 199;
pub const _SC_IPV6: ::std::os::raw::c_uint = 235;
pub const _SC_RAW_SOCKETS: ::std::os::raw::c_uint = 236;
pub const _SC_V7_ILP32_OFF32: ::std::os::raw::c_uint = 237;
pub const _SC_V7_ILP32_OFFBIG: ::std::os::raw::c_uint = 238;
pub const _SC_V7_LP64_OFF64: ::std::os::raw::c_uint = 239;
pub const _SC_V7_LPBIG_OFFBIG: ::std::os::raw::c_uint = 240;
pub const _SC_SS_REPL_MAX: ::std::os::raw::c_uint = 241;
pub const _SC_TRACE_EVENT_NAME_MAX: ::std::os::raw::c_uint = 242;
pub const _SC_TRACE_NAME_MAX: ::std::os::raw::c_uint = 243;
pub const _SC_TRACE_SYS_MAX: ::std::os::raw::c_uint = 244;
pub const _SC_TRACE_USER_EVENT_MAX: ::std::os::raw::c_uint = 245;
pub const _SC_XOPEN_STREAMS: ::std::os::raw::c_uint = 246;
pub const _SC_THREAD_ROBUST_PRIO_INHERIT: ::std::os::raw::c_uint = 247;
pub const _SC_THREAD_ROBUST_PRIO_PROTECT: ::std::os::raw::c_uint = 248;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
pub const _CS_PATH: ::std::os::raw::c_uint = 0;
pub const _CS_V6_WIDTH_RESTRICTED_ENVS: ::std::os::raw::c_uint = 1;
pub const _CS_GNU_LIBC_VERSION: ::std::os::raw::c_uint = 2;
pub const _CS_GNU_LIBPTHREAD_VERSION: ::std::os::raw::c_uint = 3;
pub const _CS_V5_WIDTH_RESTRICTED_ENVS: ::std::os::raw::c_uint = 4;
pub const _CS_V7_WIDTH_RESTRICTED_ENVS: ::std::os::raw::c_uint = 5;
pub const _CS_LFS_CFLAGS: ::std::os::raw::c_uint = 1000;
pub const _CS_LFS_LDFLAGS: ::std::os::raw::c_uint = 1001;
pub const _CS_LFS_LIBS: ::std::os::raw::c_uint = 1002;
pub const _CS_LFS_LINTFLAGS: ::std::os::raw::c_uint = 1003;
pub const _CS_LFS64_CFLAGS: ::std::os::raw::c_uint = 1004;
pub const _CS_LFS64_LDFLAGS: ::std::os::raw::c_uint = 1005;
pub const _CS_LFS64_LIBS: ::std::os::raw::c_uint = 1006;
pub const _CS_LFS64_LINTFLAGS: ::std::os::raw::c_uint = 1007;
pub const _CS_XBS5_ILP32_OFF32_CFLAGS: ::std::os::raw::c_uint = 1100;
pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: ::std::os::raw::c_uint = 1101;
pub const _CS_XBS5_ILP32_OFF32_LIBS: ::std::os::raw::c_uint = 1102;
pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: ::std::os::raw::c_uint = 1103;
pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: ::std::os::raw::c_uint = 1104;
pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: ::std::os::raw::c_uint = 1105;
pub const _CS_XBS5_ILP32_OFFBIG_LIBS: ::std::os::raw::c_uint = 1106;
pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: ::std::os::raw::c_uint = 1107;
pub const _CS_XBS5_LP64_OFF64_CFLAGS: ::std::os::raw::c_uint = 1108;
pub const _CS_XBS5_LP64_OFF64_LDFLAGS: ::std::os::raw::c_uint = 1109;
pub const _CS_XBS5_LP64_OFF64_LIBS: ::std::os::raw::c_uint = 1110;
pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: ::std::os::raw::c_uint = 1111;
pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: ::std::os::raw::c_uint = 1112;
pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: ::std::os::raw::c_uint = 1113;
pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: ::std::os::raw::c_uint = 1114;
pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: ::std::os::raw::c_uint = 1115;
pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: ::std::os::raw::c_uint = 1116;
pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: ::std::os::raw::c_uint = 1117;
pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: ::std::os::raw::c_uint = 1118;
pub const _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS: ::std::os::raw::c_uint = 1119;
pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: ::std::os::raw::c_uint = 1120;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: ::std::os::raw::c_uint = 1121;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: ::std::os::raw::c_uint = 1122;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS: ::std::os::raw::c_uint = 1123;
pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: ::std::os::raw::c_uint = 1124;
pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: ::std::os::raw::c_uint = 1125;
pub const _CS_POSIX_V6_LP64_OFF64_LIBS: ::std::os::raw::c_uint = 1126;
pub const _CS_POSIX_V6_LP64_OFF64_LINTFLAGS: ::std::os::raw::c_uint = 1127;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: ::std::os::raw::c_uint = 1128;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: ::std::os::raw::c_uint = 1129;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: ::std::os::raw::c_uint = 1130;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS: ::std::os::raw::c_uint = 1131;
pub const _CS_POSIX_V7_ILP32_OFF32_CFLAGS: ::std::os::raw::c_uint = 1132;
pub const _CS_POSIX_V7_ILP32_OFF32_LDFLAGS: ::std::os::raw::c_uint = 1133;
pub const _CS_POSIX_V7_ILP32_OFF32_LIBS: ::std::os::raw::c_uint = 1134;
pub const _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS: ::std::os::raw::c_uint = 1135;
pub const _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS: ::std::os::raw::c_uint = 1136;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS: ::std::os::raw::c_uint = 1137;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LIBS: ::std::os::raw::c_uint = 1138;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS: ::std::os::raw::c_uint = 1139;
pub const _CS_POSIX_V7_LP64_OFF64_CFLAGS: ::std::os::raw::c_uint = 1140;
pub const _CS_POSIX_V7_LP64_OFF64_LDFLAGS: ::std::os::raw::c_uint = 1141;
pub const _CS_POSIX_V7_LP64_OFF64_LIBS: ::std::os::raw::c_uint = 1142;
pub const _CS_POSIX_V7_LP64_OFF64_LINTFLAGS: ::std::os::raw::c_uint = 1143;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS: ::std::os::raw::c_uint = 1144;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS: ::std::os::raw::c_uint = 1145;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LIBS: ::std::os::raw::c_uint = 1146;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS: ::std::os::raw::c_uint = 1147;
pub const _CS_V6_ENV: ::std::os::raw::c_uint = 1148;
pub const _CS_V7_ENV: ::std::os::raw::c_uint = 1149;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
extern "C" {
    pub fn pathconf(
        __path: *const ::std::os::raw::c_char,
        __name: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn fpathconf(
        __fd: ::std::os::raw::c_int,
        __name: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sysconf(__name: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn confstr(
        __name: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn getpid() -> __pid_t;
}
extern "C" {
    pub fn getppid() -> __pid_t;
}
extern "C" {
    pub fn getpgrp() -> __pid_t;
}
extern "C" {
    pub fn __getpgid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn getpgid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn setpgid(__pid: __pid_t, __pgid: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpgrp() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsid() -> __pid_t;
}
extern "C" {
    pub fn getsid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn getuid() -> __uid_t;
}
extern "C" {
    pub fn geteuid() -> __uid_t;
}
extern "C" {
    pub fn getgid() -> __gid_t;
}
extern "C" {
    pub fn getegid() -> __gid_t;
}
extern "C" {
    pub fn getgroups(__size: ::std::os::raw::c_int, __list: *mut __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setuid(__uid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setreuid(__ruid: __uid_t, __euid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seteuid(__uid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setgid(__gid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setregid(__rgid: __gid_t, __egid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setegid(__gid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fork() -> __pid_t;
}
extern "C" {
    pub fn vfork() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyname(__fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ttyname_r(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isatty(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyslot() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn link(
        __from: *const ::std::os::raw::c_char,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn linkat(
        __fromfd: ::std::os::raw::c_int,
        __from: *const ::std::os::raw::c_char,
        __tofd: ::std::os::raw::c_int,
        __to: *const ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symlink(
        __from: *const ::std::os::raw::c_char,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlink(
        __path: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn symlinkat(
        __from: *const ::std::os::raw::c_char,
        __tofd: ::std::os::raw::c_int,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlinkat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn unlink(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlinkat(
        __fd: ::std::os::raw::c_int,
        __name: *const ::std::os::raw::c_char,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rmdir(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcgetpgrp(__fd: ::std::os::raw::c_int) -> __pid_t;
}
extern "C" {
    pub fn tcsetpgrp(__fd: ::std::os::raw::c_int, __pgrp_id: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getlogin() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getlogin_r(
        __name: *mut ::std::os::raw::c_char,
        __name_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setlogin(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut optind: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut opterr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optopt: ::std::os::raw::c_int;
}
extern "C" {
    pub fn getopt(
        ___argc: ::std::os::raw::c_int,
        ___argv: *const *mut ::std::os::raw::c_char,
        __shortopts: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostname(__name: *mut ::std::os::raw::c_char, __len: size_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sethostname(
        __name: *const ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sethostid(__id: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdomainname(
        __name: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setdomainname(
        __name: *const ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vhangup() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn revoke(__file: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn profil(
        __sample_buffer: *mut ::std::os::raw::c_ushort,
        __size: size_t,
        __offset: size_t,
        __scale: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acct(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getusershell() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn endusershell();
}
extern "C" {
    pub fn setusershell();
}
extern "C" {
    pub fn daemon(
        __nochdir: ::std::os::raw::c_int,
        __noclose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chroot(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpass(__prompt: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fsync(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostid() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sync();
}
extern "C" {
    pub fn getpagesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdtablesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn truncate(
        __file: *const ::std::os::raw::c_char,
        __length: __off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftruncate(__fd: ::std::os::raw::c_int, __length: __off_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn brk(__addr: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sbrk(__delta: isize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn syscall(__sysno: ::std::os::raw::c_long, ...) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lockf(
        __fd: ::std::os::raw::c_int,
        __cmd: ::std::os::raw::c_int,
        __len: __off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fdatasync(__fildes: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getentropy(
        __buffer: *mut ::std::os::raw::c_void,
        __length: size_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct flock {
    pub l_type: ::std::os::raw::c_short,
    pub l_whence: ::std::os::raw::c_short,
    pub l_start: __off_t,
    pub l_len: __off_t,
    pub l_pid: __pid_t,
}
#[test]
fn bindgen_test_layout_flock() {
    assert_eq!(
        ::std::mem::size_of::<flock>(),
        32usize,
        concat!("Size of: ", stringify!(flock))
    );
    assert_eq!(
        ::std::mem::align_of::<flock>(),
        8usize,
        concat!("Alignment of ", stringify!(flock))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flock>())).l_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flock>())).l_whence as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_whence)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flock>())).l_start as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flock>())).l_len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flock>())).l_pid as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_pid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct stat {
    pub st_dev: __dev_t,
    pub st_ino: __ino_t,
    pub st_nlink: __nlink_t,
    pub st_mode: __mode_t,
    pub st_uid: __uid_t,
    pub st_gid: __gid_t,
    pub __pad0: ::std::os::raw::c_int,
    pub st_rdev: __dev_t,
    pub st_size: __off_t,
    pub st_blksize: __blksize_t,
    pub st_blocks: __blkcnt_t,
    pub st_atim: timespec,
    pub st_mtim: timespec,
    pub st_ctim: timespec,
    pub __glibc_reserved: [__syscall_slong_t; 3usize],
}
#[test]
fn bindgen_test_layout_stat() {
    assert_eq!(
        ::std::mem::size_of::<stat>(),
        144usize,
        concat!("Size of: ", stringify!(stat))
    );
    assert_eq!(
        ::std::mem::align_of::<stat>(),
        8usize,
        concat!("Alignment of ", stringify!(stat))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_dev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_ino as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ino)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_nlink as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_nlink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_mode as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_uid as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_gid as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_gid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).__pad0 as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(__pad0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_rdev as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_rdev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_size as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_blksize as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blksize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_blocks as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blocks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_atim as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_atim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_mtim as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mtim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_ctim as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ctim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).__glibc_reserved as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(__glibc_reserved)
        )
    );
}
extern "C" {
    pub fn fcntl(
        __fd: ::std::os::raw::c_int,
        __cmd: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn open(
        __file: *const ::std::os::raw::c_char,
        __oflag: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __oflag: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn creat(__file: *const ::std::os::raw::c_char, __mode: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_fadvise(
        __fd: ::std::os::raw::c_int,
        __offset: off_t,
        __len: off_t,
        __advise: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_fallocate(
        __fd: ::std::os::raw::c_int,
        __offset: off_t,
        __len: off_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iovec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: size_t,
}
#[test]
fn bindgen_test_layout_iovec() {
    assert_eq!(
        ::std::mem::size_of::<iovec>(),
        16usize,
        concat!("Size of: ", stringify!(iovec))
    );
    assert_eq!(
        ::std::mem::align_of::<iovec>(),
        8usize,
        concat!("Alignment of ", stringify!(iovec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iovec>())).iov_base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iovec>())).iov_len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_len)
        )
    );
}
impl Default for iovec {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const __socket_type_SOCK_STREAM: __socket_type = 1;
pub const __socket_type_SOCK_DGRAM: __socket_type = 2;
pub const __socket_type_SOCK_RAW: __socket_type = 3;
pub const __socket_type_SOCK_RDM: __socket_type = 4;
pub const __socket_type_SOCK_SEQPACKET: __socket_type = 5;
pub const __socket_type_SOCK_DCCP: __socket_type = 6;
pub const __socket_type_SOCK_PACKET: __socket_type = 10;
pub const __socket_type_SOCK_CLOEXEC: __socket_type = 524288;
pub const __socket_type_SOCK_NONBLOCK: __socket_type = 2048;
pub type __socket_type = ::std::os::raw::c_uint;
pub type sa_family_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sockaddr {
    pub sa_family: sa_family_t,
    pub sa_data: [::std::os::raw::c_char; 14usize],
}
#[test]
fn bindgen_test_layout_sockaddr() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr>(),
        16usize,
        concat!("Size of: ", stringify!(sockaddr))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr>(),
        2usize,
        concat!("Alignment of ", stringify!(sockaddr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr>())).sa_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr>())).sa_data as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_data)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sockaddr_storage {
    pub ss_family: sa_family_t,
    pub __ss_padding: [::std::os::raw::c_char; 118usize],
    pub __ss_align: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_sockaddr_storage() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr_storage>(),
        128usize,
        concat!("Size of: ", stringify!(sockaddr_storage))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_storage>(),
        8usize,
        concat!("Alignment of ", stringify!(sockaddr_storage))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_storage>())).ss_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(ss_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_storage>())).__ss_padding as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(__ss_padding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_storage>())).__ss_align as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(__ss_align)
        )
    );
}
impl Default for sockaddr_storage {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const MSG_OOB: ::std::os::raw::c_uint = 1;
pub const MSG_PEEK: ::std::os::raw::c_uint = 2;
pub const MSG_DONTROUTE: ::std::os::raw::c_uint = 4;
pub const MSG_CTRUNC: ::std::os::raw::c_uint = 8;
pub const MSG_PROXY: ::std::os::raw::c_uint = 16;
pub const MSG_TRUNC: ::std::os::raw::c_uint = 32;
pub const MSG_DONTWAIT: ::std::os::raw::c_uint = 64;
pub const MSG_EOR: ::std::os::raw::c_uint = 128;
pub const MSG_WAITALL: ::std::os::raw::c_uint = 256;
pub const MSG_FIN: ::std::os::raw::c_uint = 512;
pub const MSG_SYN: ::std::os::raw::c_uint = 1024;
pub const MSG_CONFIRM: ::std::os::raw::c_uint = 2048;
pub const MSG_RST: ::std::os::raw::c_uint = 4096;
pub const MSG_ERRQUEUE: ::std::os::raw::c_uint = 8192;
pub const MSG_NOSIGNAL: ::std::os::raw::c_uint = 16384;
pub const MSG_MORE: ::std::os::raw::c_uint = 32768;
pub const MSG_WAITFORONE: ::std::os::raw::c_uint = 65536;
pub const MSG_BATCH: ::std::os::raw::c_uint = 262144;
pub const MSG_ZEROCOPY: ::std::os::raw::c_uint = 67108864;
pub const MSG_FASTOPEN: ::std::os::raw::c_uint = 536870912;
pub const MSG_CMSG_CLOEXEC: ::std::os::raw::c_uint = 1073741824;
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msghdr {
    pub msg_name: *mut ::std::os::raw::c_void,
    pub msg_namelen: socklen_t,
    pub msg_iov: *mut iovec,
    pub msg_iovlen: size_t,
    pub msg_control: *mut ::std::os::raw::c_void,
    pub msg_controllen: size_t,
    pub msg_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_msghdr() {
    assert_eq!(
        ::std::mem::size_of::<msghdr>(),
        56usize,
        concat!("Size of: ", stringify!(msghdr))
    );
    assert_eq!(
        ::std::mem::align_of::<msghdr>(),
        8usize,
        concat!("Alignment of ", stringify!(msghdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_namelen as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_namelen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_iov as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_iov)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_iovlen as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_iovlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_control as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_control)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_controllen as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_controllen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_flags)
        )
    );
}
impl Default for msghdr {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct cmsghdr {
    pub cmsg_len: size_t,
    pub cmsg_level: ::std::os::raw::c_int,
    pub cmsg_type: ::std::os::raw::c_int,
    pub __cmsg_data: __IncompleteArrayField<::std::os::raw::c_uchar>,
}
#[test]
fn bindgen_test_layout_cmsghdr() {
    assert_eq!(
        ::std::mem::size_of::<cmsghdr>(),
        16usize,
        concat!("Size of: ", stringify!(cmsghdr))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsghdr>(),
        8usize,
        concat!("Alignment of ", stringify!(cmsghdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsghdr>())).cmsg_len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(cmsg_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsghdr>())).cmsg_level as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(cmsg_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsghdr>())).cmsg_type as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(cmsg_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsghdr>())).__cmsg_data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(__cmsg_data)
        )
    );
}
extern "C" {
    pub fn __cmsg_nxthdr(__mhdr: *mut msghdr, __cmsg: *mut cmsghdr) -> *mut cmsghdr;
}
pub const SCM_RIGHTS: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_5 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct linger {
    pub l_onoff: ::std::os::raw::c_int,
    pub l_linger: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_linger() {
    assert_eq!(
        ::std::mem::size_of::<linger>(),
        8usize,
        concat!("Size of: ", stringify!(linger))
    );
    assert_eq!(
        ::std::mem::align_of::<linger>(),
        4usize,
        concat!("Alignment of ", stringify!(linger))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<linger>())).l_onoff as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linger),
            "::",
            stringify!(l_onoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<linger>())).l_linger as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(linger),
            "::",
            stringify!(l_linger)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct osockaddr {
    pub sa_family: ::std::os::raw::c_ushort,
    pub sa_data: [::std::os::raw::c_uchar; 14usize],
}
#[test]
fn bindgen_test_layout_osockaddr() {
    assert_eq!(
        ::std::mem::size_of::<osockaddr>(),
        16usize,
        concat!("Size of: ", stringify!(osockaddr))
    );
    assert_eq!(
        ::std::mem::align_of::<osockaddr>(),
        2usize,
        concat!("Alignment of ", stringify!(osockaddr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<osockaddr>())).sa_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(osockaddr),
            "::",
            stringify!(sa_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<osockaddr>())).sa_data as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(osockaddr),
            "::",
            stringify!(sa_data)
        )
    );
}
pub const SHUT_RD: ::std::os::raw::c_uint = 0;
pub const SHUT_WR: ::std::os::raw::c_uint = 1;
pub const SHUT_RDWR: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_6 = ::std::os::raw::c_uint;
extern "C" {
    pub fn socket(
        __domain: ::std::os::raw::c_int,
        __type: ::std::os::raw::c_int,
        __protocol: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn socketpair(
        __domain: ::std::os::raw::c_int,
        __type: ::std::os::raw::c_int,
        __protocol: ::std::os::raw::c_int,
        __fds: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bind(
        __fd: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __len: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsockname(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn connect(
        __fd: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __len: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpeername(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn send(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: size_t,
        __flags: ::std::os::raw::c_int,
    ) -> ssize_t;
}
extern "C" {
    pub fn recv(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __n: size_t,
        __flags: ::std::os::raw::c_int,
    ) -> ssize_t;
}
extern "C" {
    pub fn sendto(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: size_t,
        __flags: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __addr_len: socklen_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn recvfrom(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __n: size_t,
        __flags: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __addr_len: *mut socklen_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn sendmsg(
        __fd: ::std::os::raw::c_int,
        __message: *const msghdr,
        __flags: ::std::os::raw::c_int,
    ) -> ssize_t;
}
extern "C" {
    pub fn recvmsg(
        __fd: ::std::os::raw::c_int,
        __message: *mut msghdr,
        __flags: ::std::os::raw::c_int,
    ) -> ssize_t;
}
extern "C" {
    pub fn getsockopt(
        __fd: ::std::os::raw::c_int,
        __level: ::std::os::raw::c_int,
        __optname: ::std::os::raw::c_int,
        __optval: *mut ::std::os::raw::c_void,
        __optlen: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsockopt(
        __fd: ::std::os::raw::c_int,
        __level: ::std::os::raw::c_int,
        __optname: ::std::os::raw::c_int,
        __optval: *const ::std::os::raw::c_void,
        __optlen: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn listen(__fd: ::std::os::raw::c_int, __n: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn accept(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __addr_len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shutdown(
        __fd: ::std::os::raw::c_int,
        __how: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sockatmark(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isfdtype(
        __fd: ::std::os::raw::c_int,
        __fdtype: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type in_addr_t = u32;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct in_addr {
    pub s_addr: in_addr_t,
}
#[test]
fn bindgen_test_layout_in_addr() {
    assert_eq!(
        ::std::mem::size_of::<in_addr>(),
        4usize,
        concat!("Size of: ", stringify!(in_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<in_addr>(),
        4usize,
        concat!("Alignment of ", stringify!(in_addr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<in_addr>())).s_addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in_addr),
            "::",
            stringify!(s_addr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ip_opts {
    pub ip_dst: in_addr,
    pub ip_opts: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout_ip_opts() {
    assert_eq!(
        ::std::mem::size_of::<ip_opts>(),
        44usize,
        concat!("Size of: ", stringify!(ip_opts))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_opts>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_opts))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_opts>())).ip_dst as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_opts),
            "::",
            stringify!(ip_dst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_opts>())).ip_opts as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_opts),
            "::",
            stringify!(ip_opts)
        )
    );
}
impl Default for ip_opts {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ip_mreqn {
    pub imr_multiaddr: in_addr,
    pub imr_address: in_addr,
    pub imr_ifindex: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ip_mreqn() {
    assert_eq!(
        ::std::mem::size_of::<ip_mreqn>(),
        12usize,
        concat!("Size of: ", stringify!(ip_mreqn))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_mreqn>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_mreqn))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreqn>())).imr_multiaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreqn),
            "::",
            stringify!(imr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreqn>())).imr_address as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreqn),
            "::",
            stringify!(imr_address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreqn>())).imr_ifindex as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreqn),
            "::",
            stringify!(imr_ifindex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct in_pktinfo {
    pub ipi_ifindex: ::std::os::raw::c_int,
    pub ipi_spec_dst: in_addr,
    pub ipi_addr: in_addr,
}
#[test]
fn bindgen_test_layout_in_pktinfo() {
    assert_eq!(
        ::std::mem::size_of::<in_pktinfo>(),
        12usize,
        concat!("Size of: ", stringify!(in_pktinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<in_pktinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(in_pktinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<in_pktinfo>())).ipi_ifindex as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in_pktinfo),
            "::",
            stringify!(ipi_ifindex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<in_pktinfo>())).ipi_spec_dst as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(in_pktinfo),
            "::",
            stringify!(ipi_spec_dst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<in_pktinfo>())).ipi_addr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(in_pktinfo),
            "::",
            stringify!(ipi_addr)
        )
    );
}
pub const IPPROTO_IP: ::std::os::raw::c_uint = 0;
pub const IPPROTO_ICMP: ::std::os::raw::c_uint = 1;
pub const IPPROTO_IGMP: ::std::os::raw::c_uint = 2;
pub const IPPROTO_IPIP: ::std::os::raw::c_uint = 4;
pub const IPPROTO_TCP: ::std::os::raw::c_uint = 6;
pub const IPPROTO_EGP: ::std::os::raw::c_uint = 8;
pub const IPPROTO_PUP: ::std::os::raw::c_uint = 12;
pub const IPPROTO_UDP: ::std::os::raw::c_uint = 17;
pub const IPPROTO_IDP: ::std::os::raw::c_uint = 22;
pub const IPPROTO_TP: ::std::os::raw::c_uint = 29;
pub const IPPROTO_DCCP: ::std::os::raw::c_uint = 33;
pub const IPPROTO_IPV6: ::std::os::raw::c_uint = 41;
pub const IPPROTO_RSVP: ::std::os::raw::c_uint = 46;
pub const IPPROTO_GRE: ::std::os::raw::c_uint = 47;
pub const IPPROTO_ESP: ::std::os::raw::c_uint = 50;
pub const IPPROTO_AH: ::std::os::raw::c_uint = 51;
pub const IPPROTO_MTP: ::std::os::raw::c_uint = 92;
pub const IPPROTO_BEETPH: ::std::os::raw::c_uint = 94;
pub const IPPROTO_ENCAP: ::std::os::raw::c_uint = 98;
pub const IPPROTO_PIM: ::std::os::raw::c_uint = 103;
pub const IPPROTO_COMP: ::std::os::raw::c_uint = 108;
pub const IPPROTO_SCTP: ::std::os::raw::c_uint = 132;
pub const IPPROTO_UDPLITE: ::std::os::raw::c_uint = 136;
pub const IPPROTO_MPLS: ::std::os::raw::c_uint = 137;
pub const IPPROTO_RAW: ::std::os::raw::c_uint = 255;
pub const IPPROTO_MAX: ::std::os::raw::c_uint = 256;
pub type _bindgen_ty_7 = ::std::os::raw::c_uint;
pub const IPPROTO_HOPOPTS: ::std::os::raw::c_uint = 0;
pub const IPPROTO_ROUTING: ::std::os::raw::c_uint = 43;
pub const IPPROTO_FRAGMENT: ::std::os::raw::c_uint = 44;
pub const IPPROTO_ICMPV6: ::std::os::raw::c_uint = 58;
pub const IPPROTO_NONE: ::std::os::raw::c_uint = 59;
pub const IPPROTO_DSTOPTS: ::std::os::raw::c_uint = 60;
pub const IPPROTO_MH: ::std::os::raw::c_uint = 135;
pub type _bindgen_ty_8 = ::std::os::raw::c_uint;
pub type in_port_t = u16;
pub const IPPORT_ECHO: ::std::os::raw::c_uint = 7;
pub const IPPORT_DISCARD: ::std::os::raw::c_uint = 9;
pub const IPPORT_SYSTAT: ::std::os::raw::c_uint = 11;
pub const IPPORT_DAYTIME: ::std::os::raw::c_uint = 13;
pub const IPPORT_NETSTAT: ::std::os::raw::c_uint = 15;
pub const IPPORT_FTP: ::std::os::raw::c_uint = 21;
pub const IPPORT_TELNET: ::std::os::raw::c_uint = 23;
pub const IPPORT_SMTP: ::std::os::raw::c_uint = 25;
pub const IPPORT_TIMESERVER: ::std::os::raw::c_uint = 37;
pub const IPPORT_NAMESERVER: ::std::os::raw::c_uint = 42;
pub const IPPORT_WHOIS: ::std::os::raw::c_uint = 43;
pub const IPPORT_MTP: ::std::os::raw::c_uint = 57;
pub const IPPORT_TFTP: ::std::os::raw::c_uint = 69;
pub const IPPORT_RJE: ::std::os::raw::c_uint = 77;
pub const IPPORT_FINGER: ::std::os::raw::c_uint = 79;
pub const IPPORT_TTYLINK: ::std::os::raw::c_uint = 87;
pub const IPPORT_SUPDUP: ::std::os::raw::c_uint = 95;
pub const IPPORT_EXECSERVER: ::std::os::raw::c_uint = 512;
pub const IPPORT_LOGINSERVER: ::std::os::raw::c_uint = 513;
pub const IPPORT_CMDSERVER: ::std::os::raw::c_uint = 514;
pub const IPPORT_EFSSERVER: ::std::os::raw::c_uint = 520;
pub const IPPORT_BIFFUDP: ::std::os::raw::c_uint = 512;
pub const IPPORT_WHOSERVER: ::std::os::raw::c_uint = 513;
pub const IPPORT_ROUTESERVER: ::std::os::raw::c_uint = 520;
pub const IPPORT_RESERVED: ::std::os::raw::c_uint = 1024;
pub const IPPORT_USERRESERVED: ::std::os::raw::c_uint = 5000;
pub type _bindgen_ty_9 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_addr {
    pub __in6_u: in6_addr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union in6_addr__bindgen_ty_1 {
    pub __u6_addr8: [u8; 16usize],
    pub __u6_addr16: [u16; 8usize],
    pub __u6_addr32: [u32; 4usize],
    _bindgen_union_align: [u32; 4usize],
}
#[test]
fn bindgen_test_layout_in6_addr__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<in6_addr__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(in6_addr__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<in6_addr__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(in6_addr__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<in6_addr__bindgen_ty_1>())).__u6_addr8 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<in6_addr__bindgen_ty_1>())).__u6_addr16 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr16)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<in6_addr__bindgen_ty_1>())).__u6_addr32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr32)
        )
    );
}
impl Default for in6_addr__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout_in6_addr() {
    assert_eq!(
        ::std::mem::size_of::<in6_addr>(),
        16usize,
        concat!("Size of: ", stringify!(in6_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<in6_addr>(),
        4usize,
        concat!("Alignment of ", stringify!(in6_addr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<in6_addr>())).__in6_u as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr),
            "::",
            stringify!(__in6_u)
        )
    );
}
impl Default for in6_addr {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub static in6addr_any: in6_addr;
}
extern "C" {
    pub static in6addr_loopback: in6_addr;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sockaddr_in {
    pub sin_family: sa_family_t,
    pub sin_port: in_port_t,
    pub sin_addr: in_addr,
    pub sin_zero: [::std::os::raw::c_uchar; 8usize],
}
#[test]
fn bindgen_test_layout_sockaddr_in() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr_in>(),
        16usize,
        concat!("Size of: ", stringify!(sockaddr_in))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_in>(),
        4usize,
        concat!("Alignment of ", stringify!(sockaddr_in))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_port as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_addr as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_zero as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_zero)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sockaddr_in6 {
    pub sin6_family: sa_family_t,
    pub sin6_port: in_port_t,
    pub sin6_flowinfo: u32,
    pub sin6_addr: in6_addr,
    pub sin6_scope_id: u32,
}
#[test]
fn bindgen_test_layout_sockaddr_in6() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr_in6>(),
        28usize,
        concat!("Size of: ", stringify!(sockaddr_in6))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_in6>(),
        4usize,
        concat!("Alignment of ", stringify!(sockaddr_in6))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_port as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_flowinfo as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_flowinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_addr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_scope_id as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_scope_id)
        )
    );
}
impl Default for sockaddr_in6 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ip_mreq {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
}
#[test]
fn bindgen_test_layout_ip_mreq() {
    assert_eq!(
        ::std::mem::size_of::<ip_mreq>(),
        8usize,
        concat!("Size of: ", stringify!(ip_mreq))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_mreq>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_mreq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreq>())).imr_multiaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq),
            "::",
            stringify!(imr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreq>())).imr_interface as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq),
            "::",
            stringify!(imr_interface)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ip_mreq_source {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
    pub imr_sourceaddr: in_addr,
}
#[test]
fn bindgen_test_layout_ip_mreq_source() {
    assert_eq!(
        ::std::mem::size_of::<ip_mreq_source>(),
        12usize,
        concat!("Size of: ", stringify!(ip_mreq_source))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_mreq_source>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_mreq_source))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreq_source>())).imr_multiaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq_source),
            "::",
            stringify!(imr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreq_source>())).imr_interface as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq_source),
            "::",
            stringify!(imr_interface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreq_source>())).imr_sourceaddr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq_source),
            "::",
            stringify!(imr_sourceaddr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ipv6_mreq {
    pub ipv6mr_multiaddr: in6_addr,
    pub ipv6mr_interface: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_ipv6_mreq() {
    assert_eq!(
        ::std::mem::size_of::<ipv6_mreq>(),
        20usize,
        concat!("Size of: ", stringify!(ipv6_mreq))
    );
    assert_eq!(
        ::std::mem::align_of::<ipv6_mreq>(),
        4usize,
        concat!("Alignment of ", stringify!(ipv6_mreq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ipv6_mreq>())).ipv6mr_multiaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipv6_mreq),
            "::",
            stringify!(ipv6mr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ipv6_mreq>())).ipv6mr_interface as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ipv6_mreq),
            "::",
            stringify!(ipv6mr_interface)
        )
    );
}
impl Default for ipv6_mreq {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct group_req {
    pub gr_interface: u32,
    pub gr_group: sockaddr_storage,
}
#[test]
fn bindgen_test_layout_group_req() {
    assert_eq!(
        ::std::mem::size_of::<group_req>(),
        136usize,
        concat!("Size of: ", stringify!(group_req))
    );
    assert_eq!(
        ::std::mem::align_of::<group_req>(),
        8usize,
        concat!("Alignment of ", stringify!(group_req))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_req>())).gr_interface as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(group_req),
            "::",
            stringify!(gr_interface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_req>())).gr_group as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(group_req),
            "::",
            stringify!(gr_group)
        )
    );
}
impl Default for group_req {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct group_source_req {
    pub gsr_interface: u32,
    pub gsr_group: sockaddr_storage,
    pub gsr_source: sockaddr_storage,
}
#[test]
fn bindgen_test_layout_group_source_req() {
    assert_eq!(
        ::std::mem::size_of::<group_source_req>(),
        264usize,
        concat!("Size of: ", stringify!(group_source_req))
    );
    assert_eq!(
        ::std::mem::align_of::<group_source_req>(),
        8usize,
        concat!("Alignment of ", stringify!(group_source_req))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_source_req>())).gsr_interface as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(group_source_req),
            "::",
            stringify!(gsr_interface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_source_req>())).gsr_group as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(group_source_req),
            "::",
            stringify!(gsr_group)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_source_req>())).gsr_source as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(group_source_req),
            "::",
            stringify!(gsr_source)
        )
    );
}
impl Default for group_source_req {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ip_msfilter {
    pub imsf_multiaddr: in_addr,
    pub imsf_interface: in_addr,
    pub imsf_fmode: u32,
    pub imsf_numsrc: u32,
    pub imsf_slist: [in_addr; 1usize],
}
#[test]
fn bindgen_test_layout_ip_msfilter() {
    assert_eq!(
        ::std::mem::size_of::<ip_msfilter>(),
        20usize,
        concat!("Size of: ", stringify!(ip_msfilter))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_msfilter>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_msfilter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_msfilter>())).imsf_multiaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_multiaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_msfilter>())).imsf_interface as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_interface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_msfilter>())).imsf_fmode as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_fmode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_msfilter>())).imsf_numsrc as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_numsrc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_msfilter>())).imsf_slist as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_slist)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct group_filter {
    pub gf_interface: u32,
    pub gf_group: sockaddr_storage,
    pub gf_fmode: u32,
    pub gf_numsrc: u32,
    pub gf_slist: [sockaddr_storage; 1usize],
}
#[test]
fn bindgen_test_layout_group_filter() {
    assert_eq!(
        ::std::mem::size_of::<group_filter>(),
        272usize,
        concat!("Size of: ", stringify!(group_filter))
    );
    assert_eq!(
        ::std::mem::align_of::<group_filter>(),
        8usize,
        concat!("Alignment of ", stringify!(group_filter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_filter>())).gf_interface as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_interface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_filter>())).gf_group as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_group)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_filter>())).gf_fmode as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_fmode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_filter>())).gf_numsrc as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_numsrc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_filter>())).gf_slist as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_slist)
        )
    );
}
impl Default for group_filter {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn ntohl(__netlong: u32) -> u32;
}
extern "C" {
    pub fn ntohs(__netshort: u16) -> u16;
}
extern "C" {
    pub fn htonl(__hostlong: u32) -> u32;
}
extern "C" {
    pub fn htons(__hostshort: u16) -> u16;
}
extern "C" {
    pub fn bindresvport(
        __sockfd: ::std::os::raw::c_int,
        __sock_in: *mut sockaddr_in,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bindresvport6(
        __sockfd: ::std::os::raw::c_int,
        __sock_in: *mut sockaddr_in6,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet_addr(__cp: *const ::std::os::raw::c_char) -> in_addr_t;
}
extern "C" {
    pub fn inet_lnaof(__in: in_addr) -> in_addr_t;
}
extern "C" {
    pub fn inet_makeaddr(__net: in_addr_t, __host: in_addr_t) -> in_addr;
}
extern "C" {
    pub fn inet_netof(__in: in_addr) -> in_addr_t;
}
extern "C" {
    pub fn inet_network(__cp: *const ::std::os::raw::c_char) -> in_addr_t;
}
extern "C" {
    pub fn inet_ntoa(__in: in_addr) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn inet_pton(
        __af: ::std::os::raw::c_int,
        __cp: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet_ntop(
        __af: ::std::os::raw::c_int,
        __cp: *const ::std::os::raw::c_void,
        __buf: *mut ::std::os::raw::c_char,
        __len: socklen_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn inet_aton(
        __cp: *const ::std::os::raw::c_char,
        __inp: *mut in_addr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet_neta(
        __net: in_addr_t,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn inet_net_ntop(
        __af: ::std::os::raw::c_int,
        __cp: *const ::std::os::raw::c_void,
        __bits: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn inet_net_pton(
        __af: ::std::os::raw::c_int,
        __cp: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_void,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet_nsap_addr(
        __cp: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_uchar,
        __len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn inet_nsap_ntoa(
        __len: ::std::os::raw::c_int,
        __cp: *const ::std::os::raw::c_uchar,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rpcent {
    pub r_name: *mut ::std::os::raw::c_char,
    pub r_aliases: *mut *mut ::std::os::raw::c_char,
    pub r_number: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_rpcent() {
    assert_eq!(
        ::std::mem::size_of::<rpcent>(),
        24usize,
        concat!("Size of: ", stringify!(rpcent))
    );
    assert_eq!(
        ::std::mem::align_of::<rpcent>(),
        8usize,
        concat!("Alignment of ", stringify!(rpcent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rpcent>())).r_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rpcent),
            "::",
            stringify!(r_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rpcent>())).r_aliases as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rpcent),
            "::",
            stringify!(r_aliases)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rpcent>())).r_number as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rpcent),
            "::",
            stringify!(r_number)
        )
    );
}
impl Default for rpcent {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn setrpcent(__stayopen: ::std::os::raw::c_int);
}
extern "C" {
    pub fn endrpcent();
}
extern "C" {
    pub fn getrpcbyname(__name: *const ::std::os::raw::c_char) -> *mut rpcent;
}
extern "C" {
    pub fn getrpcbynumber(__number: ::std::os::raw::c_int) -> *mut rpcent;
}
extern "C" {
    pub fn getrpcent() -> *mut rpcent;
}
extern "C" {
    pub fn getrpcbyname_r(
        __name: *const ::std::os::raw::c_char,
        __result_buf: *mut rpcent,
        __buffer: *mut ::std::os::raw::c_char,
        __buflen: size_t,
        __result: *mut *mut rpcent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getrpcbynumber_r(
        __number: ::std::os::raw::c_int,
        __result_buf: *mut rpcent,
        __buffer: *mut ::std::os::raw::c_char,
        __buflen: size_t,
        __result: *mut *mut rpcent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getrpcent_r(
        __result_buf: *mut rpcent,
        __buffer: *mut ::std::os::raw::c_char,
        __buflen: size_t,
        __result: *mut *mut rpcent,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct netent {
    pub n_name: *mut ::std::os::raw::c_char,
    pub n_aliases: *mut *mut ::std::os::raw::c_char,
    pub n_addrtype: ::std::os::raw::c_int,
    pub n_net: u32,
}
#[test]
fn bindgen_test_layout_netent() {
    assert_eq!(
        ::std::mem::size_of::<netent>(),
        24usize,
        concat!("Size of: ", stringify!(netent))
    );
    assert_eq!(
        ::std::mem::align_of::<netent>(),
        8usize,
        concat!("Alignment of ", stringify!(netent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netent>())).n_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(netent),
            "::",
            stringify!(n_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netent>())).n_aliases as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(netent),
            "::",
            stringify!(n_aliases)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netent>())).n_addrtype as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(netent),
            "::",
            stringify!(n_addrtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netent>())).n_net as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(netent),
            "::",
            stringify!(n_net)
        )
    );
}
impl Default for netent {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn __h_errno_location() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn herror(__str: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn hstrerror(__err_num: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hostent {
    pub h_name: *mut ::std::os::raw::c_char,
    pub h_aliases: *mut *mut ::std::os::raw::c_char,
    pub h_addrtype: ::std::os::raw::c_int,
    pub h_length: ::std::os::raw::c_int,
    pub h_addr_list: *mut *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_hostent() {
    assert_eq!(
        ::std::mem::size_of::<hostent>(),
        32usize,
        concat!("Size of: ", stringify!(hostent))
    );
    assert_eq!(
        ::std::mem::align_of::<hostent>(),
        8usize,
        concat!("Alignment of ", stringify!(hostent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hostent>())).h_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hostent),
            "::",
            stringify!(h_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hostent>())).h_aliases as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hostent),
            "::",
            stringify!(h_aliases)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hostent>())).h_addrtype as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hostent),
            "::",
            stringify!(h_addrtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hostent>())).h_length as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(hostent),
            "::",
            stringify!(h_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hostent>())).h_addr_list as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(hostent),
            "::",
            stringify!(h_addr_list)
        )
    );
}
impl Default for hostent {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn sethostent(__stay_open: ::std::os::raw::c_int);
}
extern "C" {
    pub fn endhostent();
}
extern "C" {
    pub fn gethostent() -> *mut hostent;
}
extern "C" {
    pub fn gethostbyaddr(
        __addr: *const ::std::os::raw::c_void,
        __len: __socklen_t,
        __type: ::std::os::raw::c_int,
    ) -> *mut hostent;
}
extern "C" {
    pub fn gethostbyname(__name: *const ::std::os::raw::c_char) -> *mut hostent;
}
extern "C" {
    pub fn gethostbyname2(
        __name: *const ::std::os::raw::c_char,
        __af: ::std::os::raw::c_int,
    ) -> *mut hostent;
}
extern "C" {
    pub fn gethostent_r(
        __result_buf: *mut hostent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
        __result: *mut *mut hostent,
        __h_errnop: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostbyaddr_r(
        __addr: *const ::std::os::raw::c_void,
        __len: __socklen_t,
        __type: ::std::os::raw::c_int,
        __result_buf: *mut hostent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
        __result: *mut *mut hostent,
        __h_errnop: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostbyname_r(
        __name: *const ::std::os::raw::c_char,
        __result_buf: *mut hostent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
        __result: *mut *mut hostent,
        __h_errnop: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostbyname2_r(
        __name: *const ::std::os::raw::c_char,
        __af: ::std::os::raw::c_int,
        __result_buf: *mut hostent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
        __result: *mut *mut hostent,
        __h_errnop: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setnetent(__stay_open: ::std::os::raw::c_int);
}
extern "C" {
    pub fn endnetent();
}
extern "C" {
    pub fn getnetent() -> *mut netent;
}
extern "C" {
    pub fn getnetbyaddr(__net: u32, __type: ::std::os::raw::c_int) -> *mut netent;
}
extern "C" {
    pub fn getnetbyname(__name: *const ::std::os::raw::c_char) -> *mut netent;
}
extern "C" {
    pub fn getnetent_r(
        __result_buf: *mut netent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
        __result: *mut *mut netent,
        __h_errnop: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getnetbyaddr_r(
        __net: u32,
        __type: ::std::os::raw::c_int,
        __result_buf: *mut netent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
        __result: *mut *mut netent,
        __h_errnop: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getnetbyname_r(
        __name: *const ::std::os::raw::c_char,
        __result_buf: *mut netent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
        __result: *mut *mut netent,
        __h_errnop: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct servent {
    pub s_name: *mut ::std::os::raw::c_char,
    pub s_aliases: *mut *mut ::std::os::raw::c_char,
    pub s_port: ::std::os::raw::c_int,
    pub s_proto: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_servent() {
    assert_eq!(
        ::std::mem::size_of::<servent>(),
        32usize,
        concat!("Size of: ", stringify!(servent))
    );
    assert_eq!(
        ::std::mem::align_of::<servent>(),
        8usize,
        concat!("Alignment of ", stringify!(servent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<servent>())).s_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(servent),
            "::",
            stringify!(s_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<servent>())).s_aliases as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(servent),
            "::",
            stringify!(s_aliases)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<servent>())).s_port as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(servent),
            "::",
            stringify!(s_port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<servent>())).s_proto as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(servent),
            "::",
            stringify!(s_proto)
        )
    );
}
impl Default for servent {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn setservent(__stay_open: ::std::os::raw::c_int);
}
extern "C" {
    pub fn endservent();
}
extern "C" {
    pub fn getservent() -> *mut servent;
}
extern "C" {
    pub fn getservbyname(
        __name: *const ::std::os::raw::c_char,
        __proto: *const ::std::os::raw::c_char,
    ) -> *mut servent;
}
extern "C" {
    pub fn getservbyport(
        __port: ::std::os::raw::c_int,
        __proto: *const ::std::os::raw::c_char,
    ) -> *mut servent;
}
extern "C" {
    pub fn getservent_r(
        __result_buf: *mut servent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
        __result: *mut *mut servent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getservbyname_r(
        __name: *const ::std::os::raw::c_char,
        __proto: *const ::std::os::raw::c_char,
        __result_buf: *mut servent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
        __result: *mut *mut servent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getservbyport_r(
        __port: ::std::os::raw::c_int,
        __proto: *const ::std::os::raw::c_char,
        __result_buf: *mut servent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
        __result: *mut *mut servent,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct protoent {
    pub p_name: *mut ::std::os::raw::c_char,
    pub p_aliases: *mut *mut ::std::os::raw::c_char,
    pub p_proto: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_protoent() {
    assert_eq!(
        ::std::mem::size_of::<protoent>(),
        24usize,
        concat!("Size of: ", stringify!(protoent))
    );
    assert_eq!(
        ::std::mem::align_of::<protoent>(),
        8usize,
        concat!("Alignment of ", stringify!(protoent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<protoent>())).p_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(protoent),
            "::",
            stringify!(p_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<protoent>())).p_aliases as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(protoent),
            "::",
            stringify!(p_aliases)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<protoent>())).p_proto as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(protoent),
            "::",
            stringify!(p_proto)
        )
    );
}
impl Default for protoent {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn setprotoent(__stay_open: ::std::os::raw::c_int);
}
extern "C" {
    pub fn endprotoent();
}
extern "C" {
    pub fn getprotoent() -> *mut protoent;
}
extern "C" {
    pub fn getprotobyname(__name: *const ::std::os::raw::c_char) -> *mut protoent;
}
extern "C" {
    pub fn getprotobynumber(__proto: ::std::os::raw::c_int) -> *mut protoent;
}
extern "C" {
    pub fn getprotoent_r(
        __result_buf: *mut protoent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
        __result: *mut *mut protoent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getprotobyname_r(
        __name: *const ::std::os::raw::c_char,
        __result_buf: *mut protoent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
        __result: *mut *mut protoent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getprotobynumber_r(
        __proto: ::std::os::raw::c_int,
        __result_buf: *mut protoent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
        __result: *mut *mut protoent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setnetgrent(__netgroup: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn endnetgrent();
}
extern "C" {
    pub fn getnetgrent(
        __hostp: *mut *mut ::std::os::raw::c_char,
        __userp: *mut *mut ::std::os::raw::c_char,
        __domainp: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn innetgr(
        __netgroup: *const ::std::os::raw::c_char,
        __host: *const ::std::os::raw::c_char,
        __user: *const ::std::os::raw::c_char,
        __domain: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getnetgrent_r(
        __hostp: *mut *mut ::std::os::raw::c_char,
        __userp: *mut *mut ::std::os::raw::c_char,
        __domainp: *mut *mut ::std::os::raw::c_char,
        __buffer: *mut ::std::os::raw::c_char,
        __buflen: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rcmd(
        __ahost: *mut *mut ::std::os::raw::c_char,
        __rport: ::std::os::raw::c_ushort,
        __locuser: *const ::std::os::raw::c_char,
        __remuser: *const ::std::os::raw::c_char,
        __cmd: *const ::std::os::raw::c_char,
        __fd2p: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rcmd_af(
        __ahost: *mut *mut ::std::os::raw::c_char,
        __rport: ::std::os::raw::c_ushort,
        __locuser: *const ::std::os::raw::c_char,
        __remuser: *const ::std::os::raw::c_char,
        __cmd: *const ::std::os::raw::c_char,
        __fd2p: *mut ::std::os::raw::c_int,
        __af: sa_family_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rexec(
        __ahost: *mut *mut ::std::os::raw::c_char,
        __rport: ::std::os::raw::c_int,
        __name: *const ::std::os::raw::c_char,
        __pass: *const ::std::os::raw::c_char,
        __cmd: *const ::std::os::raw::c_char,
        __fd2p: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rexec_af(
        __ahost: *mut *mut ::std::os::raw::c_char,
        __rport: ::std::os::raw::c_int,
        __name: *const ::std::os::raw::c_char,
        __pass: *const ::std::os::raw::c_char,
        __cmd: *const ::std::os::raw::c_char,
        __fd2p: *mut ::std::os::raw::c_int,
        __af: sa_family_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ruserok(
        __rhost: *const ::std::os::raw::c_char,
        __suser: ::std::os::raw::c_int,
        __remuser: *const ::std::os::raw::c_char,
        __locuser: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ruserok_af(
        __rhost: *const ::std::os::raw::c_char,
        __suser: ::std::os::raw::c_int,
        __remuser: *const ::std::os::raw::c_char,
        __locuser: *const ::std::os::raw::c_char,
        __af: sa_family_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iruserok(
        __raddr: u32,
        __suser: ::std::os::raw::c_int,
        __remuser: *const ::std::os::raw::c_char,
        __locuser: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iruserok_af(
        __raddr: *const ::std::os::raw::c_void,
        __suser: ::std::os::raw::c_int,
        __remuser: *const ::std::os::raw::c_char,
        __locuser: *const ::std::os::raw::c_char,
        __af: sa_family_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rresvport(__alport: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rresvport_af(
        __alport: *mut ::std::os::raw::c_int,
        __af: sa_family_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct addrinfo {
    pub ai_flags: ::std::os::raw::c_int,
    pub ai_family: ::std::os::raw::c_int,
    pub ai_socktype: ::std::os::raw::c_int,
    pub ai_protocol: ::std::os::raw::c_int,
    pub ai_addrlen: socklen_t,
    pub ai_addr: *mut sockaddr,
    pub ai_canonname: *mut ::std::os::raw::c_char,
    pub ai_next: *mut addrinfo,
}
#[test]
fn bindgen_test_layout_addrinfo() {
    assert_eq!(
        ::std::mem::size_of::<addrinfo>(),
        48usize,
        concat!("Size of: ", stringify!(addrinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<addrinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(addrinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<addrinfo>())).ai_flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(addrinfo),
            "::",
            stringify!(ai_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<addrinfo>())).ai_family as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(addrinfo),
            "::",
            stringify!(ai_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<addrinfo>())).ai_socktype as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(addrinfo),
            "::",
            stringify!(ai_socktype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<addrinfo>())).ai_protocol as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(addrinfo),
            "::",
            stringify!(ai_protocol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<addrinfo>())).ai_addrlen as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(addrinfo),
            "::",
            stringify!(ai_addrlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<addrinfo>())).ai_addr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(addrinfo),
            "::",
            stringify!(ai_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<addrinfo>())).ai_canonname as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(addrinfo),
            "::",
            stringify!(ai_canonname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<addrinfo>())).ai_next as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(addrinfo),
            "::",
            stringify!(ai_next)
        )
    );
}
impl Default for addrinfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn getaddrinfo(
        __name: *const ::std::os::raw::c_char,
        __service: *const ::std::os::raw::c_char,
        __req: *const addrinfo,
        __pai: *mut *mut addrinfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freeaddrinfo(__ai: *mut addrinfo);
}
extern "C" {
    pub fn gai_strerror(__ecode: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn getnameinfo(
        __sa: *const sockaddr,
        __salen: socklen_t,
        __host: *mut ::std::os::raw::c_char,
        __hostlen: socklen_t,
        __serv: *mut ::std::os::raw::c_char,
        __servlen: socklen_t,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct winsize {
    pub ws_row: ::std::os::raw::c_ushort,
    pub ws_col: ::std::os::raw::c_ushort,
    pub ws_xpixel: ::std::os::raw::c_ushort,
    pub ws_ypixel: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_winsize() {
    assert_eq!(
        ::std::mem::size_of::<winsize>(),
        8usize,
        concat!("Size of: ", stringify!(winsize))
    );
    assert_eq!(
        ::std::mem::align_of::<winsize>(),
        2usize,
        concat!("Alignment of ", stringify!(winsize))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winsize>())).ws_row as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(winsize),
            "::",
            stringify!(ws_row)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winsize>())).ws_col as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(winsize),
            "::",
            stringify!(ws_col)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winsize>())).ws_xpixel as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(winsize),
            "::",
            stringify!(ws_xpixel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winsize>())).ws_ypixel as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(winsize),
            "::",
            stringify!(ws_ypixel)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct termio {
    pub c_iflag: ::std::os::raw::c_ushort,
    pub c_oflag: ::std::os::raw::c_ushort,
    pub c_cflag: ::std::os::raw::c_ushort,
    pub c_lflag: ::std::os::raw::c_ushort,
    pub c_line: ::std::os::raw::c_uchar,
    pub c_cc: [::std::os::raw::c_uchar; 8usize],
}
#[test]
fn bindgen_test_layout_termio() {
    assert_eq!(
        ::std::mem::size_of::<termio>(),
        18usize,
        concat!("Size of: ", stringify!(termio))
    );
    assert_eq!(
        ::std::mem::align_of::<termio>(),
        2usize,
        concat!("Alignment of ", stringify!(termio))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<termio>())).c_iflag as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(termio),
            "::",
            stringify!(c_iflag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<termio>())).c_oflag as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(termio),
            "::",
            stringify!(c_oflag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<termio>())).c_cflag as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(termio),
            "::",
            stringify!(c_cflag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<termio>())).c_lflag as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(termio),
            "::",
            stringify!(c_lflag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<termio>())).c_line as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(termio),
            "::",
            stringify!(c_line)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<termio>())).c_cc as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(termio),
            "::",
            stringify!(c_cc)
        )
    );
}
extern "C" {
    pub fn ioctl(
        __fd: ::std::os::raw::c_int,
        __request: ::std::os::raw::c_ulong,
        ...
    ) -> ::std::os::raw::c_int;
}
pub type SOCKET_T = ::std::os::raw::c_int;
pub type SOCKADDR = sockaddr;
pub type SOCKADDR_S = sockaddr_storage;
pub type SOCKADDR_IN = sockaddr_in;
pub type HOSTENT = hostent;
extern "C" {
    pub fn wolfIO_TcpConnect(
        sockfd: *mut SOCKET_T,
        ip: *const ::std::os::raw::c_char,
        port: ::std::os::raw::c_ushort,
        to_sec: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfIO_Send(
        sd: SOCKET_T,
        buf: *mut ::std::os::raw::c_char,
        sz: ::std::os::raw::c_int,
        wrFlags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfIO_Recv(
        sd: SOCKET_T,
        buf: *mut ::std::os::raw::c_char,
        sz: ::std::os::raw::c_int,
        rdFlags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EmbedReceive(
        ssl: *mut WOLFSSL,
        buf: *mut ::std::os::raw::c_char,
        sz: ::std::os::raw::c_int,
        ctx: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EmbedSend(
        ssl: *mut WOLFSSL,
        buf: *mut ::std::os::raw::c_char,
        sz: ::std::os::raw::c_int,
        ctx: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
pub type CallbackIORecv = ::std::option::Option<
    unsafe extern "C" fn(
        ssl: *mut WOLFSSL,
        buf: *mut ::std::os::raw::c_char,
        sz: ::std::os::raw::c_int,
        ctx: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type CallbackIOSend = ::std::option::Option<
    unsafe extern "C" fn(
        ssl: *mut WOLFSSL,
        buf: *mut ::std::os::raw::c_char,
        sz: ::std::os::raw::c_int,
        ctx: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn wolfSSL_SetIORecv(arg1: *mut WOLFSSL_CTX, arg2: CallbackIORecv);
}
extern "C" {
    pub fn wolfSSL_SetIOSend(arg1: *mut WOLFSSL_CTX, arg2: CallbackIOSend);
}
extern "C" {
    pub fn wolfSSL_SetIOReadCtx(ssl: *mut WOLFSSL, ctx: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn wolfSSL_SetIOWriteCtx(ssl: *mut WOLFSSL, ctx: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn wolfSSL_GetIOReadCtx(ssl: *mut WOLFSSL) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn wolfSSL_GetIOWriteCtx(ssl: *mut WOLFSSL) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn wolfSSL_SetIOReadFlags(ssl: *mut WOLFSSL, flags: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wolfSSL_SetIOWriteFlags(ssl: *mut WOLFSSL, flags: ::std::os::raw::c_int);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WOLFSSL_RSA {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WOLFSSL_DSA {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WOLFSSL_EC_KEY {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WOLFSSL_EC_POINT {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WOLFSSL_EC_GROUP {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WOLFSSL_ECDSA_SIG {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WOLFSSL_CIPHER {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WOLFSSL_X509_CRL {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WOLFSSL_X509_VERIFY_PARAM {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WOLFSSL_BIO {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WOLFSSL_BIO_METHOD {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WOLFSSL_X509_EXTENSION {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WOLFSSL_ASN1_STRING {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WOLFSSL_dynlock_value {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WOLFSSL_DH {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WOLFSSL_ASN1_BIT_STRING {
    _unused: [u8; 0],
}
pub type WOLFSSL_BUF_MEM = *mut ::std::os::raw::c_uchar;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct WOLFSSL_ASN1_INTEGER {
    pub data: [::std::os::raw::c_uchar; 20usize],
}
#[test]
fn bindgen_test_layout_WOLFSSL_ASN1_INTEGER() {
    assert_eq!(
        ::std::mem::size_of::<WOLFSSL_ASN1_INTEGER>(),
        20usize,
        concat!("Size of: ", stringify!(WOLFSSL_ASN1_INTEGER))
    );
    assert_eq!(
        ::std::mem::align_of::<WOLFSSL_ASN1_INTEGER>(),
        1usize,
        concat!("Alignment of ", stringify!(WOLFSSL_ASN1_INTEGER))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WOLFSSL_ASN1_INTEGER>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WOLFSSL_ASN1_INTEGER),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct WOLFSSL_ASN1_TIME {
    pub data: [::std::os::raw::c_uchar; 34usize],
}
#[test]
fn bindgen_test_layout_WOLFSSL_ASN1_TIME() {
    assert_eq!(
        ::std::mem::size_of::<WOLFSSL_ASN1_TIME>(),
        34usize,
        concat!("Size of: ", stringify!(WOLFSSL_ASN1_TIME))
    );
    assert_eq!(
        ::std::mem::align_of::<WOLFSSL_ASN1_TIME>(),
        1usize,
        concat!("Alignment of ", stringify!(WOLFSSL_ASN1_TIME))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WOLFSSL_ASN1_TIME>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WOLFSSL_ASN1_TIME),
            "::",
            stringify!(data)
        )
    );
}
impl Default for WOLFSSL_ASN1_TIME {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WOLFSSL_EVP_PKEY {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct WOLFSSL_MD4_CTX {
    pub buffer: [::std::os::raw::c_int; 32usize],
}
#[test]
fn bindgen_test_layout_WOLFSSL_MD4_CTX() {
    assert_eq!(
        ::std::mem::size_of::<WOLFSSL_MD4_CTX>(),
        128usize,
        concat!("Size of: ", stringify!(WOLFSSL_MD4_CTX))
    );
    assert_eq!(
        ::std::mem::align_of::<WOLFSSL_MD4_CTX>(),
        4usize,
        concat!("Alignment of ", stringify!(WOLFSSL_MD4_CTX))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WOLFSSL_MD4_CTX>())).buffer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WOLFSSL_MD4_CTX),
            "::",
            stringify!(buffer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct WOLFSSL_COMP_METHOD {
    pub type_: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_WOLFSSL_COMP_METHOD() {
    assert_eq!(
        ::std::mem::size_of::<WOLFSSL_COMP_METHOD>(),
        4usize,
        concat!("Size of: ", stringify!(WOLFSSL_COMP_METHOD))
    );
    assert_eq!(
        ::std::mem::align_of::<WOLFSSL_COMP_METHOD>(),
        4usize,
        concat!("Alignment of ", stringify!(WOLFSSL_COMP_METHOD))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WOLFSSL_COMP_METHOD>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WOLFSSL_COMP_METHOD),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct WOLFSSL_X509_LOOKUP_METHOD {
    pub type_: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_WOLFSSL_X509_LOOKUP_METHOD() {
    assert_eq!(
        ::std::mem::size_of::<WOLFSSL_X509_LOOKUP_METHOD>(),
        4usize,
        concat!("Size of: ", stringify!(WOLFSSL_X509_LOOKUP_METHOD))
    );
    assert_eq!(
        ::std::mem::align_of::<WOLFSSL_X509_LOOKUP_METHOD>(),
        4usize,
        concat!("Alignment of ", stringify!(WOLFSSL_X509_LOOKUP_METHOD))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WOLFSSL_X509_LOOKUP_METHOD>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WOLFSSL_X509_LOOKUP_METHOD),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WOLFSSL_X509_LOOKUP {
    pub store: *mut WOLFSSL_X509_STORE,
}
#[test]
fn bindgen_test_layout_WOLFSSL_X509_LOOKUP() {
    assert_eq!(
        ::std::mem::size_of::<WOLFSSL_X509_LOOKUP>(),
        8usize,
        concat!("Size of: ", stringify!(WOLFSSL_X509_LOOKUP))
    );
    assert_eq!(
        ::std::mem::align_of::<WOLFSSL_X509_LOOKUP>(),
        8usize,
        concat!("Alignment of ", stringify!(WOLFSSL_X509_LOOKUP))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WOLFSSL_X509_LOOKUP>())).store as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WOLFSSL_X509_LOOKUP),
            "::",
            stringify!(store)
        )
    );
}
impl Default for WOLFSSL_X509_LOOKUP {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WOLFSSL_X509_STORE {
    pub cache: ::std::os::raw::c_int,
    pub cm: *mut WOLFSSL_CERT_MANAGER,
    pub lookup: WOLFSSL_X509_LOOKUP,
}
#[test]
fn bindgen_test_layout_WOLFSSL_X509_STORE() {
    assert_eq!(
        ::std::mem::size_of::<WOLFSSL_X509_STORE>(),
        24usize,
        concat!("Size of: ", stringify!(WOLFSSL_X509_STORE))
    );
    assert_eq!(
        ::std::mem::align_of::<WOLFSSL_X509_STORE>(),
        8usize,
        concat!("Alignment of ", stringify!(WOLFSSL_X509_STORE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WOLFSSL_X509_STORE>())).cache as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WOLFSSL_X509_STORE),
            "::",
            stringify!(cache)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WOLFSSL_X509_STORE>())).cm as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WOLFSSL_X509_STORE),
            "::",
            stringify!(cm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WOLFSSL_X509_STORE>())).lookup as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WOLFSSL_X509_STORE),
            "::",
            stringify!(lookup)
        )
    );
}
impl Default for WOLFSSL_X509_STORE {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct WOLFSSL_ALERT {
    pub code: ::std::os::raw::c_int,
    pub level: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_WOLFSSL_ALERT() {
    assert_eq!(
        ::std::mem::size_of::<WOLFSSL_ALERT>(),
        8usize,
        concat!("Size of: ", stringify!(WOLFSSL_ALERT))
    );
    assert_eq!(
        ::std::mem::align_of::<WOLFSSL_ALERT>(),
        4usize,
        concat!("Alignment of ", stringify!(WOLFSSL_ALERT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WOLFSSL_ALERT>())).code as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WOLFSSL_ALERT),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WOLFSSL_ALERT>())).level as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(WOLFSSL_ALERT),
            "::",
            stringify!(level)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct WOLFSSL_ALERT_HISTORY {
    pub last_rx: WOLFSSL_ALERT,
    pub last_tx: WOLFSSL_ALERT,
}
#[test]
fn bindgen_test_layout_WOLFSSL_ALERT_HISTORY() {
    assert_eq!(
        ::std::mem::size_of::<WOLFSSL_ALERT_HISTORY>(),
        16usize,
        concat!("Size of: ", stringify!(WOLFSSL_ALERT_HISTORY))
    );
    assert_eq!(
        ::std::mem::align_of::<WOLFSSL_ALERT_HISTORY>(),
        4usize,
        concat!("Alignment of ", stringify!(WOLFSSL_ALERT_HISTORY))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WOLFSSL_ALERT_HISTORY>())).last_rx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WOLFSSL_ALERT_HISTORY),
            "::",
            stringify!(last_rx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WOLFSSL_ALERT_HISTORY>())).last_tx as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WOLFSSL_ALERT_HISTORY),
            "::",
            stringify!(last_tx)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WOLFSSL_X509_REVOKED {
    pub serialNumber: *mut WOLFSSL_ASN1_INTEGER,
}
#[test]
fn bindgen_test_layout_WOLFSSL_X509_REVOKED() {
    assert_eq!(
        ::std::mem::size_of::<WOLFSSL_X509_REVOKED>(),
        8usize,
        concat!("Size of: ", stringify!(WOLFSSL_X509_REVOKED))
    );
    assert_eq!(
        ::std::mem::align_of::<WOLFSSL_X509_REVOKED>(),
        8usize,
        concat!("Alignment of ", stringify!(WOLFSSL_X509_REVOKED))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WOLFSSL_X509_REVOKED>())).serialNumber as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WOLFSSL_X509_REVOKED),
            "::",
            stringify!(serialNumber)
        )
    );
}
impl Default for WOLFSSL_X509_REVOKED {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct WOLFSSL_X509_OBJECT {
    pub data: WOLFSSL_X509_OBJECT__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union WOLFSSL_X509_OBJECT__bindgen_ty_1 {
    pub ptr: *mut ::std::os::raw::c_char,
    pub x509: *mut WOLFSSL_X509,
    pub crl: *mut WOLFSSL_X509_CRL,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_WOLFSSL_X509_OBJECT__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<WOLFSSL_X509_OBJECT__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(WOLFSSL_X509_OBJECT__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<WOLFSSL_X509_OBJECT__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(WOLFSSL_X509_OBJECT__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WOLFSSL_X509_OBJECT__bindgen_ty_1>())).ptr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WOLFSSL_X509_OBJECT__bindgen_ty_1),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WOLFSSL_X509_OBJECT__bindgen_ty_1>())).x509 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WOLFSSL_X509_OBJECT__bindgen_ty_1),
            "::",
            stringify!(x509)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WOLFSSL_X509_OBJECT__bindgen_ty_1>())).crl as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WOLFSSL_X509_OBJECT__bindgen_ty_1),
            "::",
            stringify!(crl)
        )
    );
}
impl Default for WOLFSSL_X509_OBJECT__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout_WOLFSSL_X509_OBJECT() {
    assert_eq!(
        ::std::mem::size_of::<WOLFSSL_X509_OBJECT>(),
        8usize,
        concat!("Size of: ", stringify!(WOLFSSL_X509_OBJECT))
    );
    assert_eq!(
        ::std::mem::align_of::<WOLFSSL_X509_OBJECT>(),
        8usize,
        concat!("Alignment of ", stringify!(WOLFSSL_X509_OBJECT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WOLFSSL_X509_OBJECT>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WOLFSSL_X509_OBJECT),
            "::",
            stringify!(data)
        )
    );
}
impl Default for WOLFSSL_X509_OBJECT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WOLFSSL_BUFFER_INFO {
    pub buffer: *mut ::std::os::raw::c_uchar,
    pub length: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_WOLFSSL_BUFFER_INFO() {
    assert_eq!(
        ::std::mem::size_of::<WOLFSSL_BUFFER_INFO>(),
        16usize,
        concat!("Size of: ", stringify!(WOLFSSL_BUFFER_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<WOLFSSL_BUFFER_INFO>(),
        8usize,
        concat!("Alignment of ", stringify!(WOLFSSL_BUFFER_INFO))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WOLFSSL_BUFFER_INFO>())).buffer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WOLFSSL_BUFFER_INFO),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WOLFSSL_BUFFER_INFO>())).length as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WOLFSSL_BUFFER_INFO),
            "::",
            stringify!(length)
        )
    );
}
impl Default for WOLFSSL_BUFFER_INFO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WOLFSSL_X509_STORE_CTX {
    pub store: *mut WOLFSSL_X509_STORE,
    pub current_cert: *mut WOLFSSL_X509,
    pub chain: *mut WOLFSSL_STACK,
    pub domain: *mut ::std::os::raw::c_char,
    pub ex_data: *mut ::std::os::raw::c_void,
    pub userCtx: *mut ::std::os::raw::c_void,
    pub error: ::std::os::raw::c_int,
    pub error_depth: ::std::os::raw::c_int,
    pub discardSessionCerts: ::std::os::raw::c_int,
    pub totalCerts: ::std::os::raw::c_int,
    pub certs: *mut WOLFSSL_BUFFER_INFO,
}
#[test]
fn bindgen_test_layout_WOLFSSL_X509_STORE_CTX() {
    assert_eq!(
        ::std::mem::size_of::<WOLFSSL_X509_STORE_CTX>(),
        72usize,
        concat!("Size of: ", stringify!(WOLFSSL_X509_STORE_CTX))
    );
    assert_eq!(
        ::std::mem::align_of::<WOLFSSL_X509_STORE_CTX>(),
        8usize,
        concat!("Alignment of ", stringify!(WOLFSSL_X509_STORE_CTX))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WOLFSSL_X509_STORE_CTX>())).store as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WOLFSSL_X509_STORE_CTX),
            "::",
            stringify!(store)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WOLFSSL_X509_STORE_CTX>())).current_cert as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WOLFSSL_X509_STORE_CTX),
            "::",
            stringify!(current_cert)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WOLFSSL_X509_STORE_CTX>())).chain as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WOLFSSL_X509_STORE_CTX),
            "::",
            stringify!(chain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WOLFSSL_X509_STORE_CTX>())).domain as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WOLFSSL_X509_STORE_CTX),
            "::",
            stringify!(domain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WOLFSSL_X509_STORE_CTX>())).ex_data as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(WOLFSSL_X509_STORE_CTX),
            "::",
            stringify!(ex_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WOLFSSL_X509_STORE_CTX>())).userCtx as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(WOLFSSL_X509_STORE_CTX),
            "::",
            stringify!(userCtx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WOLFSSL_X509_STORE_CTX>())).error as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(WOLFSSL_X509_STORE_CTX),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WOLFSSL_X509_STORE_CTX>())).error_depth as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(WOLFSSL_X509_STORE_CTX),
            "::",
            stringify!(error_depth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WOLFSSL_X509_STORE_CTX>())).discardSessionCerts as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(WOLFSSL_X509_STORE_CTX),
            "::",
            stringify!(discardSessionCerts)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WOLFSSL_X509_STORE_CTX>())).totalCerts as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(WOLFSSL_X509_STORE_CTX),
            "::",
            stringify!(totalCerts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WOLFSSL_X509_STORE_CTX>())).certs as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(WOLFSSL_X509_STORE_CTX),
            "::",
            stringify!(certs)
        )
    );
}
impl Default for WOLFSSL_X509_STORE_CTX {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type WOLFSSL_STRING = *mut ::std::os::raw::c_char;
pub const AlertDescription_close_notify: AlertDescription = 0;
pub const AlertDescription_unexpected_message: AlertDescription = 10;
pub const AlertDescription_bad_record_mac: AlertDescription = 20;
pub const AlertDescription_record_overflow: AlertDescription = 22;
pub const AlertDescription_decompression_failure: AlertDescription = 30;
pub const AlertDescription_handshake_failure: AlertDescription = 40;
pub const AlertDescription_no_certificate: AlertDescription = 41;
pub const AlertDescription_bad_certificate: AlertDescription = 42;
pub const AlertDescription_unsupported_certificate: AlertDescription = 43;
pub const AlertDescription_certificate_revoked: AlertDescription = 44;
pub const AlertDescription_certificate_expired: AlertDescription = 45;
pub const AlertDescription_certificate_unknown: AlertDescription = 46;
pub const AlertDescription_illegal_parameter: AlertDescription = 47;
pub const AlertDescription_decode_error: AlertDescription = 50;
pub const AlertDescription_decrypt_error: AlertDescription = 51;
pub const AlertDescription_protocol_version: AlertDescription = 70;
pub const AlertDescription_no_renegotiation: AlertDescription = 100;
#[doc = "< RFC 5246, section 7.2.2"]
pub const AlertDescription_unsupported_extension: AlertDescription = 110;
#[doc = "< RFC 6066, section 3"]
pub const AlertDescription_unrecognized_name: AlertDescription = 112;
#[doc = "< RFC 6066, section 8"]
pub const AlertDescription_bad_certificate_status_response: AlertDescription = 113;
pub const AlertDescription_no_application_protocol: AlertDescription = 120;
pub type AlertDescription = ::std::os::raw::c_uint;
pub const AlertLevel_alert_warning: AlertLevel = 1;
pub const AlertLevel_alert_fatal: AlertLevel = 2;
pub type AlertLevel = ::std::os::raw::c_uint;
pub type wolfSSL_method_func = ::std::option::Option<
    unsafe extern "C" fn(heap: *mut ::std::os::raw::c_void) -> *mut WOLFSSL_METHOD,
>;
extern "C" {
    pub fn wolfSSLv3_server_method_ex(heap: *mut ::std::os::raw::c_void) -> *mut WOLFSSL_METHOD;
}
extern "C" {
    pub fn wolfSSLv3_client_method_ex(heap: *mut ::std::os::raw::c_void) -> *mut WOLFSSL_METHOD;
}
extern "C" {
    pub fn wolfTLSv1_server_method_ex(heap: *mut ::std::os::raw::c_void) -> *mut WOLFSSL_METHOD;
}
extern "C" {
    pub fn wolfTLSv1_client_method_ex(heap: *mut ::std::os::raw::c_void) -> *mut WOLFSSL_METHOD;
}
extern "C" {
    pub fn wolfTLSv1_1_server_method_ex(heap: *mut ::std::os::raw::c_void) -> *mut WOLFSSL_METHOD;
}
extern "C" {
    pub fn wolfTLSv1_1_client_method_ex(heap: *mut ::std::os::raw::c_void) -> *mut WOLFSSL_METHOD;
}
extern "C" {
    pub fn wolfTLSv1_2_server_method_ex(heap: *mut ::std::os::raw::c_void) -> *mut WOLFSSL_METHOD;
}
extern "C" {
    pub fn wolfTLSv1_2_client_method_ex(heap: *mut ::std::os::raw::c_void) -> *mut WOLFSSL_METHOD;
}
extern "C" {
    pub fn wolfSSLv23_server_method_ex(heap: *mut ::std::os::raw::c_void) -> *mut WOLFSSL_METHOD;
}
extern "C" {
    pub fn wolfSSLv23_client_method_ex(heap: *mut ::std::os::raw::c_void) -> *mut WOLFSSL_METHOD;
}
extern "C" {
    pub fn wolfSSLv23_method() -> *mut WOLFSSL_METHOD;
}
extern "C" {
    pub fn wolfSSLv3_server_method() -> *mut WOLFSSL_METHOD;
}
extern "C" {
    pub fn wolfSSLv3_client_method() -> *mut WOLFSSL_METHOD;
}
extern "C" {
    pub fn wolfTLSv1_server_method() -> *mut WOLFSSL_METHOD;
}
extern "C" {
    pub fn wolfTLSv1_client_method() -> *mut WOLFSSL_METHOD;
}
extern "C" {
    pub fn wolfTLSv1_1_server_method() -> *mut WOLFSSL_METHOD;
}
extern "C" {
    pub fn wolfTLSv1_1_client_method() -> *mut WOLFSSL_METHOD;
}
extern "C" {
    pub fn wolfTLSv1_2_server_method() -> *mut WOLFSSL_METHOD;
}
extern "C" {
    pub fn wolfTLSv1_2_client_method() -> *mut WOLFSSL_METHOD;
}
extern "C" {
    pub fn wolfSSL_CTX_use_certificate_file(
        arg1: *mut WOLFSSL_CTX,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CTX_use_PrivateKey_file(
        arg1: *mut WOLFSSL_CTX,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CTX_load_verify_locations(
        arg1: *mut WOLFSSL_CTX,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CTX_use_certificate_chain_file(
        arg1: *mut WOLFSSL_CTX,
        file: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CTX_use_RSAPrivateKey_file(
        arg1: *mut WOLFSSL_CTX,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_get_verify_depth(ssl: *mut WOLFSSL) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wolfSSL_CTX_get_verify_depth(ctx: *mut WOLFSSL_CTX) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wolfSSL_use_certificate_file(
        arg1: *mut WOLFSSL,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_use_PrivateKey_file(
        arg1: *mut WOLFSSL,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_use_certificate_chain_file(
        arg1: *mut WOLFSSL,
        file: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_use_RSAPrivateKey_file(
        arg1: *mut WOLFSSL,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_PemCertToDer(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_uchar,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CTX_new(arg1: *mut WOLFSSL_METHOD) -> *mut WOLFSSL_CTX;
}
extern "C" {
    pub fn wolfSSL_new(arg1: *mut WOLFSSL_CTX) -> *mut WOLFSSL;
}
extern "C" {
    pub fn wolfSSL_is_server(arg1: *mut WOLFSSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_write_dup(arg1: *mut WOLFSSL) -> *mut WOLFSSL;
}
extern "C" {
    pub fn wolfSSL_set_fd(arg1: *mut WOLFSSL, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_set_write_fd(
        arg1: *mut WOLFSSL,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_set_read_fd(
        arg1: *mut WOLFSSL,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_get_cipher_list(priority: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn wolfSSL_get_cipher_list_ex(
        ssl: *mut WOLFSSL,
        priority: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn wolfSSL_get_ciphers(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_get_cipher_name(ssl: *mut WOLFSSL) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wolfSSL_get_shared_ciphers(
        ssl: *mut WOLFSSL,
        buf: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wolfSSL_get_curve_name(ssl: *mut WOLFSSL) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wolfSSL_get_fd(arg1: *const WOLFSSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_set_using_nonblock(arg1: *mut WOLFSSL, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wolfSSL_get_using_nonblock(arg1: *mut WOLFSSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_connect(arg1: *mut WOLFSSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_write(
        arg1: *mut WOLFSSL,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_read(
        arg1: *mut WOLFSSL,
        arg2: *mut ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_peek(
        arg1: *mut WOLFSSL,
        arg2: *mut ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_accept(arg1: *mut WOLFSSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CTX_free(arg1: *mut WOLFSSL_CTX);
}
extern "C" {
    pub fn wolfSSL_free(arg1: *mut WOLFSSL);
}
extern "C" {
    pub fn wolfSSL_shutdown(arg1: *mut WOLFSSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_send(
        arg1: *mut WOLFSSL,
        arg2: *const ::std::os::raw::c_void,
        sz: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_recv(
        arg1: *mut WOLFSSL,
        arg2: *mut ::std::os::raw::c_void,
        sz: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CTX_set_quiet_shutdown(arg1: *mut WOLFSSL_CTX, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wolfSSL_set_quiet_shutdown(arg1: *mut WOLFSSL, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wolfSSL_get_error(
        arg1: *mut WOLFSSL,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_get_alert_history(
        arg1: *mut WOLFSSL,
        arg2: *mut WOLFSSL_ALERT_HISTORY,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_set_session(
        ssl: *mut WOLFSSL,
        session: *mut WOLFSSL_SESSION,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_SSL_SESSION_set_timeout(
        session: *mut WOLFSSL_SESSION,
        t: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wolfSSL_get_session(ssl: *mut WOLFSSL) -> *mut WOLFSSL_SESSION;
}
extern "C" {
    pub fn wolfSSL_flush_sessions(ctx: *mut WOLFSSL_CTX, tm: ::std::os::raw::c_long);
}
extern "C" {
    pub fn wolfSSL_SetServerID(
        ssl: *mut WOLFSSL,
        arg1: *const ::std::os::raw::c_uchar,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type VerifyCallback = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ::std::os::raw::c_int,
        arg2: *mut WOLFSSL_X509_STORE_CTX,
    ) -> ::std::os::raw::c_int,
>;
pub type pem_password_cb = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn wolfSSL_CTX_set_verify(
        arg1: *mut WOLFSSL_CTX,
        arg2: ::std::os::raw::c_int,
        verify_callback: VerifyCallback,
    );
}
extern "C" {
    pub fn wolfSSL_set_verify(
        arg1: *mut WOLFSSL,
        arg2: ::std::os::raw::c_int,
        verify_callback: VerifyCallback,
    );
}
extern "C" {
    pub fn wolfSSL_SetCertCbCtx(arg1: *mut WOLFSSL, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn wolfSSL_pending(arg1: *mut WOLFSSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_load_error_strings();
}
extern "C" {
    pub fn wolfSSL_library_init() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CTX_set_session_cache_mode(
        arg1: *mut WOLFSSL_CTX,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wolfSSL_save_session_cache(arg1: *const ::std::os::raw::c_char)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_restore_session_cache(
        arg1: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_memsave_session_cache(
        arg1: *mut ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_memrestore_session_cache(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_get_session_cache_memsize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CTX_save_cert_cache(
        arg1: *mut WOLFSSL_CTX,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CTX_restore_cert_cache(
        arg1: *mut WOLFSSL_CTX,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CTX_memsave_cert_cache(
        arg1: *mut WOLFSSL_CTX,
        arg2: *mut ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CTX_memrestore_cert_cache(
        arg1: *mut WOLFSSL_CTX,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CTX_get_cert_cache_memsize(arg1: *mut WOLFSSL_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CTX_set_cipher_list(
        arg1: *mut WOLFSSL_CTX,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_set_cipher_list(
        arg1: *mut WOLFSSL,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_dtls_get_current_timeout(ssl: *mut WOLFSSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_dtls_set_timeout_init(
        ssl: *mut WOLFSSL,
        arg1: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_dtls_set_timeout_max(
        ssl: *mut WOLFSSL,
        arg1: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_dtls_got_timeout(ssl: *mut WOLFSSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_dtls(ssl: *mut WOLFSSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_dtls_set_peer(
        arg1: *mut WOLFSSL,
        arg2: *mut ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_dtls_get_peer(
        arg1: *mut WOLFSSL,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CTX_dtls_set_sctp(arg1: *mut WOLFSSL_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_dtls_set_sctp(arg1: *mut WOLFSSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CTX_dtls_set_mtu(
        arg1: *mut WOLFSSL_CTX,
        arg2: ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_dtls_set_mtu(
        arg1: *mut WOLFSSL,
        arg2: ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_dtls_get_drop_stats(
        arg1: *mut WOLFSSL,
        arg2: *mut ::std::os::raw::c_uint,
        arg3: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CTX_mcast_set_member_id(
        arg1: *mut WOLFSSL_CTX,
        arg2: ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_set_secret(
        arg1: *mut WOLFSSL,
        arg2: ::std::os::raw::c_ushort,
        arg3: *const ::std::os::raw::c_uchar,
        arg4: ::std::os::raw::c_uint,
        arg5: *const ::std::os::raw::c_uchar,
        arg6: *const ::std::os::raw::c_uchar,
        arg7: *const ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_mcast_read(
        arg1: *mut WOLFSSL,
        arg2: *mut ::std::os::raw::c_ushort,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_mcast_peer_add(
        arg1: *mut WOLFSSL,
        arg2: ::std::os::raw::c_ushort,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_mcast_peer_known(
        arg1: *mut WOLFSSL,
        arg2: ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_mcast_get_max_peers() -> ::std::os::raw::c_int;
}
pub type CallbackMcastHighwater = ::std::option::Option<
    unsafe extern "C" fn(
        peerId: ::std::os::raw::c_ushort,
        maxSeq: ::std::os::raw::c_uint,
        curSeq: ::std::os::raw::c_uint,
        ctx: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn wolfSSL_CTX_mcast_set_highwater_cb(
        arg1: *mut WOLFSSL_CTX,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_uint,
        arg5: CallbackMcastHighwater,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_mcast_set_highwater_ctx(
        arg1: *mut WOLFSSL,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_ERR_GET_REASON(err: ::std::os::raw::c_ulong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_ERR_error_string(
        arg1: ::std::os::raw::c_ulong,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn wolfSSL_ERR_error_string_n(
        e: ::std::os::raw::c_ulong,
        buf: *mut ::std::os::raw::c_char,
        sz: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn wolfSSL_ERR_reason_error_string(
        arg1: ::std::os::raw::c_ulong,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wolfSSL_sk_X509_push(
        sk: *mut WOLFSSL_STACK,
        x509: *mut WOLFSSL_X509,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_sk_X509_pop(sk: *mut WOLFSSL_STACK) -> *mut WOLFSSL_X509;
}
extern "C" {
    pub fn wolfSSL_sk_X509_free(sk: *mut WOLFSSL_STACK);
}
extern "C" {
    pub fn wolfSSL_ASN1_OBJECT_new() -> *mut WOLFSSL_ASN1_OBJECT;
}
extern "C" {
    pub fn wolfSSL_ASN1_OBJECT_free(obj: *mut WOLFSSL_ASN1_OBJECT);
}
extern "C" {
    pub fn wolfSSL_sk_ASN1_OBJECT_push(
        sk: *mut WOLFSSL_STACK,
        obj: *mut WOLFSSL_ASN1_OBJECT,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_sk_ASN1_OBJCET_pop(sk: *mut WOLFSSL_STACK) -> *mut WOLFSSL_ASN1_OBJECT;
}
extern "C" {
    pub fn wolfSSL_sk_ASN1_OBJECT_free(sk: *mut WOLFSSL_STACK);
}
extern "C" {
    pub fn wolfSSL_ASN1_STRING_to_UTF8(
        out: *mut *mut ::std::os::raw::c_uchar,
        in_: *mut WOLFSSL_ASN1_STRING,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_set_ex_data(
        arg1: *mut WOLFSSL,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_get_shutdown(arg1: *const WOLFSSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_set_rfd(
        arg1: *mut WOLFSSL,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_set_wfd(
        arg1: *mut WOLFSSL,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_set_shutdown(arg1: *mut WOLFSSL, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wolfSSL_set_session_id_context(
        arg1: *mut WOLFSSL,
        arg2: *const ::std::os::raw::c_uchar,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_set_connect_state(arg1: *mut WOLFSSL);
}
extern "C" {
    pub fn wolfSSL_set_accept_state(arg1: *mut WOLFSSL);
}
extern "C" {
    pub fn wolfSSL_session_reused(arg1: *mut WOLFSSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_SESSION_free(session: *mut WOLFSSL_SESSION);
}
extern "C" {
    pub fn wolfSSL_is_init_finished(arg1: *mut WOLFSSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_get_version(arg1: *mut WOLFSSL) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wolfSSL_get_current_cipher_suite(ssl: *mut WOLFSSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_get_current_cipher(arg1: *mut WOLFSSL) -> *mut WOLFSSL_CIPHER;
}
extern "C" {
    pub fn wolfSSL_CIPHER_description(
        arg1: *const WOLFSSL_CIPHER,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn wolfSSL_CIPHER_get_name(cipher: *const WOLFSSL_CIPHER) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wolfSSL_SESSION_CIPHER_get_name(
        session: *mut WOLFSSL_SESSION,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wolfSSL_get_cipher(arg1: *mut WOLFSSL) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wolfSSL_get1_session(ssl: *mut WOLFSSL) -> *mut WOLFSSL_SESSION;
}
extern "C" {
    pub fn wolfSSL_X509_free(arg1: *mut WOLFSSL_X509);
}
extern "C" {
    pub fn wolfSSL_OPENSSL_free(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn wolfSSL_OCSP_parse_url(
        url: *mut ::std::os::raw::c_char,
        host: *mut *mut ::std::os::raw::c_char,
        port: *mut *mut ::std::os::raw::c_char,
        path: *mut *mut ::std::os::raw::c_char,
        ssl: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSLv23_client_method() -> *mut WOLFSSL_METHOD;
}
extern "C" {
    pub fn wolfSSLv2_client_method() -> *mut WOLFSSL_METHOD;
}
extern "C" {
    pub fn wolfSSLv2_server_method() -> *mut WOLFSSL_METHOD;
}
extern "C" {
    pub fn wolfSSL_MD4_Init(arg1: *mut WOLFSSL_MD4_CTX);
}
extern "C" {
    pub fn wolfSSL_MD4_Update(
        arg1: *mut WOLFSSL_MD4_CTX,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn wolfSSL_MD4_Final(arg1: *mut ::std::os::raw::c_uchar, arg2: *mut WOLFSSL_MD4_CTX);
}
extern "C" {
    pub fn wolfSSL_BIO_new(arg1: *mut WOLFSSL_BIO_METHOD) -> *mut WOLFSSL_BIO;
}
extern "C" {
    pub fn wolfSSL_BIO_free(arg1: *mut WOLFSSL_BIO) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_BIO_free_all(arg1: *mut WOLFSSL_BIO) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_BIO_read(
        arg1: *mut WOLFSSL_BIO,
        arg2: *mut ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_BIO_write(
        arg1: *mut WOLFSSL_BIO,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_BIO_push(arg1: *mut WOLFSSL_BIO, append: *mut WOLFSSL_BIO) -> *mut WOLFSSL_BIO;
}
extern "C" {
    pub fn wolfSSL_BIO_pop(arg1: *mut WOLFSSL_BIO) -> *mut WOLFSSL_BIO;
}
extern "C" {
    pub fn wolfSSL_BIO_flush(arg1: *mut WOLFSSL_BIO) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_BIO_pending(arg1: *mut WOLFSSL_BIO) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_BIO_f_buffer() -> *mut WOLFSSL_BIO_METHOD;
}
extern "C" {
    pub fn wolfSSL_BIO_set_write_buffer_size(
        arg1: *mut WOLFSSL_BIO,
        size: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wolfSSL_BIO_f_ssl() -> *mut WOLFSSL_BIO_METHOD;
}
extern "C" {
    pub fn wolfSSL_BIO_new_socket(
        sfd: ::std::os::raw::c_int,
        flag: ::std::os::raw::c_int,
    ) -> *mut WOLFSSL_BIO;
}
extern "C" {
    pub fn wolfSSL_BIO_eof(arg1: *mut WOLFSSL_BIO) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_BIO_s_mem() -> *mut WOLFSSL_BIO_METHOD;
}
extern "C" {
    pub fn wolfSSL_BIO_f_base64() -> *mut WOLFSSL_BIO_METHOD;
}
extern "C" {
    pub fn wolfSSL_BIO_set_flags(arg1: *mut WOLFSSL_BIO, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wolfSSL_BIO_get_mem_data(
        bio: *mut WOLFSSL_BIO,
        p: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_BIO_new_mem_buf(
        buf: *mut ::std::os::raw::c_void,
        len: ::std::os::raw::c_int,
    ) -> *mut WOLFSSL_BIO;
}
extern "C" {
    pub fn wolfSSL_BIO_set_ssl(
        arg1: *mut WOLFSSL_BIO,
        arg2: *mut WOLFSSL,
        flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wolfSSL_BIO_set_fd(
        b: *mut WOLFSSL_BIO,
        fd: ::std::os::raw::c_int,
        flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wolfSSL_set_bio(arg1: *mut WOLFSSL, rd: *mut WOLFSSL_BIO, wr: *mut WOLFSSL_BIO);
}
extern "C" {
    pub fn wolfSSL_add_all_algorithms() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_BIO_s_file() -> *mut WOLFSSL_BIO_METHOD;
}
extern "C" {
    pub fn wolfSSL_BIO_s_bio() -> *mut WOLFSSL_BIO_METHOD;
}
extern "C" {
    pub fn wolfSSL_BIO_s_socket() -> *mut WOLFSSL_BIO_METHOD;
}
extern "C" {
    pub fn wolfSSL_BIO_ctrl(
        bp: *mut WOLFSSL_BIO,
        cmd: ::std::os::raw::c_int,
        larg: ::std::os::raw::c_long,
        parg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wolfSSL_BIO_int_ctrl(
        bp: *mut WOLFSSL_BIO,
        cmd: ::std::os::raw::c_int,
        larg: ::std::os::raw::c_long,
        iarg: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wolfSSL_BIO_set_write_buf_size(
        b: *mut WOLFSSL_BIO,
        size: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_BIO_make_bio_pair(
        b1: *mut WOLFSSL_BIO,
        b2: *mut WOLFSSL_BIO,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_BIO_ctrl_reset_read_request(b: *mut WOLFSSL_BIO) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_BIO_nread0(
        bio: *mut WOLFSSL_BIO,
        buf: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_BIO_nread(
        bio: *mut WOLFSSL_BIO,
        buf: *mut *mut ::std::os::raw::c_char,
        num: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_BIO_nwrite(
        bio: *mut WOLFSSL_BIO,
        buf: *mut *mut ::std::os::raw::c_char,
        num: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_BIO_reset(bio: *mut WOLFSSL_BIO) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_BIO_seek(
        bio: *mut WOLFSSL_BIO,
        ofs: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_BIO_write_filename(
        bio: *mut WOLFSSL_BIO,
        name: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_BIO_set_mem_eof_return(
        bio: *mut WOLFSSL_BIO,
        v: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wolfSSL_BIO_get_mem_ptr(
        bio: *mut WOLFSSL_BIO,
        m: *mut *mut WOLFSSL_BUF_MEM,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wolfSSL_RAND_screen();
}
extern "C" {
    pub fn wolfSSL_RAND_file_name(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_ulong,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wolfSSL_RAND_write_file(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_RAND_load_file(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_RAND_egd(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_RAND_seed(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_RAND_add(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
        arg3: f64,
    );
}
extern "C" {
    pub fn wolfSSL_COMP_zlib() -> *mut WOLFSSL_COMP_METHOD;
}
extern "C" {
    pub fn wolfSSL_COMP_rle() -> *mut WOLFSSL_COMP_METHOD;
}
extern "C" {
    pub fn wolfSSL_COMP_add_compression_method(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_get_ex_new_index(
        arg1: ::std::os::raw::c_long,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
        arg5: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_set_id_callback(
        f: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_ulong>,
    );
}
extern "C" {
    pub fn wolfSSL_set_locking_callback(
        f: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_int,
                arg2: ::std::os::raw::c_int,
                arg3: *const ::std::os::raw::c_char,
                arg4: ::std::os::raw::c_int,
            ),
        >,
    );
}
extern "C" {
    pub fn wolfSSL_set_dynlock_create_callback(
        f: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_char,
                arg2: ::std::os::raw::c_int,
            ) -> *mut WOLFSSL_dynlock_value,
        >,
    );
}
extern "C" {
    pub fn wolfSSL_set_dynlock_lock_callback(
        f: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_int,
                arg2: *mut WOLFSSL_dynlock_value,
                arg3: *const ::std::os::raw::c_char,
                arg4: ::std::os::raw::c_int,
            ),
        >,
    );
}
extern "C" {
    pub fn wolfSSL_set_dynlock_destroy_callback(
        f: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut WOLFSSL_dynlock_value,
                arg2: *const ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ),
        >,
    );
}
extern "C" {
    pub fn wolfSSL_num_locks() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_X509_STORE_CTX_get_current_cert(
        arg1: *mut WOLFSSL_X509_STORE_CTX,
    ) -> *mut WOLFSSL_X509;
}
extern "C" {
    pub fn wolfSSL_X509_STORE_CTX_get_error(
        arg1: *mut WOLFSSL_X509_STORE_CTX,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_X509_STORE_CTX_get_error_depth(
        arg1: *mut WOLFSSL_X509_STORE_CTX,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_X509_NAME_oneline(
        arg1: *mut WOLFSSL_X509_NAME,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn wolfSSL_X509_get_issuer_name(arg1: *mut WOLFSSL_X509) -> *mut WOLFSSL_X509_NAME;
}
extern "C" {
    pub fn wolfSSL_X509_get_subject_name(arg1: *mut WOLFSSL_X509) -> *mut WOLFSSL_X509_NAME;
}
extern "C" {
    pub fn wolfSSL_X509_ext_isSet_by_NID(
        arg1: *mut WOLFSSL_X509,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_X509_ext_get_critical_by_NID(
        arg1: *mut WOLFSSL_X509,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_X509_get_isCA(arg1: *mut WOLFSSL_X509) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_X509_get_isSet_pathLength(arg1: *mut WOLFSSL_X509) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_X509_get_pathLength(arg1: *mut WOLFSSL_X509) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn wolfSSL_X509_get_keyUsage(arg1: *mut WOLFSSL_X509) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn wolfSSL_X509_get_authorityKeyID(
        arg1: *mut WOLFSSL_X509,
        arg2: *mut ::std::os::raw::c_uchar,
        arg3: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn wolfSSL_X509_get_subjectKeyID(
        arg1: *mut WOLFSSL_X509,
        arg2: *mut ::std::os::raw::c_uchar,
        arg3: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn wolfSSL_X509_NAME_entry_count(arg1: *mut WOLFSSL_X509_NAME) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_X509_NAME_get_text_by_NID(
        arg1: *mut WOLFSSL_X509_NAME,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_X509_NAME_get_index_by_NID(
        arg1: *mut WOLFSSL_X509_NAME,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_X509_NAME_ENTRY_get_data(
        arg1: *mut WOLFSSL_X509_NAME_ENTRY,
    ) -> *mut WOLFSSL_ASN1_STRING;
}
extern "C" {
    pub fn wolfSSL_ASN1_STRING_data(arg1: *mut WOLFSSL_ASN1_STRING) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn wolfSSL_ASN1_STRING_length(arg1: *mut WOLFSSL_ASN1_STRING) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_X509_verify_cert(arg1: *mut WOLFSSL_X509_STORE_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_X509_verify_cert_error_string(
        arg1: ::std::os::raw::c_long,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wolfSSL_X509_get_signature_type(arg1: *mut WOLFSSL_X509) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_X509_get_signature(
        arg1: *mut WOLFSSL_X509,
        arg2: *mut ::std::os::raw::c_uchar,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_X509_LOOKUP_add_dir(
        arg1: *mut WOLFSSL_X509_LOOKUP,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_X509_LOOKUP_load_file(
        arg1: *mut WOLFSSL_X509_LOOKUP,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_X509_LOOKUP_hash_dir() -> *mut WOLFSSL_X509_LOOKUP_METHOD;
}
extern "C" {
    pub fn wolfSSL_X509_LOOKUP_file() -> *mut WOLFSSL_X509_LOOKUP_METHOD;
}
extern "C" {
    pub fn wolfSSL_X509_STORE_add_lookup(
        arg1: *mut WOLFSSL_X509_STORE,
        arg2: *mut WOLFSSL_X509_LOOKUP_METHOD,
    ) -> *mut WOLFSSL_X509_LOOKUP;
}
extern "C" {
    pub fn wolfSSL_X509_STORE_new() -> *mut WOLFSSL_X509_STORE;
}
extern "C" {
    pub fn wolfSSL_X509_STORE_free(arg1: *mut WOLFSSL_X509_STORE);
}
extern "C" {
    pub fn wolfSSL_X509_STORE_add_cert(
        arg1: *mut WOLFSSL_X509_STORE,
        arg2: *mut WOLFSSL_X509,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_X509_STORE_CTX_get_chain(ctx: *mut WOLFSSL_X509_STORE_CTX)
        -> *mut WOLFSSL_STACK;
}
extern "C" {
    pub fn wolfSSL_X509_STORE_set_flags(
        store: *mut WOLFSSL_X509_STORE,
        flag: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_X509_STORE_set_default_paths(
        arg1: *mut WOLFSSL_X509_STORE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_X509_STORE_get_by_subject(
        arg1: *mut WOLFSSL_X509_STORE_CTX,
        arg2: ::std::os::raw::c_int,
        arg3: *mut WOLFSSL_X509_NAME,
        arg4: *mut WOLFSSL_X509_OBJECT,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_X509_STORE_CTX_new() -> *mut WOLFSSL_X509_STORE_CTX;
}
extern "C" {
    pub fn wolfSSL_X509_STORE_CTX_init(
        arg1: *mut WOLFSSL_X509_STORE_CTX,
        arg2: *mut WOLFSSL_X509_STORE,
        arg3: *mut WOLFSSL_X509,
        arg4: *mut WOLFSSL_STACK,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_X509_STORE_CTX_free(arg1: *mut WOLFSSL_X509_STORE_CTX);
}
extern "C" {
    pub fn wolfSSL_X509_STORE_CTX_cleanup(arg1: *mut WOLFSSL_X509_STORE_CTX);
}
extern "C" {
    pub fn wolfSSL_X509_CRL_get_lastUpdate(arg1: *mut WOLFSSL_X509_CRL) -> *mut WOLFSSL_ASN1_TIME;
}
extern "C" {
    pub fn wolfSSL_X509_CRL_get_nextUpdate(arg1: *mut WOLFSSL_X509_CRL) -> *mut WOLFSSL_ASN1_TIME;
}
extern "C" {
    pub fn wolfSSL_X509_get_pubkey(arg1: *mut WOLFSSL_X509) -> *mut WOLFSSL_EVP_PKEY;
}
extern "C" {
    pub fn wolfSSL_X509_CRL_verify(
        arg1: *mut WOLFSSL_X509_CRL,
        arg2: *mut WOLFSSL_EVP_PKEY,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_X509_STORE_CTX_set_error(
        arg1: *mut WOLFSSL_X509_STORE_CTX,
        arg2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn wolfSSL_X509_OBJECT_free_contents(arg1: *mut WOLFSSL_X509_OBJECT);
}
extern "C" {
    pub fn wolfSSL_d2i_PrivateKey(
        type_: ::std::os::raw::c_int,
        out: *mut *mut WOLFSSL_EVP_PKEY,
        in_: *mut *const ::std::os::raw::c_uchar,
        inSz: ::std::os::raw::c_long,
    ) -> *mut WOLFSSL_EVP_PKEY;
}
extern "C" {
    pub fn wolfSSL_PKEY_new() -> *mut WOLFSSL_EVP_PKEY;
}
extern "C" {
    pub fn wolfSSL_EVP_PKEY_free(arg1: *mut WOLFSSL_EVP_PKEY);
}
extern "C" {
    pub fn wolfSSL_X509_cmp_current_time(arg1: *const WOLFSSL_ASN1_TIME) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_sk_X509_REVOKED_num(arg1: *mut WOLFSSL_X509_REVOKED) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_X509_CRL_get_REVOKED(arg1: *mut WOLFSSL_X509_CRL) -> *mut WOLFSSL_X509_REVOKED;
}
extern "C" {
    pub fn wolfSSL_sk_X509_REVOKED_value(
        arg1: *mut WOLFSSL_X509_REVOKED,
        arg2: ::std::os::raw::c_int,
    ) -> *mut WOLFSSL_X509_REVOKED;
}
extern "C" {
    pub fn wolfSSL_X509_get_serialNumber(arg1: *mut WOLFSSL_X509) -> *mut WOLFSSL_ASN1_INTEGER;
}
extern "C" {
    pub fn wolfSSL_ASN1_TIME_print(
        arg1: *mut WOLFSSL_BIO,
        arg2: *const WOLFSSL_ASN1_TIME,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_ASN1_INTEGER_cmp(
        arg1: *const WOLFSSL_ASN1_INTEGER,
        arg2: *const WOLFSSL_ASN1_INTEGER,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_ASN1_INTEGER_get(arg1: *const WOLFSSL_ASN1_INTEGER) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wolfSSL_SSL_CTX_get_client_CA_list(s: *const WOLFSSL_CTX) -> *mut WOLFSSL_STACK;
}
extern "C" {
    pub fn wolfSSL_CTX_set_client_CA_list(arg1: *mut WOLFSSL_CTX, arg2: *mut WOLFSSL_STACK);
}
extern "C" {
    pub fn wolfSSL_X509_STORE_CTX_get_ex_data(
        arg1: *mut WOLFSSL_X509_STORE_CTX,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn wolfSSL_get_ex_data_X509_STORE_CTX_idx() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_get_ex_data(
        arg1: *const WOLFSSL,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn wolfSSL_CTX_set_default_passwd_cb_userdata(
        arg1: *mut WOLFSSL_CTX,
        userdata: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn wolfSSL_CTX_set_default_passwd_cb(arg1: *mut WOLFSSL_CTX, arg2: pem_password_cb);
}
extern "C" {
    pub fn wolfSSL_CTX_set_info_callback(
        arg1: *mut WOLFSSL_CTX,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                ssl: *const WOLFSSL,
                type_: ::std::os::raw::c_int,
                val: ::std::os::raw::c_int,
            ),
        >,
    );
}
extern "C" {
    pub fn wolfSSL_ERR_peek_error() -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wolfSSL_GET_REASON(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_alert_type_string_long(
        arg1: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn wolfSSL_alert_desc_string_long(
        arg1: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn wolfSSL_state_string_long(arg1: *const WOLFSSL) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn wolfSSL_RSA_generate_key(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_ulong,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_int,
                arg2: ::std::os::raw::c_int,
                arg3: *mut ::std::os::raw::c_void,
            ),
        >,
        arg4: *mut ::std::os::raw::c_void,
    ) -> *mut WOLFSSL_RSA;
}
extern "C" {
    pub fn wolfSSL_CTX_set_tmp_rsa_callback(
        arg1: *mut WOLFSSL_CTX,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut WOLFSSL,
                arg2: ::std::os::raw::c_int,
                arg3: ::std::os::raw::c_int,
            ) -> *mut WOLFSSL_RSA,
        >,
    );
}
extern "C" {
    pub fn wolfSSL_PEM_def_callback(
        arg1: *mut ::std::os::raw::c_char,
        num: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CTX_sess_accept(arg1: *mut WOLFSSL_CTX) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wolfSSL_CTX_sess_connect(arg1: *mut WOLFSSL_CTX) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wolfSSL_CTX_sess_accept_good(arg1: *mut WOLFSSL_CTX) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wolfSSL_CTX_sess_connect_good(arg1: *mut WOLFSSL_CTX) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wolfSSL_CTX_sess_accept_renegotiate(arg1: *mut WOLFSSL_CTX) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wolfSSL_CTX_sess_connect_renegotiate(arg1: *mut WOLFSSL_CTX) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wolfSSL_CTX_sess_hits(arg1: *mut WOLFSSL_CTX) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wolfSSL_CTX_sess_cb_hits(arg1: *mut WOLFSSL_CTX) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wolfSSL_CTX_sess_cache_full(arg1: *mut WOLFSSL_CTX) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wolfSSL_CTX_sess_misses(arg1: *mut WOLFSSL_CTX) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wolfSSL_CTX_sess_timeouts(arg1: *mut WOLFSSL_CTX) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wolfSSL_CTX_sess_number(arg1: *mut WOLFSSL_CTX) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wolfSSL_CTX_add_extra_chain_cert(
        arg1: *mut WOLFSSL_CTX,
        arg2: *mut WOLFSSL_X509,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wolfSSL_CTX_sess_set_cache_size(
        arg1: *mut WOLFSSL_CTX,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wolfSSL_CTX_sess_get_cache_size(arg1: *mut WOLFSSL_CTX) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wolfSSL_CTX_get_session_cache_mode(arg1: *mut WOLFSSL_CTX) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wolfSSL_CTX_get_read_ahead(arg1: *mut WOLFSSL_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CTX_set_read_ahead(
        arg1: *mut WOLFSSL_CTX,
        v: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CTX_set_tlsext_status_arg(
        arg1: *mut WOLFSSL_CTX,
        arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wolfSSL_CTX_set_tlsext_opaque_prf_input_callback_arg(
        arg1: *mut WOLFSSL_CTX,
        arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wolfSSL_CTX_add_client_CA(
        arg1: *mut WOLFSSL_CTX,
        arg2: *mut WOLFSSL_X509,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CTX_set_srp_password(
        arg1: *mut WOLFSSL_CTX,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CTX_set_srp_username(
        arg1: *mut WOLFSSL_CTX,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_set_options(
        s: *mut WOLFSSL,
        op: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wolfSSL_get_options(s: *const WOLFSSL) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wolfSSL_clear_num_renegotiations(s: *mut WOLFSSL) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wolfSSL_total_renegotiations(s: *mut WOLFSSL) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wolfSSL_set_tmp_dh(s: *mut WOLFSSL, dh: *mut WOLFSSL_DH) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wolfSSL_set_tlsext_debug_arg(
        s: *mut WOLFSSL,
        arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wolfSSL_set_tlsext_status_type(
        s: *mut WOLFSSL,
        type_: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wolfSSL_set_tlsext_status_exts(
        s: *mut WOLFSSL,
        arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wolfSSL_get_tlsext_status_ids(
        s: *mut WOLFSSL,
        arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wolfSSL_set_tlsext_status_ids(
        s: *mut WOLFSSL,
        arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wolfSSL_get_tlsext_status_ocsp_resp(
        s: *mut WOLFSSL,
        resp: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wolfSSL_set_tlsext_status_ocsp_resp(
        s: *mut WOLFSSL,
        resp: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wolfSSL_CONF_modules_unload(all: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wolfSSL_get_tlsext_status_exts(
        s: *mut WOLFSSL,
        arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wolfSSL_get_verify_result(ssl: *const WOLFSSL) -> ::std::os::raw::c_long;
}
pub const WOLFSSL_OCSP_URL_OVERRIDE: ::std::os::raw::c_uint = 1;
pub const WOLFSSL_OCSP_NO_NONCE: ::std::os::raw::c_uint = 2;
pub const WOLFSSL_OCSP_CHECKALL: ::std::os::raw::c_uint = 4;
pub const WOLFSSL_CRL_CHECKALL: ::std::os::raw::c_uint = 1;
pub const WOLFSSL_CRL_CHECK: ::std::os::raw::c_uint = 27;
pub type _bindgen_ty_10 = ::std::os::raw::c_uint;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wchb as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
impl Default for __mbstate_t__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__value)
        )
    );
}
impl Default for __mbstate_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__state)
        )
    );
}
impl Default for _G_fpos_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__state)
        )
    );
}
impl Default for _G_fpos64_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_jump_t {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    pub _next: *mut _IO_marker,
    pub _sbuf: *mut _IO_FILE,
    pub _pos: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__IO_marker() {
    assert_eq!(
        ::std::mem::size_of::<_IO_marker>(),
        24usize,
        concat!("Size of: ", stringify!(_IO_marker))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_marker>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_marker))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_marker>()))._next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_marker>()))._sbuf as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_sbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_marker>()))._pos as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_pos)
        )
    );
}
impl Default for _IO_marker {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const __codecvt_result___codecvt_ok: __codecvt_result = 0;
pub const __codecvt_result___codecvt_partial: __codecvt_result = 1;
pub const __codecvt_result___codecvt_error: __codecvt_result = 2;
pub const __codecvt_result___codecvt_noconv: __codecvt_result = 3;
pub type __codecvt_result = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::std::os::raw::c_void,
    pub __pad2: *mut ::std::os::raw::c_void,
    pub __pad3: *mut ::std::os::raw::c_void,
    pub __pad4: *mut ::std::os::raw::c_void,
    pub __pad5: size_t,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad1 as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad2 as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad3 as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad4 as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
impl Default for _IO_FILE {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE_plus {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut _IO_2_1_stdin_: _IO_FILE_plus;
}
extern "C" {
    pub static mut _IO_2_1_stdout_: _IO_FILE_plus;
}
extern "C" {
    pub static mut _IO_2_1_stderr_: _IO_FILE_plus;
}
pub type __io_read_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *mut ::std::os::raw::c_char,
        __nbytes: size_t,
    ) -> __ssize_t,
>;
pub type __io_write_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> __ssize_t,
>;
pub type __io_seek_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __pos: *mut __off64_t,
        __w: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type __io_close_fn = ::std::option::Option<
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn __underflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __uflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_getc(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_putc(__c: ::std::os::raw::c_int, __fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_feof(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_ferror(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_peekc_locked(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_flockfile(arg1: *mut _IO_FILE);
}
extern "C" {
    pub fn _IO_funlockfile(arg1: *mut _IO_FILE);
}
extern "C" {
    pub fn _IO_ftrylockfile(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_vfscanf(
        arg1: *mut _IO_FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_vfprintf(
        arg1: *mut _IO_FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_padn(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int, arg3: __ssize_t)
        -> __ssize_t;
}
extern "C" {
    pub fn _IO_sgetn(
        arg1: *mut _IO_FILE,
        arg2: *mut ::std::os::raw::c_void,
        arg3: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn _IO_seekoff(
        arg1: *mut _IO_FILE,
        arg2: __off64_t,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __off64_t;
}
extern "C" {
    pub fn _IO_seekpos(
        arg1: *mut _IO_FILE,
        arg2: __off64_t,
        arg3: ::std::os::raw::c_int,
    ) -> __off64_t;
}
extern "C" {
    pub fn _IO_free_backup_area(arg1: *mut _IO_FILE);
}
pub type fpos_t = _G_fpos_t;
extern "C" {
    pub static mut stdin: *mut _IO_FILE;
}
extern "C" {
    pub static mut stdout: *mut _IO_FILE;
}
extern "C" {
    pub static mut stderr: *mut _IO_FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: size_t,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut size_t,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: size_t);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __s: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub static mut sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn wolfSSL_ERR_print_errors_fp(arg1: *mut FILE, err: ::std::os::raw::c_int);
}
pub const WOLFSSL_ERROR_NONE: ::std::os::raw::c_int = 0;
pub const WOLFSSL_FAILURE: ::std::os::raw::c_int = 0;
pub const WOLFSSL_SUCCESS: ::std::os::raw::c_int = 1;
pub const WOLFSSL_SHUTDOWN_NOT_DONE: ::std::os::raw::c_int = 2;
pub const WOLFSSL_ALPN_NOT_FOUND: ::std::os::raw::c_int = -9;
pub const WOLFSSL_BAD_CERTTYPE: ::std::os::raw::c_int = -8;
pub const WOLFSSL_BAD_STAT: ::std::os::raw::c_int = -7;
pub const WOLFSSL_BAD_PATH: ::std::os::raw::c_int = -6;
pub const WOLFSSL_BAD_FILETYPE: ::std::os::raw::c_int = -5;
pub const WOLFSSL_BAD_FILE: ::std::os::raw::c_int = -4;
pub const WOLFSSL_NOT_IMPLEMENTED: ::std::os::raw::c_int = -3;
pub const WOLFSSL_UNKNOWN: ::std::os::raw::c_int = -2;
pub const WOLFSSL_FATAL_ERROR: ::std::os::raw::c_int = -1;
pub const WOLFSSL_FILETYPE_ASN1: ::std::os::raw::c_int = 2;
pub const WOLFSSL_FILETYPE_PEM: ::std::os::raw::c_int = 1;
pub const WOLFSSL_FILETYPE_DEFAULT: ::std::os::raw::c_int = 2;
pub const WOLFSSL_FILETYPE_RAW: ::std::os::raw::c_int = 3;
pub const WOLFSSL_VERIFY_NONE: ::std::os::raw::c_int = 0;
pub const WOLFSSL_VERIFY_PEER: ::std::os::raw::c_int = 1;
pub const WOLFSSL_VERIFY_FAIL_IF_NO_PEER_CERT: ::std::os::raw::c_int = 2;
pub const WOLFSSL_VERIFY_CLIENT_ONCE: ::std::os::raw::c_int = 4;
pub const WOLFSSL_VERIFY_FAIL_EXCEPT_PSK: ::std::os::raw::c_int = 8;
pub const WOLFSSL_SESS_CACHE_OFF: ::std::os::raw::c_int = 0;
pub const WOLFSSL_SESS_CACHE_CLIENT: ::std::os::raw::c_int = 1;
pub const WOLFSSL_SESS_CACHE_SERVER: ::std::os::raw::c_int = 2;
pub const WOLFSSL_SESS_CACHE_BOTH: ::std::os::raw::c_int = 3;
pub const WOLFSSL_SESS_CACHE_NO_AUTO_CLEAR: ::std::os::raw::c_int = 8;
pub const WOLFSSL_SESS_CACHE_NO_INTERNAL_LOOKUP: ::std::os::raw::c_int = 256;
pub const WOLFSSL_SESS_CACHE_NO_INTERNAL_STORE: ::std::os::raw::c_int = 512;
pub const WOLFSSL_SESS_CACHE_NO_INTERNAL: ::std::os::raw::c_int = 768;
pub const WOLFSSL_ERROR_WANT_READ: ::std::os::raw::c_int = 2;
pub const WOLFSSL_ERROR_WANT_WRITE: ::std::os::raw::c_int = 3;
pub const WOLFSSL_ERROR_WANT_CONNECT: ::std::os::raw::c_int = 7;
pub const WOLFSSL_ERROR_WANT_ACCEPT: ::std::os::raw::c_int = 8;
pub const WOLFSSL_ERROR_SYSCALL: ::std::os::raw::c_int = 5;
pub const WOLFSSL_ERROR_WANT_X509_LOOKUP: ::std::os::raw::c_int = 83;
pub const WOLFSSL_ERROR_ZERO_RETURN: ::std::os::raw::c_int = 6;
pub const WOLFSSL_ERROR_SSL: ::std::os::raw::c_int = 85;
pub const WOLFSSL_SENT_SHUTDOWN: ::std::os::raw::c_int = 1;
pub const WOLFSSL_RECEIVED_SHUTDOWN: ::std::os::raw::c_int = 2;
pub const WOLFSSL_MODE_ACCEPT_MOVING_WRITE_BUFFER: ::std::os::raw::c_int = 4;
pub const WOLFSSL_OP_NO_SSLv2: ::std::os::raw::c_int = 8;
pub const WOLFSSL_R_SSL_HANDSHAKE_FAILURE: ::std::os::raw::c_int = 101;
pub const WOLFSSL_R_TLSV1_ALERT_UNKNOWN_CA: ::std::os::raw::c_int = 102;
pub const WOLFSSL_R_SSLV3_ALERT_CERTIFICATE_UNKNOWN: ::std::os::raw::c_int = 103;
pub const WOLFSSL_R_SSLV3_ALERT_BAD_CERTIFICATE: ::std::os::raw::c_int = 104;
pub const WOLF_PEM_BUFSIZE: ::std::os::raw::c_int = 1024;
pub type _bindgen_ty_11 = ::std::os::raw::c_int;
pub type wc_psk_client_callback = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut WOLFSSL,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_uint,
        arg5: *mut ::std::os::raw::c_uchar,
        arg6: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint,
>;
extern "C" {
    pub fn wolfSSL_CTX_set_psk_client_callback(
        arg1: *mut WOLFSSL_CTX,
        arg2: wc_psk_client_callback,
    );
}
extern "C" {
    pub fn wolfSSL_set_psk_client_callback(arg1: *mut WOLFSSL, arg2: wc_psk_client_callback);
}
extern "C" {
    pub fn wolfSSL_get_psk_identity_hint(arg1: *const WOLFSSL) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wolfSSL_get_psk_identity(arg1: *const WOLFSSL) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wolfSSL_CTX_use_psk_identity_hint(
        arg1: *mut WOLFSSL_CTX,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_use_psk_identity_hint(
        arg1: *mut WOLFSSL,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
pub type wc_psk_server_callback = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut WOLFSSL,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_uchar,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint,
>;
extern "C" {
    pub fn wolfSSL_CTX_set_psk_server_callback(
        arg1: *mut WOLFSSL_CTX,
        arg2: wc_psk_server_callback,
    );
}
extern "C" {
    pub fn wolfSSL_set_psk_server_callback(arg1: *mut WOLFSSL, arg2: wc_psk_server_callback);
}
extern "C" {
    pub fn wolfSSL_ERR_get_error_line_data(
        arg1: *mut *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut *const ::std::os::raw::c_char,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wolfSSL_ERR_get_error() -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wolfSSL_ERR_clear_error();
}
extern "C" {
    pub fn wolfSSL_RAND_status() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_RAND_bytes(
        buf: *mut ::std::os::raw::c_uchar,
        num: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSLv23_server_method() -> *mut WOLFSSL_METHOD;
}
extern "C" {
    pub fn wolfSSL_CTX_set_options(
        arg1: *mut WOLFSSL_CTX,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wolfSSL_CTX_check_private_key(arg1: *mut WOLFSSL_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_ERR_free_strings();
}
extern "C" {
    pub fn wolfSSL_ERR_remove_state(arg1: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn wolfSSL_EVP_cleanup();
}
extern "C" {
    pub fn wolfSSL_clear(ssl: *mut WOLFSSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_state(ssl: *mut WOLFSSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_cleanup_all_ex_data();
}
extern "C" {
    pub fn wolfSSL_CTX_set_mode(
        ctx: *mut WOLFSSL_CTX,
        mode: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wolfSSL_CTX_get_mode(ctx: *mut WOLFSSL_CTX) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wolfSSL_CTX_set_default_read_ahead(ctx: *mut WOLFSSL_CTX, m: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wolfSSL_SSL_get_mode(ssl: *mut WOLFSSL) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wolfSSL_CTX_set_default_verify_paths(arg1: *mut WOLFSSL_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CTX_set_session_id_context(
        arg1: *mut WOLFSSL_CTX,
        arg2: *const ::std::os::raw::c_uchar,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_get_peer_certificate(ssl: *mut WOLFSSL) -> *mut WOLFSSL_X509;
}
extern "C" {
    pub fn wolfSSL_want_read(arg1: *mut WOLFSSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_want_write(arg1: *mut WOLFSSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_BIO_printf(
        arg1: *mut WOLFSSL_BIO,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_ASN1_UTCTIME_print(
        arg1: *mut WOLFSSL_BIO,
        arg2: *const WOLFSSL_ASN1_TIME,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_ASN1_GENERALIZEDTIME_print(
        arg1: *mut WOLFSSL_BIO,
        arg2: *const WOLFSSL_ASN1_TIME,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_sk_num(arg1: *mut WOLFSSL_X509_REVOKED) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_sk_value(
        arg1: *mut WOLFSSL_X509_REVOKED,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn wolfSSL_CTX_get_ex_data(
        arg1: *const WOLFSSL_CTX,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn wolfSSL_CTX_set_ex_data(
        arg1: *mut WOLFSSL_CTX,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CTX_sess_set_get_cb(
        arg1: *mut WOLFSSL_CTX,
        f: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut WOLFSSL,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: ::std::os::raw::c_int,
                arg4: *mut ::std::os::raw::c_int,
            ) -> *mut WOLFSSL_SESSION,
        >,
    );
}
extern "C" {
    pub fn wolfSSL_CTX_sess_set_new_cb(
        arg1: *mut WOLFSSL_CTX,
        f: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut WOLFSSL,
                arg2: *mut WOLFSSL_SESSION,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn wolfSSL_CTX_sess_set_remove_cb(
        arg1: *mut WOLFSSL_CTX,
        f: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut WOLFSSL_CTX, arg2: *mut WOLFSSL_SESSION),
        >,
    );
}
extern "C" {
    pub fn wolfSSL_i2d_SSL_SESSION(
        arg1: *mut WOLFSSL_SESSION,
        arg2: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_d2i_SSL_SESSION(
        arg1: *mut *mut WOLFSSL_SESSION,
        arg2: *mut *const ::std::os::raw::c_uchar,
        arg3: ::std::os::raw::c_long,
    ) -> *mut WOLFSSL_SESSION;
}
extern "C" {
    pub fn wolfSSL_SESSION_get_timeout(arg1: *const WOLFSSL_SESSION) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wolfSSL_SESSION_get_time(arg1: *const WOLFSSL_SESSION) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wolfSSL_CTX_get_ex_new_index(
        arg1: ::std::os::raw::c_long,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
        arg5: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_check_domain_name(
        ssl: *mut WOLFSSL,
        dn: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_Init() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_Cleanup() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_lib_version() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wolfSSL_lib_version_hex() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn wolfSSL_Debugging_ON() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_Debugging_OFF();
}
extern "C" {
    pub fn wolfSSL_negotiate(ssl: *mut WOLFSSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_set_compression(ssl: *mut WOLFSSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_set_timeout(
        arg1: *mut WOLFSSL,
        arg2: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CTX_set_timeout(
        arg1: *mut WOLFSSL_CTX,
        arg2: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_get_peer_chain(ssl: *mut WOLFSSL) -> *mut WOLFSSL_X509_CHAIN;
}
extern "C" {
    pub fn wolfSSL_get_chain_count(chain: *mut WOLFSSL_X509_CHAIN) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_get_chain_length(
        arg1: *mut WOLFSSL_X509_CHAIN,
        idx: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_get_chain_cert(
        arg1: *mut WOLFSSL_X509_CHAIN,
        idx: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn wolfSSL_get_chain_X509(
        arg1: *mut WOLFSSL_X509_CHAIN,
        idx: ::std::os::raw::c_int,
    ) -> *mut WOLFSSL_X509;
}
extern "C" {
    pub fn wolfSSL_FreeX509(arg1: *mut WOLFSSL_X509);
}
extern "C" {
    pub fn wolfSSL_get_chain_cert_pem(
        arg1: *mut WOLFSSL_X509_CHAIN,
        idx: ::std::os::raw::c_int,
        buf: *mut ::std::os::raw::c_uchar,
        inLen: ::std::os::raw::c_int,
        outLen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_get_sessionID(s: *const WOLFSSL_SESSION) -> *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn wolfSSL_X509_get_serial_number(
        arg1: *mut WOLFSSL_X509,
        arg2: *mut ::std::os::raw::c_uchar,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_X509_get_subjectCN(arg1: *mut WOLFSSL_X509) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn wolfSSL_X509_get_der(
        arg1: *mut WOLFSSL_X509,
        arg2: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn wolfSSL_X509_notBefore(arg1: *mut WOLFSSL_X509) -> *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn wolfSSL_X509_notAfter(arg1: *mut WOLFSSL_X509) -> *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn wolfSSL_X509_version(arg1: *mut WOLFSSL_X509) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_cmp_peer_cert_to_file(
        arg1: *mut WOLFSSL,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_X509_get_next_altname(arg1: *mut WOLFSSL_X509) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn wolfSSL_X509_d2i(
        x509: *mut *mut WOLFSSL_X509,
        in_: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> *mut WOLFSSL_X509;
}
extern "C" {
    pub fn wolfSSL_X509_d2i_fp(x509: *mut *mut WOLFSSL_X509, file: *mut FILE) -> *mut WOLFSSL_X509;
}
extern "C" {
    pub fn wolfSSL_X509_load_certificate_file(
        fname: *const ::std::os::raw::c_char,
        format: ::std::os::raw::c_int,
    ) -> *mut WOLFSSL_X509;
}
extern "C" {
    pub fn wolfSSL_X509_load_certificate_buffer(
        buf: *const ::std::os::raw::c_uchar,
        sz: ::std::os::raw::c_int,
        format: ::std::os::raw::c_int,
    ) -> *mut WOLFSSL_X509;
}
extern "C" {
    pub fn wolfSSL_connect_cert(ssl: *mut WOLFSSL) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WC_PKCS12 {
    _unused: [u8; 0],
}
extern "C" {
    pub fn wolfSSL_d2i_PKCS12_bio(
        bio: *mut WOLFSSL_BIO,
        pkcs12: *mut *mut WC_PKCS12,
    ) -> *mut WC_PKCS12;
}
extern "C" {
    pub fn wolfSSL_PKCS12_parse(
        pkcs12: *mut WC_PKCS12,
        psw: *const ::std::os::raw::c_char,
        pkey: *mut *mut WOLFSSL_EVP_PKEY,
        cert: *mut *mut WOLFSSL_X509,
        ca: *mut *mut WOLFSSL_STACK,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_PKCS12_PBE_add();
}
extern "C" {
    pub fn wolfSSL_SetTmpDH(
        arg1: *mut WOLFSSL,
        p: *const ::std::os::raw::c_uchar,
        pSz: ::std::os::raw::c_int,
        g: *const ::std::os::raw::c_uchar,
        gSz: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_SetTmpDH_buffer(
        arg1: *mut WOLFSSL,
        b: *const ::std::os::raw::c_uchar,
        sz: ::std::os::raw::c_long,
        format: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_SetTmpDH_file(
        arg1: *mut WOLFSSL,
        f: *const ::std::os::raw::c_char,
        format: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CTX_SetTmpDH(
        arg1: *mut WOLFSSL_CTX,
        p: *const ::std::os::raw::c_uchar,
        pSz: ::std::os::raw::c_int,
        g: *const ::std::os::raw::c_uchar,
        gSz: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CTX_SetTmpDH_buffer(
        arg1: *mut WOLFSSL_CTX,
        b: *const ::std::os::raw::c_uchar,
        sz: ::std::os::raw::c_long,
        format: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CTX_SetTmpDH_file(
        arg1: *mut WOLFSSL_CTX,
        f: *const ::std::os::raw::c_char,
        format: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CTX_SetMinDhKey_Sz(
        arg1: *mut WOLFSSL_CTX,
        arg2: ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_SetMinDhKey_Sz(
        arg1: *mut WOLFSSL,
        arg2: ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_GetDhKey_Sz(arg1: *mut WOLFSSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CTX_SetMinRsaKey_Sz(
        arg1: *mut WOLFSSL_CTX,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_SetMinRsaKey_Sz(
        arg1: *mut WOLFSSL,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_SetTmpEC_DHE_Sz(
        arg1: *mut WOLFSSL,
        arg2: ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CTX_SetTmpEC_DHE_Sz(
        arg1: *mut WOLFSSL_CTX,
        arg2: ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_get_keyblock_size(arg1: *mut WOLFSSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_get_keys(
        arg1: *mut WOLFSSL,
        ms: *mut *mut ::std::os::raw::c_uchar,
        msLen: *mut ::std::os::raw::c_uint,
        sr: *mut *mut ::std::os::raw::c_uchar,
        srLen: *mut ::std::os::raw::c_uint,
        cr: *mut *mut ::std::os::raw::c_uchar,
        crLen: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_make_eap_keys(
        arg1: *mut WOLFSSL,
        key: *mut ::std::os::raw::c_void,
        len: ::std::os::raw::c_uint,
        label: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readv(
        __fd: ::std::os::raw::c_int,
        __iovec: *const iovec,
        __count: ::std::os::raw::c_int,
    ) -> ssize_t;
}
extern "C" {
    pub fn writev(
        __fd: ::std::os::raw::c_int,
        __iovec: *const iovec,
        __count: ::std::os::raw::c_int,
    ) -> ssize_t;
}
extern "C" {
    pub fn preadv(
        __fd: ::std::os::raw::c_int,
        __iovec: *const iovec,
        __count: ::std::os::raw::c_int,
        __offset: __off_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn pwritev(
        __fd: ::std::os::raw::c_int,
        __iovec: *const iovec,
        __count: ::std::os::raw::c_int,
        __offset: __off_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn wolfSSL_writev(
        ssl: *mut WOLFSSL,
        iov: *const iovec,
        iovcnt: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CTX_UnloadCAs(arg1: *mut WOLFSSL_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CTX_load_verify_buffer(
        arg1: *mut WOLFSSL_CTX,
        arg2: *const ::std::os::raw::c_uchar,
        arg3: ::std::os::raw::c_long,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CTX_use_certificate_buffer(
        arg1: *mut WOLFSSL_CTX,
        arg2: *const ::std::os::raw::c_uchar,
        arg3: ::std::os::raw::c_long,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CTX_use_PrivateKey_buffer(
        arg1: *mut WOLFSSL_CTX,
        arg2: *const ::std::os::raw::c_uchar,
        arg3: ::std::os::raw::c_long,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CTX_use_certificate_chain_buffer_format(
        arg1: *mut WOLFSSL_CTX,
        arg2: *const ::std::os::raw::c_uchar,
        arg3: ::std::os::raw::c_long,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CTX_use_certificate_chain_buffer(
        arg1: *mut WOLFSSL_CTX,
        arg2: *const ::std::os::raw::c_uchar,
        arg3: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_use_certificate_buffer(
        arg1: *mut WOLFSSL,
        arg2: *const ::std::os::raw::c_uchar,
        arg3: ::std::os::raw::c_long,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_use_PrivateKey_buffer(
        arg1: *mut WOLFSSL,
        arg2: *const ::std::os::raw::c_uchar,
        arg3: ::std::os::raw::c_long,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_use_certificate_chain_buffer_format(
        arg1: *mut WOLFSSL,
        arg2: *const ::std::os::raw::c_uchar,
        arg3: ::std::os::raw::c_long,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_use_certificate_chain_buffer(
        arg1: *mut WOLFSSL,
        arg2: *const ::std::os::raw::c_uchar,
        arg3: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_UnloadCertsKeys(arg1: *mut WOLFSSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CTX_set_group_messages(arg1: *mut WOLFSSL_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_set_group_messages(arg1: *mut WOLFSSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_DTLS_SetCookieSecret(
        arg1: *mut WOLFSSL,
        arg2: *const ::std::os::raw::c_uchar,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub const IOerrors_WOLFSSL_CBIO_ERR_GENERAL: IOerrors = -1;
pub const IOerrors_WOLFSSL_CBIO_ERR_WANT_READ: IOerrors = -2;
pub const IOerrors_WOLFSSL_CBIO_ERR_WANT_WRITE: IOerrors = -2;
pub const IOerrors_WOLFSSL_CBIO_ERR_CONN_RST: IOerrors = -3;
pub const IOerrors_WOLFSSL_CBIO_ERR_ISR: IOerrors = -4;
pub const IOerrors_WOLFSSL_CBIO_ERR_CONN_CLOSE: IOerrors = -5;
pub const IOerrors_WOLFSSL_CBIO_ERR_TIMEOUT: IOerrors = -6;
pub type IOerrors = ::std::os::raw::c_int;
pub const WOLFSSL_SSLV3: ::std::os::raw::c_uint = 0;
pub const WOLFSSL_TLSV1: ::std::os::raw::c_uint = 1;
pub const WOLFSSL_TLSV1_1: ::std::os::raw::c_uint = 2;
pub const WOLFSSL_TLSV1_2: ::std::os::raw::c_uint = 3;
pub const WOLFSSL_TLSV1_3: ::std::os::raw::c_uint = 4;
pub const WOLFSSL_USER_CA: ::std::os::raw::c_uint = 1;
pub const WOLFSSL_CHAIN_CA: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_12 = ::std::os::raw::c_uint;
extern "C" {
    pub fn wolfSSL_GetRNG(arg1: *mut WOLFSSL) -> *mut WC_RNG;
}
extern "C" {
    pub fn wolfSSL_CTX_SetMinVersion(
        ctx: *mut WOLFSSL_CTX,
        version: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_SetMinVersion(
        ssl: *mut WOLFSSL,
        version: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_GetObjectSize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CTX_GetObjectSize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_METHOD_GetObjectSize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_GetOutputSize(
        arg1: *mut WOLFSSL,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_GetMaxOutputSize(arg1: *mut WOLFSSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_GetVersion(ssl: *mut WOLFSSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_SetVersion(
        ssl: *mut WOLFSSL,
        version: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_KeyPemToDer(
        arg1: *const ::std::os::raw::c_uchar,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_uchar,
        arg4: ::std::os::raw::c_int,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CertPemToDer(
        arg1: *const ::std::os::raw::c_uchar,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_uchar,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type CallbackCACache = ::std::option::Option<
    unsafe extern "C" fn(
        der: *mut ::std::os::raw::c_uchar,
        sz: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
    ),
>;
pub type CbMissingCRL =
    ::std::option::Option<unsafe extern "C" fn(url: *const ::std::os::raw::c_char)>;
pub type CbOCSPIO = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_uchar,
        arg5: ::std::os::raw::c_int,
        arg6: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int,
>;
pub type CbOCSPRespFree = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: *mut ::std::os::raw::c_uchar),
>;
pub type CallbackMacEncrypt = ::std::option::Option<
    unsafe extern "C" fn(
        ssl: *mut WOLFSSL,
        macOut: *mut ::std::os::raw::c_uchar,
        macIn: *const ::std::os::raw::c_uchar,
        macInSz: ::std::os::raw::c_uint,
        macContent: ::std::os::raw::c_int,
        macVerify: ::std::os::raw::c_int,
        encOut: *mut ::std::os::raw::c_uchar,
        encIn: *const ::std::os::raw::c_uchar,
        encSz: ::std::os::raw::c_uint,
        ctx: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn wolfSSL_CTX_SetMacEncryptCb(arg1: *mut WOLFSSL_CTX, arg2: CallbackMacEncrypt);
}
extern "C" {
    pub fn wolfSSL_SetMacEncryptCtx(ssl: *mut WOLFSSL, ctx: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn wolfSSL_GetMacEncryptCtx(ssl: *mut WOLFSSL) -> *mut ::std::os::raw::c_void;
}
pub type CallbackDecryptVerify = ::std::option::Option<
    unsafe extern "C" fn(
        ssl: *mut WOLFSSL,
        decOut: *mut ::std::os::raw::c_uchar,
        decIn: *const ::std::os::raw::c_uchar,
        decSz: ::std::os::raw::c_uint,
        content: ::std::os::raw::c_int,
        verify: ::std::os::raw::c_int,
        padSz: *mut ::std::os::raw::c_uint,
        ctx: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn wolfSSL_CTX_SetDecryptVerifyCb(arg1: *mut WOLFSSL_CTX, arg2: CallbackDecryptVerify);
}
extern "C" {
    pub fn wolfSSL_SetDecryptVerifyCtx(ssl: *mut WOLFSSL, ctx: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn wolfSSL_GetDecryptVerifyCtx(ssl: *mut WOLFSSL) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn wolfSSL_GetMacSecret(
        arg1: *mut WOLFSSL,
        arg2: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn wolfSSL_GetClientWriteKey(arg1: *mut WOLFSSL) -> *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn wolfSSL_GetClientWriteIV(arg1: *mut WOLFSSL) -> *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn wolfSSL_GetServerWriteKey(arg1: *mut WOLFSSL) -> *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn wolfSSL_GetServerWriteIV(arg1: *mut WOLFSSL) -> *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn wolfSSL_GetKeySize(arg1: *mut WOLFSSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_GetIVSize(arg1: *mut WOLFSSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_GetSide(arg1: *mut WOLFSSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_IsTLSv1_1(arg1: *mut WOLFSSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_GetBulkCipher(arg1: *mut WOLFSSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_GetCipherBlockSize(arg1: *mut WOLFSSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_GetAeadMacSize(arg1: *mut WOLFSSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_GetHmacSize(arg1: *mut WOLFSSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_GetHmacType(arg1: *mut WOLFSSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_GetCipherType(arg1: *mut WOLFSSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_SetTlsHmacInner(
        arg1: *mut WOLFSSL,
        arg2: *mut ::std::os::raw::c_uchar,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const WOLFSSL_SERVER_END: ::std::os::raw::c_uint = 0;
pub const WOLFSSL_CLIENT_END: ::std::os::raw::c_uint = 1;
pub const WOLFSSL_NEITHER_END: ::std::os::raw::c_uint = 3;
pub const WOLFSSL_BLOCK_TYPE: ::std::os::raw::c_uint = 2;
pub const WOLFSSL_STREAM_TYPE: ::std::os::raw::c_uint = 3;
pub const WOLFSSL_AEAD_TYPE: ::std::os::raw::c_uint = 4;
pub const WOLFSSL_TLS_HMAC_INNER_SZ: ::std::os::raw::c_uint = 13;
pub type _bindgen_ty_13 = ::std::os::raw::c_uint;
pub const BulkCipherAlgorithm_wolfssl_cipher_null: BulkCipherAlgorithm = 0;
pub const BulkCipherAlgorithm_wolfssl_rc4: BulkCipherAlgorithm = 1;
pub const BulkCipherAlgorithm_wolfssl_rc2: BulkCipherAlgorithm = 2;
pub const BulkCipherAlgorithm_wolfssl_des: BulkCipherAlgorithm = 3;
pub const BulkCipherAlgorithm_wolfssl_triple_des: BulkCipherAlgorithm = 4;
pub const BulkCipherAlgorithm_wolfssl_des40: BulkCipherAlgorithm = 5;
pub const BulkCipherAlgorithm_wolfssl_idea: BulkCipherAlgorithm = 6;
pub const BulkCipherAlgorithm_wolfssl_aes: BulkCipherAlgorithm = 7;
pub const BulkCipherAlgorithm_wolfssl_aes_gcm: BulkCipherAlgorithm = 8;
pub const BulkCipherAlgorithm_wolfssl_aes_ccm: BulkCipherAlgorithm = 9;
pub const BulkCipherAlgorithm_wolfssl_chacha: BulkCipherAlgorithm = 10;
pub const BulkCipherAlgorithm_wolfssl_camellia: BulkCipherAlgorithm = 11;
pub const BulkCipherAlgorithm_wolfssl_hc128: BulkCipherAlgorithm = 12;
pub const BulkCipherAlgorithm_wolfssl_rabbit: BulkCipherAlgorithm = 13;
pub type BulkCipherAlgorithm = ::std::os::raw::c_uint;
pub const KDF_MacAlgorithm_wolfssl_sha256: KDF_MacAlgorithm = 4;
pub const KDF_MacAlgorithm_wolfssl_sha384: KDF_MacAlgorithm = 5;
pub const KDF_MacAlgorithm_wolfssl_sha512: KDF_MacAlgorithm = 6;
pub type KDF_MacAlgorithm = ::std::os::raw::c_uint;
pub type CallbackEccSign = ::std::option::Option<
    unsafe extern "C" fn(
        ssl: *mut WOLFSSL,
        in_: *const ::std::os::raw::c_uchar,
        inSz: ::std::os::raw::c_uint,
        out: *mut ::std::os::raw::c_uchar,
        outSz: *mut ::std::os::raw::c_uint,
        keyDer: *const ::std::os::raw::c_uchar,
        keySz: ::std::os::raw::c_uint,
        ctx: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn wolfSSL_CTX_SetEccSignCb(arg1: *mut WOLFSSL_CTX, arg2: CallbackEccSign);
}
extern "C" {
    pub fn wolfSSL_SetEccSignCtx(ssl: *mut WOLFSSL, ctx: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn wolfSSL_GetEccSignCtx(ssl: *mut WOLFSSL) -> *mut ::std::os::raw::c_void;
}
pub type CallbackEccVerify = ::std::option::Option<
    unsafe extern "C" fn(
        ssl: *mut WOLFSSL,
        sig: *const ::std::os::raw::c_uchar,
        sigSz: ::std::os::raw::c_uint,
        hash: *const ::std::os::raw::c_uchar,
        hashSz: ::std::os::raw::c_uint,
        keyDer: *const ::std::os::raw::c_uchar,
        keySz: ::std::os::raw::c_uint,
        result: *mut ::std::os::raw::c_int,
        ctx: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn wolfSSL_CTX_SetEccVerifyCb(arg1: *mut WOLFSSL_CTX, arg2: CallbackEccVerify);
}
extern "C" {
    pub fn wolfSSL_SetEccVerifyCtx(ssl: *mut WOLFSSL, ctx: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn wolfSSL_GetEccVerifyCtx(ssl: *mut WOLFSSL) -> *mut ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecc_key {
    _unused: [u8; 0],
}
pub type CallbackEccSharedSecret = ::std::option::Option<
    unsafe extern "C" fn(
        ssl: *mut WOLFSSL,
        otherKey: *mut ecc_key,
        pubKeyDer: *mut ::std::os::raw::c_uchar,
        pubKeySz: *mut ::std::os::raw::c_uint,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_uint,
        side: ::std::os::raw::c_int,
        ctx: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn wolfSSL_CTX_SetEccSharedSecretCb(arg1: *mut WOLFSSL_CTX, arg2: CallbackEccSharedSecret);
}
extern "C" {
    pub fn wolfSSL_SetEccSharedSecretCtx(ssl: *mut WOLFSSL, ctx: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn wolfSSL_GetEccSharedSecretCtx(ssl: *mut WOLFSSL) -> *mut ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ed25519_key {
    _unused: [u8; 0],
}
pub type CallbackEd25519Sign = ::std::option::Option<
    unsafe extern "C" fn(
        ssl: *mut WOLFSSL,
        in_: *const ::std::os::raw::c_uchar,
        inSz: ::std::os::raw::c_uint,
        out: *mut ::std::os::raw::c_uchar,
        outSz: *mut ::std::os::raw::c_uint,
        keyDer: *const ::std::os::raw::c_uchar,
        keySz: ::std::os::raw::c_uint,
        ctx: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn wolfSSL_CTX_SetEd25519SignCb(arg1: *mut WOLFSSL_CTX, arg2: CallbackEd25519Sign);
}
extern "C" {
    pub fn wolfSSL_SetEd25519SignCtx(ssl: *mut WOLFSSL, ctx: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn wolfSSL_GetEd25519SignCtx(ssl: *mut WOLFSSL) -> *mut ::std::os::raw::c_void;
}
pub type CallbackEd25519Verify = ::std::option::Option<
    unsafe extern "C" fn(
        ssl: *mut WOLFSSL,
        sig: *const ::std::os::raw::c_uchar,
        sigSz: ::std::os::raw::c_uint,
        msg: *const ::std::os::raw::c_uchar,
        msgSz: ::std::os::raw::c_uint,
        keyDer: *const ::std::os::raw::c_uchar,
        keySz: ::std::os::raw::c_uint,
        result: *mut ::std::os::raw::c_int,
        ctx: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn wolfSSL_CTX_SetEd25519VerifyCb(arg1: *mut WOLFSSL_CTX, arg2: CallbackEd25519Verify);
}
extern "C" {
    pub fn wolfSSL_SetEd25519VerifyCtx(ssl: *mut WOLFSSL, ctx: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn wolfSSL_GetEd25519VerifyCtx(ssl: *mut WOLFSSL) -> *mut ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct curve25519_key {
    _unused: [u8; 0],
}
pub type CallbackX25519SharedSecret = ::std::option::Option<
    unsafe extern "C" fn(
        ssl: *mut WOLFSSL,
        otherKey: *mut curve25519_key,
        pubKeyDer: *mut ::std::os::raw::c_uchar,
        pubKeySz: *mut ::std::os::raw::c_uint,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_uint,
        side: ::std::os::raw::c_int,
        ctx: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn wolfSSL_CTX_SetX25519SharedSecretCb(
        arg1: *mut WOLFSSL_CTX,
        arg2: CallbackX25519SharedSecret,
    );
}
extern "C" {
    pub fn wolfSSL_SetX25519SharedSecretCtx(ssl: *mut WOLFSSL, ctx: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn wolfSSL_GetX25519SharedSecretCtx(ssl: *mut WOLFSSL) -> *mut ::std::os::raw::c_void;
}
pub type CallbackRsaSign = ::std::option::Option<
    unsafe extern "C" fn(
        ssl: *mut WOLFSSL,
        in_: *const ::std::os::raw::c_uchar,
        inSz: ::std::os::raw::c_uint,
        out: *mut ::std::os::raw::c_uchar,
        outSz: *mut ::std::os::raw::c_uint,
        keyDer: *const ::std::os::raw::c_uchar,
        keySz: ::std::os::raw::c_uint,
        ctx: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn wolfSSL_CTX_SetRsaSignCb(arg1: *mut WOLFSSL_CTX, arg2: CallbackRsaSign);
}
extern "C" {
    pub fn wolfSSL_SetRsaSignCtx(ssl: *mut WOLFSSL, ctx: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn wolfSSL_GetRsaSignCtx(ssl: *mut WOLFSSL) -> *mut ::std::os::raw::c_void;
}
pub type CallbackRsaVerify = ::std::option::Option<
    unsafe extern "C" fn(
        ssl: *mut WOLFSSL,
        sig: *mut ::std::os::raw::c_uchar,
        sigSz: ::std::os::raw::c_uint,
        out: *mut *mut ::std::os::raw::c_uchar,
        keyDer: *const ::std::os::raw::c_uchar,
        keySz: ::std::os::raw::c_uint,
        ctx: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn wolfSSL_CTX_SetRsaVerifyCb(arg1: *mut WOLFSSL_CTX, arg2: CallbackRsaVerify);
}
extern "C" {
    pub fn wolfSSL_SetRsaVerifyCtx(ssl: *mut WOLFSSL, ctx: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn wolfSSL_GetRsaVerifyCtx(ssl: *mut WOLFSSL) -> *mut ::std::os::raw::c_void;
}
pub type CallbackRsaEnc = ::std::option::Option<
    unsafe extern "C" fn(
        ssl: *mut WOLFSSL,
        in_: *const ::std::os::raw::c_uchar,
        inSz: ::std::os::raw::c_uint,
        out: *mut ::std::os::raw::c_uchar,
        outSz: *mut ::std::os::raw::c_uint,
        keyDer: *const ::std::os::raw::c_uchar,
        keySz: ::std::os::raw::c_uint,
        ctx: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn wolfSSL_CTX_SetRsaEncCb(arg1: *mut WOLFSSL_CTX, arg2: CallbackRsaEnc);
}
extern "C" {
    pub fn wolfSSL_SetRsaEncCtx(ssl: *mut WOLFSSL, ctx: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn wolfSSL_GetRsaEncCtx(ssl: *mut WOLFSSL) -> *mut ::std::os::raw::c_void;
}
pub type CallbackRsaDec = ::std::option::Option<
    unsafe extern "C" fn(
        ssl: *mut WOLFSSL,
        in_: *mut ::std::os::raw::c_uchar,
        inSz: ::std::os::raw::c_uint,
        out: *mut *mut ::std::os::raw::c_uchar,
        keyDer: *const ::std::os::raw::c_uchar,
        keySz: ::std::os::raw::c_uint,
        ctx: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn wolfSSL_CTX_SetRsaDecCb(arg1: *mut WOLFSSL_CTX, arg2: CallbackRsaDec);
}
extern "C" {
    pub fn wolfSSL_SetRsaDecCtx(ssl: *mut WOLFSSL, ctx: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn wolfSSL_GetRsaDecCtx(ssl: *mut WOLFSSL) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn wolfSSL_CTX_SetCACb(arg1: *mut WOLFSSL_CTX, arg2: CallbackCACache);
}
extern "C" {
    pub fn wolfSSL_CTX_GetCertManager(arg1: *mut WOLFSSL_CTX) -> *mut WOLFSSL_CERT_MANAGER;
}
extern "C" {
    pub fn wolfSSL_CertManagerNew_ex(
        heap: *mut ::std::os::raw::c_void,
    ) -> *mut WOLFSSL_CERT_MANAGER;
}
extern "C" {
    pub fn wolfSSL_CertManagerNew() -> *mut WOLFSSL_CERT_MANAGER;
}
extern "C" {
    pub fn wolfSSL_CertManagerFree(arg1: *mut WOLFSSL_CERT_MANAGER);
}
extern "C" {
    pub fn wolfSSL_CertManagerLoadCA(
        arg1: *mut WOLFSSL_CERT_MANAGER,
        f: *const ::std::os::raw::c_char,
        d: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CertManagerLoadCABuffer(
        arg1: *mut WOLFSSL_CERT_MANAGER,
        in_: *const ::std::os::raw::c_uchar,
        sz: ::std::os::raw::c_long,
        format: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CertManagerUnloadCAs(cm: *mut WOLFSSL_CERT_MANAGER) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CertManagerVerify(
        arg1: *mut WOLFSSL_CERT_MANAGER,
        f: *const ::std::os::raw::c_char,
        format: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CertManagerVerifyBuffer(
        cm: *mut WOLFSSL_CERT_MANAGER,
        buff: *const ::std::os::raw::c_uchar,
        sz: ::std::os::raw::c_long,
        format: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CertManagerCheckCRL(
        arg1: *mut WOLFSSL_CERT_MANAGER,
        arg2: *mut ::std::os::raw::c_uchar,
        sz: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CertManagerEnableCRL(
        arg1: *mut WOLFSSL_CERT_MANAGER,
        options: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CertManagerDisableCRL(arg1: *mut WOLFSSL_CERT_MANAGER) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CertManagerLoadCRL(
        arg1: *mut WOLFSSL_CERT_MANAGER,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CertManagerLoadCRLBuffer(
        arg1: *mut WOLFSSL_CERT_MANAGER,
        arg2: *const ::std::os::raw::c_uchar,
        sz: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CertManagerSetCRL_Cb(
        arg1: *mut WOLFSSL_CERT_MANAGER,
        arg2: CbMissingCRL,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CertManagerCheckOCSP(
        arg1: *mut WOLFSSL_CERT_MANAGER,
        arg2: *mut ::std::os::raw::c_uchar,
        sz: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CertManagerEnableOCSP(
        arg1: *mut WOLFSSL_CERT_MANAGER,
        options: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CertManagerDisableOCSP(arg1: *mut WOLFSSL_CERT_MANAGER)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CertManagerSetOCSPOverrideURL(
        arg1: *mut WOLFSSL_CERT_MANAGER,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CertManagerSetOCSP_Cb(
        arg1: *mut WOLFSSL_CERT_MANAGER,
        arg2: CbOCSPIO,
        arg3: CbOCSPRespFree,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CertManagerEnableOCSPStapling(
        cm: *mut WOLFSSL_CERT_MANAGER,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CertManagerDisableOCSPStapling(
        cm: *mut WOLFSSL_CERT_MANAGER,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_EnableCRL(
        ssl: *mut WOLFSSL,
        options: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_DisableCRL(ssl: *mut WOLFSSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_LoadCRL(
        arg1: *mut WOLFSSL,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_LoadCRLBuffer(
        arg1: *mut WOLFSSL,
        arg2: *const ::std::os::raw::c_uchar,
        sz: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_SetCRL_Cb(arg1: *mut WOLFSSL, arg2: CbMissingCRL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_EnableOCSP(
        arg1: *mut WOLFSSL,
        options: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_DisableOCSP(arg1: *mut WOLFSSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_SetOCSP_OverrideURL(
        arg1: *mut WOLFSSL,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_SetOCSP_Cb(
        arg1: *mut WOLFSSL,
        arg2: CbOCSPIO,
        arg3: CbOCSPRespFree,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_EnableOCSPStapling(arg1: *mut WOLFSSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_DisableOCSPStapling(arg1: *mut WOLFSSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CTX_EnableCRL(
        ctx: *mut WOLFSSL_CTX,
        options: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CTX_DisableCRL(ctx: *mut WOLFSSL_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CTX_LoadCRL(
        arg1: *mut WOLFSSL_CTX,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CTX_LoadCRLBuffer(
        arg1: *mut WOLFSSL_CTX,
        arg2: *const ::std::os::raw::c_uchar,
        sz: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CTX_SetCRL_Cb(
        arg1: *mut WOLFSSL_CTX,
        arg2: CbMissingCRL,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CTX_EnableOCSP(
        arg1: *mut WOLFSSL_CTX,
        options: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CTX_DisableOCSP(arg1: *mut WOLFSSL_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CTX_SetOCSP_OverrideURL(
        arg1: *mut WOLFSSL_CTX,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CTX_SetOCSP_Cb(
        arg1: *mut WOLFSSL_CTX,
        arg2: CbOCSPIO,
        arg3: CbOCSPRespFree,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CTX_EnableOCSPStapling(arg1: *mut WOLFSSL_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CTX_DisableOCSPStapling(arg1: *mut WOLFSSL_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_KeepArrays(arg1: *mut WOLFSSL);
}
extern "C" {
    pub fn wolfSSL_FreeArrays(arg1: *mut WOLFSSL);
}
extern "C" {
    pub fn wolfSSL_KeepHandshakeResources(ssl: *mut WOLFSSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_FreeHandshakeResources(ssl: *mut WOLFSSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CTX_UseClientSuites(ctx: *mut WOLFSSL_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_UseClientSuites(ssl: *mut WOLFSSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_UseAsync(
        arg1: *mut WOLFSSL,
        devId: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CTX_UseAsync(
        arg1: *mut WOLFSSL_CTX,
        devId: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CTX_GetDevId(ctx: *mut WOLFSSL_CTX, ssl: *mut WOLFSSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CTX_GetHeap(
        ctx: *mut WOLFSSL_CTX,
        ssl: *mut WOLFSSL,
    ) -> *mut ::std::os::raw::c_void;
}
pub const WOLFSSL_CSR_OCSP: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_14 = ::std::os::raw::c_uint;
pub const WOLFSSL_CSR_OCSP_USE_NONCE: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_15 = ::std::os::raw::c_uint;
pub const WOLFSSL_CSR2_OCSP: ::std::os::raw::c_uint = 1;
pub const WOLFSSL_CSR2_OCSP_MULTI: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_16 = ::std::os::raw::c_uint;
pub const WOLFSSL_CSR2_OCSP_USE_NONCE: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_17 = ::std::os::raw::c_uint;
pub const WOLFSSL_ECC_SECP160K1: ::std::os::raw::c_uint = 15;
pub const WOLFSSL_ECC_SECP160R1: ::std::os::raw::c_uint = 16;
pub const WOLFSSL_ECC_SECP160R2: ::std::os::raw::c_uint = 17;
pub const WOLFSSL_ECC_SECP192K1: ::std::os::raw::c_uint = 18;
pub const WOLFSSL_ECC_SECP192R1: ::std::os::raw::c_uint = 19;
pub const WOLFSSL_ECC_SECP224K1: ::std::os::raw::c_uint = 20;
pub const WOLFSSL_ECC_SECP224R1: ::std::os::raw::c_uint = 21;
pub const WOLFSSL_ECC_SECP256K1: ::std::os::raw::c_uint = 22;
pub const WOLFSSL_ECC_SECP256R1: ::std::os::raw::c_uint = 23;
pub const WOLFSSL_ECC_SECP384R1: ::std::os::raw::c_uint = 24;
pub const WOLFSSL_ECC_SECP521R1: ::std::os::raw::c_uint = 25;
pub const WOLFSSL_ECC_BRAINPOOLP256R1: ::std::os::raw::c_uint = 26;
pub const WOLFSSL_ECC_BRAINPOOLP384R1: ::std::os::raw::c_uint = 27;
pub const WOLFSSL_ECC_BRAINPOOLP512R1: ::std::os::raw::c_uint = 28;
pub const WOLFSSL_ECC_X25519: ::std::os::raw::c_uint = 29;
pub type _bindgen_ty_18 = ::std::os::raw::c_uint;
pub const WOLFSSL_EC_PF_UNCOMPRESSED: ::std::os::raw::c_uint = 0;
pub type _bindgen_ty_19 = ::std::os::raw::c_uint;
extern "C" {
    pub fn wolfSSL_DisableExtendedMasterSecret(ssl: *mut WOLFSSL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CTX_DisableExtendedMasterSecret(ctx: *mut WOLFSSL_CTX) -> ::std::os::raw::c_int;
}
pub type HandShakeDoneCb = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut WOLFSSL,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn wolfSSL_SetHsDoneCb(
        arg1: *mut WOLFSSL,
        arg2: HandShakeDoneCb,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_PrintSessionStats() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_get_session_stats(
        active: *mut ::std::os::raw::c_uint,
        total: *mut ::std::os::raw::c_uint,
        peak: *mut ::std::os::raw::c_uint,
        maxSessions: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_MakeTlsMasterSecret(
        ms: *mut ::std::os::raw::c_uchar,
        msLen: ::std::os::raw::c_uint,
        pms: *const ::std::os::raw::c_uchar,
        pmsLen: ::std::os::raw::c_uint,
        cr: *const ::std::os::raw::c_uchar,
        sr: *const ::std::os::raw::c_uchar,
        tls1_2: ::std::os::raw::c_int,
        hash_type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_MakeTlsExtendedMasterSecret(
        ms: *mut ::std::os::raw::c_uchar,
        msLen: ::std::os::raw::c_uint,
        pms: *const ::std::os::raw::c_uchar,
        pmsLen: ::std::os::raw::c_uint,
        sHash: *const ::std::os::raw::c_uchar,
        sHashLen: ::std::os::raw::c_uint,
        tls1_2: ::std::os::raw::c_int,
        hash_type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_DeriveTlsKeys(
        key_data: *mut ::std::os::raw::c_uchar,
        keyLen: ::std::os::raw::c_uint,
        ms: *const ::std::os::raw::c_uchar,
        msLen: ::std::os::raw::c_uint,
        sr: *const ::std::os::raw::c_uchar,
        cr: *const ::std::os::raw::c_uchar,
        tls1_2: ::std::os::raw::c_int,
        hash_type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_get0_alpn_selected(
        ssl: *const WOLFSSL,
        data: *mut *const ::std::os::raw::c_uchar,
        len: *mut ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn wolfSSL_select_next_proto(
        out: *mut *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_uchar,
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_uint,
        client: *const ::std::os::raw::c_uchar,
        client_len: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CTX_set_alpn_select_cb(
        ctx: *mut WOLFSSL_CTX,
        cb: ::std::option::Option<
            unsafe extern "C" fn(
                ssl: *mut WOLFSSL,
                out: *mut *const ::std::os::raw::c_uchar,
                outlen: *mut ::std::os::raw::c_uchar,
                in_: *const ::std::os::raw::c_uchar,
                inlen: ::std::os::raw::c_uint,
                arg: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        arg: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn wolfSSL_CTX_set_next_protos_advertised_cb(
        s: *mut WOLFSSL_CTX,
        cb: ::std::option::Option<
            unsafe extern "C" fn(
                ssl: *mut WOLFSSL,
                out: *mut *const ::std::os::raw::c_uchar,
                outlen: *mut ::std::os::raw::c_uint,
                arg: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        arg: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn wolfSSL_CTX_set_next_proto_select_cb(
        s: *mut WOLFSSL_CTX,
        cb: ::std::option::Option<
            unsafe extern "C" fn(
                ssl: *mut WOLFSSL,
                out: *mut *mut ::std::os::raw::c_uchar,
                outlen: *mut ::std::os::raw::c_uchar,
                in_: *const ::std::os::raw::c_uchar,
                inlen: ::std::os::raw::c_uint,
                arg: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        arg: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn wolfSSL_get0_next_proto_negotiated(
        s: *const WOLFSSL,
        data: *mut *const ::std::os::raw::c_uchar,
        len: *mut ::std::os::raw::c_uint,
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sched_param {
    pub sched_priority: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sched_param() {
    assert_eq!(
        ::std::mem::size_of::<sched_param>(),
        4usize,
        concat!("Size of: ", stringify!(sched_param))
    );
    assert_eq!(
        ::std::mem::align_of::<sched_param>(),
        4usize,
        concat!("Alignment of ", stringify!(sched_param))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sched_param>())).sched_priority as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sched_param),
            "::",
            stringify!(sched_priority)
        )
    );
}
pub type __cpu_mask = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct cpu_set_t {
    pub __bits: [__cpu_mask; 16usize],
}
#[test]
fn bindgen_test_layout_cpu_set_t() {
    assert_eq!(
        ::std::mem::size_of::<cpu_set_t>(),
        128usize,
        concat!("Size of: ", stringify!(cpu_set_t))
    );
    assert_eq!(
        ::std::mem::align_of::<cpu_set_t>(),
        8usize,
        concat!("Alignment of ", stringify!(cpu_set_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cpu_set_t>())).__bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cpu_set_t),
            "::",
            stringify!(__bits)
        )
    );
}
extern "C" {
    pub fn __sched_cpucount(__setsize: size_t, __setp: *const cpu_set_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sched_cpualloc(__count: size_t) -> *mut cpu_set_t;
}
extern "C" {
    pub fn __sched_cpufree(__set: *mut cpu_set_t);
}
extern "C" {
    pub fn sched_setparam(__pid: __pid_t, __param: *const sched_param) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_getparam(__pid: __pid_t, __param: *mut sched_param) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_setscheduler(
        __pid: __pid_t,
        __policy: ::std::os::raw::c_int,
        __param: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_getscheduler(__pid: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_yield() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_get_priority_max(__algorithm: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_get_priority_min(__algorithm: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_rr_get_interval(__pid: __pid_t, __t: *mut timespec) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tm() {
    assert_eq!(
        ::std::mem::size_of::<tm>(),
        56usize,
        concat!("Size of: ", stringify!(tm))
    );
    assert_eq!(
        ::std::mem::align_of::<tm>(),
        8usize,
        concat!("Alignment of ", stringify!(tm))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_min as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_hour as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_hour)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mday as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mon as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_year as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_year)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_wday as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_wday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_yday as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_yday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_isdst as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_isdst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_gmtoff as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_gmtoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_zone as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_zone)
        )
    );
}
impl Default for tm {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[test]
fn bindgen_test_layout_itimerspec() {
    assert_eq!(
        ::std::mem::size_of::<itimerspec>(),
        32usize,
        concat!("Size of: ", stringify!(itimerspec))
    );
    assert_eq!(
        ::std::mem::align_of::<itimerspec>(),
        8usize,
        concat!("Alignment of ", stringify!(itimerspec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerspec>())).it_interval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerspec>())).it_value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    assert_eq!(
        ::std::mem::size_of::<__locale_struct>(),
        232usize,
        concat!("Size of: ", stringify!(__locale_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__locale_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__locale_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__locales as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__locales)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_b as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_tolower as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_tolower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_toupper as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_toupper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__names as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__names)
        )
    );
}
impl Default for __locale_struct {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn time(__timer: *mut time_t) -> time_t;
}
extern "C" {
    pub fn difftime(__time1: time_t, __time0: time_t) -> f64;
}
extern "C" {
    pub fn mktime(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: size_t,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
    ) -> size_t;
}
extern "C" {
    pub fn strftime_l(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: size_t,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
        __loc: locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn gmtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn asctime(__tp: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime(__timer: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn asctime_r(
        __tp: *const tm,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime_r(
        __timer: *const time_t,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub static mut __daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut __timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub fn stime(__when: *const time_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timegm(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn timelocal(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nanosleep(
        __requested_time: *const timespec,
        __remaining: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_nanosleep(
        __clock_id: clockid_t,
        __flags: ::std::os::raw::c_int,
        __req: *const timespec,
        __rem: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_create(
        __clock_id: clockid_t,
        __evp: *mut sigevent,
        __timerid: *mut timer_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_delete(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_settime(
        __timerid: timer_t,
        __flags: ::std::os::raw::c_int,
        __value: *const itimerspec,
        __ovalue: *mut itimerspec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_gettime(__timerid: timer_t, __value: *mut itimerspec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_getoverrun(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timespec_get(
        __ts: *mut timespec,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type __jmp_buf = [::std::os::raw::c_long; 8usize];
pub const PTHREAD_CREATE_JOINABLE: ::std::os::raw::c_uint = 0;
pub const PTHREAD_CREATE_DETACHED: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_20 = ::std::os::raw::c_uint;
pub const PTHREAD_MUTEX_TIMED_NP: ::std::os::raw::c_uint = 0;
pub const PTHREAD_MUTEX_RECURSIVE_NP: ::std::os::raw::c_uint = 1;
pub const PTHREAD_MUTEX_ERRORCHECK_NP: ::std::os::raw::c_uint = 2;
pub const PTHREAD_MUTEX_ADAPTIVE_NP: ::std::os::raw::c_uint = 3;
pub const PTHREAD_MUTEX_NORMAL: ::std::os::raw::c_uint = 0;
pub const PTHREAD_MUTEX_RECURSIVE: ::std::os::raw::c_uint = 1;
pub const PTHREAD_MUTEX_ERRORCHECK: ::std::os::raw::c_uint = 2;
pub const PTHREAD_MUTEX_DEFAULT: ::std::os::raw::c_uint = 0;
pub type _bindgen_ty_21 = ::std::os::raw::c_uint;
pub const PTHREAD_MUTEX_STALLED: ::std::os::raw::c_uint = 0;
pub const PTHREAD_MUTEX_STALLED_NP: ::std::os::raw::c_uint = 0;
pub const PTHREAD_MUTEX_ROBUST: ::std::os::raw::c_uint = 1;
pub const PTHREAD_MUTEX_ROBUST_NP: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_22 = ::std::os::raw::c_uint;
pub const PTHREAD_PRIO_NONE: ::std::os::raw::c_uint = 0;
pub const PTHREAD_PRIO_INHERIT: ::std::os::raw::c_uint = 1;
pub const PTHREAD_PRIO_PROTECT: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_23 = ::std::os::raw::c_uint;
pub const PTHREAD_RWLOCK_PREFER_READER_NP: ::std::os::raw::c_uint = 0;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NP: ::std::os::raw::c_uint = 1;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP: ::std::os::raw::c_uint = 2;
pub const PTHREAD_RWLOCK_DEFAULT_NP: ::std::os::raw::c_uint = 0;
pub type _bindgen_ty_24 = ::std::os::raw::c_uint;
pub const PTHREAD_INHERIT_SCHED: ::std::os::raw::c_uint = 0;
pub const PTHREAD_EXPLICIT_SCHED: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_25 = ::std::os::raw::c_uint;
pub const PTHREAD_SCOPE_SYSTEM: ::std::os::raw::c_uint = 0;
pub const PTHREAD_SCOPE_PROCESS: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_26 = ::std::os::raw::c_uint;
pub const PTHREAD_PROCESS_PRIVATE: ::std::os::raw::c_uint = 0;
pub const PTHREAD_PROCESS_SHARED: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_27 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pthread_cleanup_buffer {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __canceltype: ::std::os::raw::c_int,
    pub __prev: *mut _pthread_cleanup_buffer,
}
#[test]
fn bindgen_test_layout__pthread_cleanup_buffer() {
    assert_eq!(
        ::std::mem::size_of::<_pthread_cleanup_buffer>(),
        32usize,
        concat!("Size of: ", stringify!(_pthread_cleanup_buffer))
    );
    assert_eq!(
        ::std::mem::align_of::<_pthread_cleanup_buffer>(),
        8usize,
        concat!("Alignment of ", stringify!(_pthread_cleanup_buffer))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_pthread_cleanup_buffer>())).__routine as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_cleanup_buffer),
            "::",
            stringify!(__routine)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_pthread_cleanup_buffer>())).__arg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_cleanup_buffer),
            "::",
            stringify!(__arg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_pthread_cleanup_buffer>())).__canceltype as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_cleanup_buffer),
            "::",
            stringify!(__canceltype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_pthread_cleanup_buffer>())).__prev as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_cleanup_buffer),
            "::",
            stringify!(__prev)
        )
    );
}
impl Default for _pthread_cleanup_buffer {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const PTHREAD_CANCEL_ENABLE: ::std::os::raw::c_uint = 0;
pub const PTHREAD_CANCEL_DISABLE: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_28 = ::std::os::raw::c_uint;
pub const PTHREAD_CANCEL_DEFERRED: ::std::os::raw::c_uint = 0;
pub const PTHREAD_CANCEL_ASYNCHRONOUS: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_29 = ::std::os::raw::c_uint;
extern "C" {
    pub fn pthread_create(
        __newthread: *mut pthread_t,
        __attr: *const pthread_attr_t,
        __start_routine: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_exit(__retval: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn pthread_join(
        __th: pthread_t,
        __thread_return: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_detach(__th: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_self() -> pthread_t;
}
extern "C" {
    pub fn pthread_equal(__thread1: pthread_t, __thread2: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_init(__attr: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_destroy(__attr: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getdetachstate(
        __attr: *const pthread_attr_t,
        __detachstate: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setdetachstate(
        __attr: *mut pthread_attr_t,
        __detachstate: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getguardsize(
        __attr: *const pthread_attr_t,
        __guardsize: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setguardsize(
        __attr: *mut pthread_attr_t,
        __guardsize: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedparam(
        __attr: *const pthread_attr_t,
        __param: *mut sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedparam(
        __attr: *mut pthread_attr_t,
        __param: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedpolicy(
        __attr: *const pthread_attr_t,
        __policy: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedpolicy(
        __attr: *mut pthread_attr_t,
        __policy: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getinheritsched(
        __attr: *const pthread_attr_t,
        __inherit: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setinheritsched(
        __attr: *mut pthread_attr_t,
        __inherit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getscope(
        __attr: *const pthread_attr_t,
        __scope: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setscope(
        __attr: *mut pthread_attr_t,
        __scope: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstackaddr(
        __attr: *const pthread_attr_t,
        __stackaddr: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstackaddr(
        __attr: *mut pthread_attr_t,
        __stackaddr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstacksize(
        __attr: *const pthread_attr_t,
        __stacksize: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstacksize(
        __attr: *mut pthread_attr_t,
        __stacksize: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstack(
        __attr: *const pthread_attr_t,
        __stackaddr: *mut *mut ::std::os::raw::c_void,
        __stacksize: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstack(
        __attr: *mut pthread_attr_t,
        __stackaddr: *mut ::std::os::raw::c_void,
        __stacksize: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setschedparam(
        __target_thread: pthread_t,
        __policy: ::std::os::raw::c_int,
        __param: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getschedparam(
        __target_thread: pthread_t,
        __policy: *mut ::std::os::raw::c_int,
        __param: *mut sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setschedprio(
        __target_thread: pthread_t,
        __prio: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_once(
        __once_control: *mut pthread_once_t,
        __init_routine: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setcancelstate(
        __state: ::std::os::raw::c_int,
        __oldstate: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setcanceltype(
        __type: ::std::os::raw::c_int,
        __oldtype: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cancel(__th: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_testcancel();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_unwind_buf_t {
    pub __cancel_jmp_buf: [__pthread_unwind_buf_t__bindgen_ty_1; 1usize],
    pub __pad: [*mut ::std::os::raw::c_void; 4usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __pthread_unwind_buf_t__bindgen_ty_1 {
    pub __cancel_jmp_buf: __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___pthread_unwind_buf_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_unwind_buf_t__bindgen_ty_1>(),
        72usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_unwind_buf_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_unwind_buf_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_unwind_buf_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_unwind_buf_t__bindgen_ty_1>())).__cancel_jmp_buf
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_unwind_buf_t__bindgen_ty_1),
            "::",
            stringify!(__cancel_jmp_buf)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_unwind_buf_t__bindgen_ty_1>())).__mask_was_saved
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_unwind_buf_t__bindgen_ty_1),
            "::",
            stringify!(__mask_was_saved)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_unwind_buf_t() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_unwind_buf_t>(),
        104usize,
        concat!("Size of: ", stringify!(__pthread_unwind_buf_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_unwind_buf_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_unwind_buf_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_unwind_buf_t>())).__cancel_jmp_buf as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_unwind_buf_t),
            "::",
            stringify!(__cancel_jmp_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_unwind_buf_t>())).__pad as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_unwind_buf_t),
            "::",
            stringify!(__pad)
        )
    );
}
impl Default for __pthread_unwind_buf_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cleanup_frame {
    pub __cancel_routine:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __cancel_arg: *mut ::std::os::raw::c_void,
    pub __do_it: ::std::os::raw::c_int,
    pub __cancel_type: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___pthread_cleanup_frame() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cleanup_frame>(),
        24usize,
        concat!("Size of: ", stringify!(__pthread_cleanup_frame))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cleanup_frame>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cleanup_frame))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cleanup_frame>())).__cancel_routine as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cleanup_frame),
            "::",
            stringify!(__cancel_routine)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cleanup_frame>())).__cancel_arg as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cleanup_frame),
            "::",
            stringify!(__cancel_arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cleanup_frame>())).__do_it as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cleanup_frame),
            "::",
            stringify!(__do_it)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cleanup_frame>())).__cancel_type as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cleanup_frame),
            "::",
            stringify!(__cancel_type)
        )
    );
}
impl Default for __pthread_cleanup_frame {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn __pthread_register_cancel(__buf: *mut __pthread_unwind_buf_t);
}
extern "C" {
    pub fn __pthread_unregister_cancel(__buf: *mut __pthread_unwind_buf_t);
}
extern "C" {
    pub fn __pthread_unwind_next(__buf: *mut __pthread_unwind_buf_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __jmp_buf_tag {
    _unused: [u8; 0],
}
extern "C" {
    pub fn __sigsetjmp(
        __env: *mut __jmp_buf_tag,
        __savemask: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_init(
        __mutex: *mut pthread_mutex_t,
        __mutexattr: *const pthread_mutexattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_destroy(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_trylock(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_lock(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_timedlock(
        __mutex: *mut pthread_mutex_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_unlock(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_getprioceiling(
        __mutex: *const pthread_mutex_t,
        __prioceiling: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_setprioceiling(
        __mutex: *mut pthread_mutex_t,
        __prioceiling: ::std::os::raw::c_int,
        __old_ceiling: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_consistent(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_init(__attr: *mut pthread_mutexattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_destroy(__attr: *mut pthread_mutexattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getpshared(
        __attr: *const pthread_mutexattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setpshared(
        __attr: *mut pthread_mutexattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_gettype(
        __attr: *const pthread_mutexattr_t,
        __kind: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_settype(
        __attr: *mut pthread_mutexattr_t,
        __kind: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getprotocol(
        __attr: *const pthread_mutexattr_t,
        __protocol: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setprotocol(
        __attr: *mut pthread_mutexattr_t,
        __protocol: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getprioceiling(
        __attr: *const pthread_mutexattr_t,
        __prioceiling: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setprioceiling(
        __attr: *mut pthread_mutexattr_t,
        __prioceiling: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getrobust(
        __attr: *const pthread_mutexattr_t,
        __robustness: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setrobust(
        __attr: *mut pthread_mutexattr_t,
        __robustness: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_init(
        __rwlock: *mut pthread_rwlock_t,
        __attr: *const pthread_rwlockattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_destroy(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_rdlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_tryrdlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_timedrdlock(
        __rwlock: *mut pthread_rwlock_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_wrlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_trywrlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_timedwrlock(
        __rwlock: *mut pthread_rwlock_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_unlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_init(__attr: *mut pthread_rwlockattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_destroy(__attr: *mut pthread_rwlockattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_getpshared(
        __attr: *const pthread_rwlockattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_setpshared(
        __attr: *mut pthread_rwlockattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_getkind_np(
        __attr: *const pthread_rwlockattr_t,
        __pref: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_setkind_np(
        __attr: *mut pthread_rwlockattr_t,
        __pref: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_init(
        __cond: *mut pthread_cond_t,
        __cond_attr: *const pthread_condattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_destroy(__cond: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_signal(__cond: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_broadcast(__cond: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_wait(
        __cond: *mut pthread_cond_t,
        __mutex: *mut pthread_mutex_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_timedwait(
        __cond: *mut pthread_cond_t,
        __mutex: *mut pthread_mutex_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_init(__attr: *mut pthread_condattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_destroy(__attr: *mut pthread_condattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_getpshared(
        __attr: *const pthread_condattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_setpshared(
        __attr: *mut pthread_condattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_getclock(
        __attr: *const pthread_condattr_t,
        __clock_id: *mut __clockid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_setclock(
        __attr: *mut pthread_condattr_t,
        __clock_id: __clockid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_init(
        __lock: *mut pthread_spinlock_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_destroy(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_lock(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_trylock(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_unlock(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_init(
        __barrier: *mut pthread_barrier_t,
        __attr: *const pthread_barrierattr_t,
        __count: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_destroy(__barrier: *mut pthread_barrier_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_wait(__barrier: *mut pthread_barrier_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_init(__attr: *mut pthread_barrierattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_destroy(__attr: *mut pthread_barrierattr_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_getpshared(
        __attr: *const pthread_barrierattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_setpshared(
        __attr: *mut pthread_barrierattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_key_create(
        __key: *mut pthread_key_t,
        __destr_function: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_key_delete(__key: pthread_key_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getspecific(__key: pthread_key_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pthread_setspecific(
        __key: pthread_key_t,
        __pointer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getcpuclockid(
        __thread_id: pthread_t,
        __clock_id: *mut __clockid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_atfork(
        __prepare: ::std::option::Option<unsafe extern "C" fn()>,
        __parent: ::std::option::Option<unsafe extern "C" fn()>,
        __child: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
pub type wolfSSL_Mutex = pthread_mutex_t;
extern "C" {
    pub fn wc_InitMutex(arg1: *mut wolfSSL_Mutex) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_InitAndAllocMutex() -> *mut wolfSSL_Mutex;
}
extern "C" {
    pub fn wc_FreeMutex(arg1: *mut wolfSSL_Mutex) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_LockMutex(arg1: *mut wolfSSL_Mutex) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_UnLockMutex(arg1: *mut wolfSSL_Mutex) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfCrypt_Init() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfCrypt_Cleanup() -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dirent {
    pub d_ino: __ino_t,
    pub d_off: __off_t,
    pub d_reclen: ::std::os::raw::c_ushort,
    pub d_type: ::std::os::raw::c_uchar,
    pub d_name: [::std::os::raw::c_char; 256usize],
}
#[test]
fn bindgen_test_layout_dirent() {
    assert_eq!(
        ::std::mem::size_of::<dirent>(),
        280usize,
        concat!("Size of: ", stringify!(dirent))
    );
    assert_eq!(
        ::std::mem::align_of::<dirent>(),
        8usize,
        concat!("Alignment of ", stringify!(dirent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dirent>())).d_ino as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_ino)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dirent>())).d_off as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_off)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dirent>())).d_reclen as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_reclen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dirent>())).d_type as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dirent>())).d_name as *const _ as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_name)
        )
    );
}
impl Default for dirent {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const DT_UNKNOWN: ::std::os::raw::c_uint = 0;
pub const DT_FIFO: ::std::os::raw::c_uint = 1;
pub const DT_CHR: ::std::os::raw::c_uint = 2;
pub const DT_DIR: ::std::os::raw::c_uint = 4;
pub const DT_BLK: ::std::os::raw::c_uint = 6;
pub const DT_REG: ::std::os::raw::c_uint = 8;
pub const DT_LNK: ::std::os::raw::c_uint = 10;
pub const DT_SOCK: ::std::os::raw::c_uint = 12;
pub const DT_WHT: ::std::os::raw::c_uint = 14;
pub type _bindgen_ty_30 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __dirstream {
    _unused: [u8; 0],
}
pub type DIR = __dirstream;
extern "C" {
    pub fn opendir(__name: *const ::std::os::raw::c_char) -> *mut DIR;
}
extern "C" {
    pub fn fdopendir(__fd: ::std::os::raw::c_int) -> *mut DIR;
}
extern "C" {
    pub fn closedir(__dirp: *mut DIR) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readdir(__dirp: *mut DIR) -> *mut dirent;
}
extern "C" {
    pub fn readdir_r(
        __dirp: *mut DIR,
        __entry: *mut dirent,
        __result: *mut *mut dirent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rewinddir(__dirp: *mut DIR);
}
extern "C" {
    pub fn seekdir(__dirp: *mut DIR, __pos: ::std::os::raw::c_long);
}
extern "C" {
    pub fn telldir(__dirp: *mut DIR) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn dirfd(__dirp: *mut DIR) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scandir(
        __dir: *const ::std::os::raw::c_char,
        __namelist: *mut *mut *mut dirent,
        __selector: ::std::option::Option<
            unsafe extern "C" fn(arg1: *const dirent) -> ::std::os::raw::c_int,
        >,
        __cmp: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut *const dirent,
                arg2: *mut *const dirent,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alphasort(__e1: *mut *const dirent, __e2: *mut *const dirent) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdirentries(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __nbytes: size_t,
        __basep: *mut __off_t,
    ) -> __ssize_t;
}
extern "C" {
    pub fn stat(__file: *const ::std::os::raw::c_char, __buf: *mut stat) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fstat(__fd: ::std::os::raw::c_int, __buf: *mut stat) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fstatat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __buf: *mut stat,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lstat(__file: *const ::std::os::raw::c_char, __buf: *mut stat) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chmod(__file: *const ::std::os::raw::c_char, __mode: __mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lchmod(__file: *const ::std::os::raw::c_char, __mode: __mode_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchmod(__fd: ::std::os::raw::c_int, __mode: __mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchmodat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __mode: __mode_t,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn umask(__mask: __mode_t) -> __mode_t;
}
extern "C" {
    pub fn mkdir(__path: *const ::std::os::raw::c_char, __mode: __mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdirat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mknod(
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
        __dev: __dev_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mknodat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
        __dev: __dev_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkfifo(__path: *const ::std::os::raw::c_char, __mode: __mode_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkfifoat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utimensat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __times: *const timespec,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn futimens(__fd: ::std::os::raw::c_int, __times: *const timespec)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __fxstat(
        __ver: ::std::os::raw::c_int,
        __fildes: ::std::os::raw::c_int,
        __stat_buf: *mut stat,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __xstat(
        __ver: ::std::os::raw::c_int,
        __filename: *const ::std::os::raw::c_char,
        __stat_buf: *mut stat,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __lxstat(
        __ver: ::std::os::raw::c_int,
        __filename: *const ::std::os::raw::c_char,
        __stat_buf: *mut stat,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __fxstatat(
        __ver: ::std::os::raw::c_int,
        __fildes: ::std::os::raw::c_int,
        __filename: *const ::std::os::raw::c_char,
        __stat_buf: *mut stat,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __xmknod(
        __ver: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
        __dev: *mut __dev_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __xmknodat(
        __ver: ::std::os::raw::c_int,
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
        __dev: *mut __dev_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ReadDirCtx {
    pub entry: *mut dirent,
    pub dir: *mut DIR,
    pub s: stat,
    pub name: [::std::os::raw::c_char; 256usize],
}
#[test]
fn bindgen_test_layout_ReadDirCtx() {
    assert_eq!(
        ::std::mem::size_of::<ReadDirCtx>(),
        416usize,
        concat!("Size of: ", stringify!(ReadDirCtx))
    );
    assert_eq!(
        ::std::mem::align_of::<ReadDirCtx>(),
        8usize,
        concat!("Alignment of ", stringify!(ReadDirCtx))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReadDirCtx>())).entry as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadDirCtx),
            "::",
            stringify!(entry)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReadDirCtx>())).dir as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadDirCtx),
            "::",
            stringify!(dir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReadDirCtx>())).s as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadDirCtx),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReadDirCtx>())).name as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadDirCtx),
            "::",
            stringify!(name)
        )
    );
}
impl Default for ReadDirCtx {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn wc_ReadDirFirst(
        ctx: *mut ReadDirCtx,
        path: *const ::std::os::raw::c_char,
        name: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_ReadDirNext(
        ctx: *mut ReadDirCtx,
        path: *const ::std::os::raw::c_char,
        name: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_ReadDirClose(ctx: *mut ReadDirCtx);
}
pub type byte = ::std::os::raw::c_uchar;
pub type word16 = ::std::os::raw::c_ushort;
pub type word32 = ::std::os::raw::c_uint;
pub type word24 = [byte; 3usize];
pub type word64 = ::std::os::raw::c_ulong;
pub type wolfssl_word = word64;
pub const WOLFSSL_WORD_SIZE: ::std::os::raw::c_uint = 8;
pub const WOLFSSL_BIT_SIZE: ::std::os::raw::c_uint = 8;
pub const WOLFSSL_WORD_BITS: ::std::os::raw::c_uint = 64;
pub type _bindgen_ty_31 = ::std::os::raw::c_uint;
pub type wchar_t = ::std::os::raw::c_int;
pub const idtype_t_P_ALL: idtype_t = 0;
pub const idtype_t_P_PID: idtype_t = 1;
pub const idtype_t_P_PGID: idtype_t = 2;
pub type idtype_t = ::std::os::raw::c_uint;
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> size_t;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    assert_eq!(
        ::std::mem::size_of::<random_data>(),
        48usize,
        concat!("Size of: ", stringify!(random_data))
    );
    assert_eq!(
        ::std::mem::align_of::<random_data>(),
        8usize,
        concat!("Alignment of ", stringify!(random_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).fptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(fptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).state as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_type as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_deg as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_deg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_sep as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_sep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).end_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(end_ptr)
        )
    );
}
impl Default for random_data {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: size_t,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    assert_eq!(
        ::std::mem::size_of::<drand48_data>(),
        24usize,
        concat!("Size of: ", stringify!(drand48_data))
    );
    assert_eq!(
        ::std::mem::align_of::<drand48_data>(),
        8usize,
        concat!("Alignment of ", stringify!(drand48_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__old_x as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__old_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__c as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__init as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__a as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__a)
        )
    );
}
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        __nmemb: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn alloca(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: size_t,
        __size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(__alignment: size_t, __size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
        __compar: __compar_fn_t,
    );
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long, __denom: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(
        __pwc: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(
        __pwcs: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn wcstombs(
        __s: *mut ::std::os::raw::c_char,
        __pwcs: *const wchar_t,
        __n: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
pub type wolfSSL_Malloc_cb =
    ::std::option::Option<unsafe extern "C" fn(size: size_t) -> *mut ::std::os::raw::c_void>;
pub type wolfSSL_Free_cb =
    ::std::option::Option<unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void)>;
pub type wolfSSL_Realloc_cb = ::std::option::Option<
    unsafe extern "C" fn(
        ptr: *mut ::std::os::raw::c_void,
        size: size_t,
    ) -> *mut ::std::os::raw::c_void,
>;
extern "C" {
    pub fn wolfSSL_Malloc(size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn wolfSSL_Free(ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn wolfSSL_Realloc(
        ptr: *mut ::std::os::raw::c_void,
        size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn wolfSSL_SetAllocators(
        arg1: wolfSSL_Malloc_cb,
        arg2: wolfSSL_Free_cb,
        arg3: wolfSSL_Realloc_cb,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_GetAllocators(
        arg1: *mut wolfSSL_Malloc_cb,
        arg2: *mut wolfSSL_Free_cb,
        arg3: *mut wolfSSL_Realloc_cb,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mystrnstr(
        s1: *const ::std::os::raw::c_char,
        s2: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memccpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strcoll_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __l: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm_l(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: size_t,
        __l: locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn strdup(__s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __string: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __reject: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: size_t) -> size_t;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}__xpg_strerror_r"]
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strerror_l(
        __errnum: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        __src: *const ::std::os::raw::c_void,
        __dest: *mut ::std::os::raw::c_void,
        __n: size_t,
    );
}
extern "C" {
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn index(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(__l: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(__ll: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: size_t,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn explicit_bzero(__s: *mut ::std::os::raw::c_void, __n: size_t);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
pub const _ISupper: ::std::os::raw::c_uint = 256;
pub const _ISlower: ::std::os::raw::c_uint = 512;
pub const _ISalpha: ::std::os::raw::c_uint = 1024;
pub const _ISdigit: ::std::os::raw::c_uint = 2048;
pub const _ISxdigit: ::std::os::raw::c_uint = 4096;
pub const _ISspace: ::std::os::raw::c_uint = 8192;
pub const _ISprint: ::std::os::raw::c_uint = 16384;
pub const _ISgraph: ::std::os::raw::c_uint = 32768;
pub const _ISblank: ::std::os::raw::c_uint = 1;
pub const _IScntrl: ::std::os::raw::c_uint = 2;
pub const _ISpunct: ::std::os::raw::c_uint = 4;
pub const _ISalnum: ::std::os::raw::c_uint = 8;
pub type _bindgen_ty_32 = ::std::os::raw::c_uint;
extern "C" {
    pub fn __ctype_b_loc() -> *mut *const ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn __ctype_tolower_loc() -> *mut *const __int32_t;
}
extern "C" {
    pub fn __ctype_toupper_loc() -> *mut *const __int32_t;
}
extern "C" {
    pub fn isalnum(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isalpha(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iscntrl(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isdigit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn islower(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isgraph(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isprint(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ispunct(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isspace(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isupper(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isxdigit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tolower(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn toupper(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isblank(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isascii(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn toascii(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _toupper(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _tolower(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isalnum_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isalpha_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iscntrl_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isdigit_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn islower_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isgraph_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isprint_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ispunct_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isspace_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isupper_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isxdigit_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isblank_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __tolower_l(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tolower_l(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __toupper_l(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn toupper_l(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int;
}
pub const DYNAMIC_TYPE_CA: ::std::os::raw::c_uint = 1;
pub const DYNAMIC_TYPE_CERT: ::std::os::raw::c_uint = 2;
pub const DYNAMIC_TYPE_KEY: ::std::os::raw::c_uint = 3;
pub const DYNAMIC_TYPE_FILE: ::std::os::raw::c_uint = 4;
pub const DYNAMIC_TYPE_SUBJECT_CN: ::std::os::raw::c_uint = 5;
pub const DYNAMIC_TYPE_PUBLIC_KEY: ::std::os::raw::c_uint = 6;
pub const DYNAMIC_TYPE_SIGNER: ::std::os::raw::c_uint = 7;
pub const DYNAMIC_TYPE_NONE: ::std::os::raw::c_uint = 8;
pub const DYNAMIC_TYPE_BIGINT: ::std::os::raw::c_uint = 9;
pub const DYNAMIC_TYPE_RSA: ::std::os::raw::c_uint = 10;
pub const DYNAMIC_TYPE_METHOD: ::std::os::raw::c_uint = 11;
pub const DYNAMIC_TYPE_OUT_BUFFER: ::std::os::raw::c_uint = 12;
pub const DYNAMIC_TYPE_IN_BUFFER: ::std::os::raw::c_uint = 13;
pub const DYNAMIC_TYPE_INFO: ::std::os::raw::c_uint = 14;
pub const DYNAMIC_TYPE_DH: ::std::os::raw::c_uint = 15;
pub const DYNAMIC_TYPE_DOMAIN: ::std::os::raw::c_uint = 16;
pub const DYNAMIC_TYPE_SSL: ::std::os::raw::c_uint = 17;
pub const DYNAMIC_TYPE_CTX: ::std::os::raw::c_uint = 18;
pub const DYNAMIC_TYPE_WRITEV: ::std::os::raw::c_uint = 19;
pub const DYNAMIC_TYPE_OPENSSL: ::std::os::raw::c_uint = 20;
pub const DYNAMIC_TYPE_DSA: ::std::os::raw::c_uint = 21;
pub const DYNAMIC_TYPE_CRL: ::std::os::raw::c_uint = 22;
pub const DYNAMIC_TYPE_REVOKED: ::std::os::raw::c_uint = 23;
pub const DYNAMIC_TYPE_CRL_ENTRY: ::std::os::raw::c_uint = 24;
pub const DYNAMIC_TYPE_CERT_MANAGER: ::std::os::raw::c_uint = 25;
pub const DYNAMIC_TYPE_CRL_MONITOR: ::std::os::raw::c_uint = 26;
pub const DYNAMIC_TYPE_OCSP_STATUS: ::std::os::raw::c_uint = 27;
pub const DYNAMIC_TYPE_OCSP_ENTRY: ::std::os::raw::c_uint = 28;
pub const DYNAMIC_TYPE_ALTNAME: ::std::os::raw::c_uint = 29;
pub const DYNAMIC_TYPE_SUITES: ::std::os::raw::c_uint = 30;
pub const DYNAMIC_TYPE_CIPHER: ::std::os::raw::c_uint = 31;
pub const DYNAMIC_TYPE_RNG: ::std::os::raw::c_uint = 32;
pub const DYNAMIC_TYPE_ARRAYS: ::std::os::raw::c_uint = 33;
pub const DYNAMIC_TYPE_DTLS_POOL: ::std::os::raw::c_uint = 34;
pub const DYNAMIC_TYPE_SOCKADDR: ::std::os::raw::c_uint = 35;
pub const DYNAMIC_TYPE_LIBZ: ::std::os::raw::c_uint = 36;
pub const DYNAMIC_TYPE_ECC: ::std::os::raw::c_uint = 37;
pub const DYNAMIC_TYPE_TMP_BUFFER: ::std::os::raw::c_uint = 38;
pub const DYNAMIC_TYPE_DTLS_MSG: ::std::os::raw::c_uint = 39;
pub const DYNAMIC_TYPE_X509: ::std::os::raw::c_uint = 40;
pub const DYNAMIC_TYPE_TLSX: ::std::os::raw::c_uint = 41;
pub const DYNAMIC_TYPE_OCSP: ::std::os::raw::c_uint = 42;
pub const DYNAMIC_TYPE_SIGNATURE: ::std::os::raw::c_uint = 43;
pub const DYNAMIC_TYPE_HASHES: ::std::os::raw::c_uint = 44;
pub const DYNAMIC_TYPE_SRP: ::std::os::raw::c_uint = 45;
pub const DYNAMIC_TYPE_COOKIE_PWD: ::std::os::raw::c_uint = 46;
pub const DYNAMIC_TYPE_USER_CRYPTO: ::std::os::raw::c_uint = 47;
pub const DYNAMIC_TYPE_OCSP_REQUEST: ::std::os::raw::c_uint = 48;
pub const DYNAMIC_TYPE_X509_EXT: ::std::os::raw::c_uint = 49;
pub const DYNAMIC_TYPE_X509_STORE: ::std::os::raw::c_uint = 50;
pub const DYNAMIC_TYPE_X509_CTX: ::std::os::raw::c_uint = 51;
pub const DYNAMIC_TYPE_URL: ::std::os::raw::c_uint = 52;
pub const DYNAMIC_TYPE_DTLS_FRAG: ::std::os::raw::c_uint = 53;
pub const DYNAMIC_TYPE_DTLS_BUFFER: ::std::os::raw::c_uint = 54;
pub const DYNAMIC_TYPE_SESSION_TICK: ::std::os::raw::c_uint = 55;
pub const DYNAMIC_TYPE_PKCS: ::std::os::raw::c_uint = 56;
pub const DYNAMIC_TYPE_MUTEX: ::std::os::raw::c_uint = 57;
pub const DYNAMIC_TYPE_PKCS7: ::std::os::raw::c_uint = 58;
pub const DYNAMIC_TYPE_AES_BUFFER: ::std::os::raw::c_uint = 59;
pub const DYNAMIC_TYPE_WOLF_BIGINT: ::std::os::raw::c_uint = 60;
pub const DYNAMIC_TYPE_ASN1: ::std::os::raw::c_uint = 61;
pub const DYNAMIC_TYPE_LOG: ::std::os::raw::c_uint = 62;
pub const DYNAMIC_TYPE_WRITEDUP: ::std::os::raw::c_uint = 63;
pub const DYNAMIC_TYPE_PRIVATE_KEY: ::std::os::raw::c_uint = 64;
pub const DYNAMIC_TYPE_HMAC: ::std::os::raw::c_uint = 65;
pub const DYNAMIC_TYPE_ASYNC: ::std::os::raw::c_uint = 66;
pub const DYNAMIC_TYPE_ASYNC_NUMA: ::std::os::raw::c_uint = 67;
pub const DYNAMIC_TYPE_ASYNC_NUMA64: ::std::os::raw::c_uint = 68;
pub const DYNAMIC_TYPE_CURVE25519: ::std::os::raw::c_uint = 69;
pub const DYNAMIC_TYPE_ED25519: ::std::os::raw::c_uint = 70;
pub const DYNAMIC_TYPE_SECRET: ::std::os::raw::c_uint = 71;
pub const DYNAMIC_TYPE_DIGEST: ::std::os::raw::c_uint = 72;
pub const DYNAMIC_TYPE_RSA_BUFFER: ::std::os::raw::c_uint = 73;
pub const DYNAMIC_TYPE_DCERT: ::std::os::raw::c_uint = 74;
pub const DYNAMIC_TYPE_STRING: ::std::os::raw::c_uint = 75;
pub const DYNAMIC_TYPE_PEM: ::std::os::raw::c_uint = 76;
pub const DYNAMIC_TYPE_DER: ::std::os::raw::c_uint = 77;
pub const DYNAMIC_TYPE_CERT_EXT: ::std::os::raw::c_uint = 78;
pub const DYNAMIC_TYPE_ALPN: ::std::os::raw::c_uint = 79;
pub const DYNAMIC_TYPE_ENCRYPTEDINFO: ::std::os::raw::c_uint = 80;
pub const DYNAMIC_TYPE_DIRCTX: ::std::os::raw::c_uint = 81;
pub const DYNAMIC_TYPE_HASHCTX: ::std::os::raw::c_uint = 82;
pub const DYNAMIC_TYPE_SEED: ::std::os::raw::c_uint = 83;
pub const DYNAMIC_TYPE_SYMETRIC_KEY: ::std::os::raw::c_uint = 84;
pub const DYNAMIC_TYPE_ECC_BUFFER: ::std::os::raw::c_uint = 85;
pub const DYNAMIC_TYPE_QSH: ::std::os::raw::c_uint = 86;
pub const DYNAMIC_TYPE_SALT: ::std::os::raw::c_uint = 87;
pub const DYNAMIC_TYPE_HASH_TMP: ::std::os::raw::c_uint = 88;
pub type _bindgen_ty_33 = ::std::os::raw::c_uint;
pub const MIN_STACK_BUFFER: ::std::os::raw::c_uint = 8;
pub type _bindgen_ty_34 = ::std::os::raw::c_uint;
pub const CTC_SETTINGS: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_35 = ::std::os::raw::c_uint;
extern "C" {
    pub fn CheckRunTimeSettings() -> word32;
}
pub const WC_SHA256: ::std::os::raw::c_uint = 2;
pub const WC_SHA256_BLOCK_SIZE: ::std::os::raw::c_uint = 64;
pub const WC_SHA256_DIGEST_SIZE: ::std::os::raw::c_uint = 32;
pub const WC_SHA256_PAD_SIZE: ::std::os::raw::c_uint = 56;
pub type _bindgen_ty_36 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wc_Sha256 {
    pub digest: [word32; 8usize],
    pub buffer: [word32; 16usize],
    pub buffLen: word32,
    pub loLen: word32,
    pub hiLen: word32,
    pub heap: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_wc_Sha256() {
    assert_eq!(
        ::std::mem::size_of::<wc_Sha256>(),
        120usize,
        concat!("Size of: ", stringify!(wc_Sha256))
    );
    assert_eq!(
        ::std::mem::align_of::<wc_Sha256>(),
        8usize,
        concat!("Alignment of ", stringify!(wc_Sha256))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wc_Sha256>())).digest as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wc_Sha256),
            "::",
            stringify!(digest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wc_Sha256>())).buffer as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(wc_Sha256),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wc_Sha256>())).buffLen as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(wc_Sha256),
            "::",
            stringify!(buffLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wc_Sha256>())).loLen as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(wc_Sha256),
            "::",
            stringify!(loLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wc_Sha256>())).hiLen as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(wc_Sha256),
            "::",
            stringify!(hiLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wc_Sha256>())).heap as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(wc_Sha256),
            "::",
            stringify!(heap)
        )
    );
}
impl Default for wc_Sha256 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn wc_InitSha256(arg1: *mut wc_Sha256) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_InitSha256_ex(
        arg1: *mut wc_Sha256,
        arg2: *mut ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_Sha256Update(
        arg1: *mut wc_Sha256,
        arg2: *const byte,
        arg3: word32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_Sha256Final(arg1: *mut wc_Sha256, arg2: *mut byte) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_Sha256Free(arg1: *mut wc_Sha256);
}
extern "C" {
    pub fn wc_Sha256GetHash(arg1: *mut wc_Sha256, arg2: *mut byte) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_Sha256Copy(src: *mut wc_Sha256, dst: *mut wc_Sha256) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct OS_Seed {
    pub fd: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_OS_Seed() {
    assert_eq!(
        ::std::mem::size_of::<OS_Seed>(),
        4usize,
        concat!("Size of: ", stringify!(OS_Seed))
    );
    assert_eq!(
        ::std::mem::align_of::<OS_Seed>(),
        4usize,
        concat!("Alignment of ", stringify!(OS_Seed))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OS_Seed>())).fd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OS_Seed),
            "::",
            stringify!(fd)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DRBG {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WC_RNG {
    pub seed: OS_Seed,
    pub heap: *mut ::std::os::raw::c_void,
    pub drbg: *mut DRBG,
    pub status: byte,
}
#[test]
fn bindgen_test_layout_WC_RNG() {
    assert_eq!(
        ::std::mem::size_of::<WC_RNG>(),
        32usize,
        concat!("Size of: ", stringify!(WC_RNG))
    );
    assert_eq!(
        ::std::mem::align_of::<WC_RNG>(),
        8usize,
        concat!("Alignment of ", stringify!(WC_RNG))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WC_RNG>())).seed as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WC_RNG),
            "::",
            stringify!(seed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WC_RNG>())).heap as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WC_RNG),
            "::",
            stringify!(heap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WC_RNG>())).drbg as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WC_RNG),
            "::",
            stringify!(drbg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WC_RNG>())).status as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WC_RNG),
            "::",
            stringify!(status)
        )
    );
}
impl Default for WC_RNG {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn wc_GenerateSeed(os: *mut OS_Seed, seed: *mut byte, sz: word32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_InitRng(arg1: *mut WC_RNG) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_InitRng_ex(
        rng: *mut WC_RNG,
        heap: *mut ::std::os::raw::c_void,
        devId: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_RNG_GenerateBlock(
        arg1: *mut WC_RNG,
        arg2: *mut byte,
        sz: word32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_RNG_GenerateByte(arg1: *mut WC_RNG, arg2: *mut byte) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_FreeRng(arg1: *mut WC_RNG) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_RNG_HealthTest(
        reseed: ::std::os::raw::c_int,
        entropyA: *const byte,
        entropyASz: word32,
        entropyB: *const byte,
        entropyBSz: word32,
        output: *mut byte,
        outputSz: word32,
    ) -> ::std::os::raw::c_int;
}
pub type mp_digit = ::std::os::raw::c_ulonglong;
pub type mp_word = u128;
pub type mp_err = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mp_int {
    pub used: ::std::os::raw::c_int,
    pub alloc: ::std::os::raw::c_int,
    pub sign: ::std::os::raw::c_int,
    pub dp: *mut mp_digit,
}
#[test]
fn bindgen_test_layout_mp_int() {
    assert_eq!(
        ::std::mem::size_of::<mp_int>(),
        24usize,
        concat!("Size of: ", stringify!(mp_int))
    );
    assert_eq!(
        ::std::mem::align_of::<mp_int>(),
        8usize,
        concat!("Alignment of ", stringify!(mp_int))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mp_int>())).used as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mp_int),
            "::",
            stringify!(used)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mp_int>())).alloc as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mp_int),
            "::",
            stringify!(alloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mp_int>())).sign as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mp_int),
            "::",
            stringify!(sign)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mp_int>())).dp as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mp_int),
            "::",
            stringify!(dp)
        )
    );
}
impl Default for mp_int {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type ltm_prime_callback = ::std::option::Option<
    unsafe extern "C" fn(
        dst: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
        dat: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn mp_init(a: *mut mp_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp_clear(a: *mut mp_int);
}
extern "C" {
    pub fn mp_free(a: *mut mp_int);
}
extern "C" {
    pub fn mp_forcezero(a: *mut mp_int);
}
extern "C" {
    pub fn mp_unsigned_bin_size(a: *mut mp_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp_read_unsigned_bin(
        a: *mut mp_int,
        b: *const ::std::os::raw::c_uchar,
        c: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp_to_unsigned_bin_at_pos(
        x: ::std::os::raw::c_int,
        t: *mut mp_int,
        b: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp_to_unsigned_bin(
        a: *mut mp_int,
        b: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp_exptmod(
        G: *mut mp_int,
        X: *mut mp_int,
        P: *mut mp_int,
        Y: *mut mp_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp_count_bits(a: *mut mp_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp_leading_bit(a: *mut mp_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp_init_copy(a: *mut mp_int, b: *mut mp_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp_copy(a: *mut mp_int, b: *mut mp_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp_grow(a: *mut mp_int, size: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp_div_2d(
        a: *mut mp_int,
        b: ::std::os::raw::c_int,
        c: *mut mp_int,
        d: *mut mp_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp_zero(a: *mut mp_int);
}
extern "C" {
    pub fn mp_clamp(a: *mut mp_int);
}
extern "C" {
    pub fn mp_exch(a: *mut mp_int, b: *mut mp_int);
}
extern "C" {
    pub fn mp_rshd(a: *mut mp_int, b: ::std::os::raw::c_int);
}
extern "C" {
    pub fn mp_rshb(a: *mut mp_int, b: ::std::os::raw::c_int);
}
extern "C" {
    pub fn mp_mod_2d(
        a: *mut mp_int,
        b: ::std::os::raw::c_int,
        c: *mut mp_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp_mul_2d(
        a: *mut mp_int,
        b: ::std::os::raw::c_int,
        c: *mut mp_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp_lshd(a: *mut mp_int, b: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp_abs(a: *mut mp_int, b: *mut mp_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp_invmod(a: *mut mp_int, b: *mut mp_int, c: *mut mp_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fast_mp_invmod(a: *mut mp_int, b: *mut mp_int, c: *mut mp_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp_invmod_slow(a: *mut mp_int, b: *mut mp_int, c: *mut mp_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp_cmp_mag(a: *mut mp_int, b: *mut mp_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp_cmp(a: *mut mp_int, b: *mut mp_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp_cmp_d(a: *mut mp_int, b: mp_digit) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp_set(a: *mut mp_int, b: mp_digit) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp_is_bit_set(a: *mut mp_int, b: mp_digit) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp_mod(a: *mut mp_int, b: *mut mp_int, c: *mut mp_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp_div(
        a: *mut mp_int,
        b: *mut mp_int,
        c: *mut mp_int,
        d: *mut mp_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp_div_2(a: *mut mp_int, b: *mut mp_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp_add(a: *mut mp_int, b: *mut mp_int, c: *mut mp_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn s_mp_add(a: *mut mp_int, b: *mut mp_int, c: *mut mp_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn s_mp_sub(a: *mut mp_int, b: *mut mp_int, c: *mut mp_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp_sub(a: *mut mp_int, b: *mut mp_int, c: *mut mp_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp_reduce_is_2k_l(a: *mut mp_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp_reduce_is_2k(a: *mut mp_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp_dr_is_modulus(a: *mut mp_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp_exptmod_fast(
        G: *mut mp_int,
        X: *mut mp_int,
        P: *mut mp_int,
        Y: *mut mp_int,
        arg1: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp_montgomery_setup(n: *mut mp_int, rho: *mut mp_digit) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fast_mp_montgomery_reduce(
        x: *mut mp_int,
        n: *mut mp_int,
        rho: mp_digit,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp_montgomery_reduce(
        x: *mut mp_int,
        n: *mut mp_int,
        rho: mp_digit,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp_dr_setup(a: *mut mp_int, d: *mut mp_digit);
}
extern "C" {
    pub fn mp_dr_reduce(x: *mut mp_int, n: *mut mp_int, k: mp_digit) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp_reduce_2k(a: *mut mp_int, n: *mut mp_int, d: mp_digit) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fast_s_mp_mul_high_digs(
        a: *mut mp_int,
        b: *mut mp_int,
        c: *mut mp_int,
        digs: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn s_mp_mul_high_digs(
        a: *mut mp_int,
        b: *mut mp_int,
        c: *mut mp_int,
        digs: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp_reduce_2k_setup_l(a: *mut mp_int, d: *mut mp_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp_reduce_2k_l(a: *mut mp_int, n: *mut mp_int, d: *mut mp_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp_reduce(x: *mut mp_int, m: *mut mp_int, mu: *mut mp_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp_reduce_setup(a: *mut mp_int, b: *mut mp_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn s_mp_exptmod(
        G: *mut mp_int,
        X: *mut mp_int,
        P: *mut mp_int,
        Y: *mut mp_int,
        redmode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp_montgomery_calc_normalization(
        a: *mut mp_int,
        b: *mut mp_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn s_mp_mul_digs(
        a: *mut mp_int,
        b: *mut mp_int,
        c: *mut mp_int,
        digs: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn s_mp_sqr(a: *mut mp_int, b: *mut mp_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fast_s_mp_mul_digs(
        a: *mut mp_int,
        b: *mut mp_int,
        c: *mut mp_int,
        digs: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fast_s_mp_sqr(a: *mut mp_int, b: *mut mp_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp_init_size(a: *mut mp_int, size: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp_div_3(a: *mut mp_int, c: *mut mp_int, d: *mut mp_digit) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp_mul_2(a: *mut mp_int, b: *mut mp_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp_mul(a: *mut mp_int, b: *mut mp_int, c: *mut mp_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp_sqr(a: *mut mp_int, b: *mut mp_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp_mulmod(
        a: *mut mp_int,
        b: *mut mp_int,
        c: *mut mp_int,
        d: *mut mp_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp_submod(
        a: *mut mp_int,
        b: *mut mp_int,
        c: *mut mp_int,
        d: *mut mp_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp_addmod(
        a: *mut mp_int,
        b: *mut mp_int,
        c: *mut mp_int,
        d: *mut mp_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp_mul_d(a: *mut mp_int, b: mp_digit, c: *mut mp_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp_2expt(a: *mut mp_int, b: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp_set_bit(a: *mut mp_int, b: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp_reduce_2k_setup(a: *mut mp_int, d: *mut mp_digit) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp_add_d(a: *mut mp_int, b: mp_digit, c: *mut mp_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp_set_int(a: *mut mp_int, b: ::std::os::raw::c_ulong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp_sub_d(a: *mut mp_int, b: mp_digit, c: *mut mp_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp_init_multi(
        a: *mut mp_int,
        b: *mut mp_int,
        c: *mut mp_int,
        d: *mut mp_int,
        e: *mut mp_int,
        f: *mut mp_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp_toradix(
        a: *mut mp_int,
        str_: *mut ::std::os::raw::c_char,
        radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp_radix_size(
        a: *mut mp_int,
        radix: ::std::os::raw::c_int,
        size: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp_cnt_lsb(a: *mut mp_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp_mod_d(a: *mut mp_int, b: mp_digit, c: *mut mp_digit) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_digit_count(a: *mut mp_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_digit(a: *mut mp_int, n: ::std::os::raw::c_int) -> mp_digit;
}
extern "C" {
    pub fn get_rand_digit(rng: *mut WC_RNG, d: *mut mp_digit) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp_rand(
        a: *mut mp_int,
        digits: ::std::os::raw::c_int,
        rng: *mut WC_RNG,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DhParams {
    pub p: *const byte,
    pub p_len: word32,
    pub g: *const byte,
    pub g_len: word32,
}
#[test]
fn bindgen_test_layout_DhParams() {
    assert_eq!(
        ::std::mem::size_of::<DhParams>(),
        32usize,
        concat!("Size of: ", stringify!(DhParams))
    );
    assert_eq!(
        ::std::mem::align_of::<DhParams>(),
        8usize,
        concat!("Alignment of ", stringify!(DhParams))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DhParams>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DhParams),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DhParams>())).p_len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DhParams),
            "::",
            stringify!(p_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DhParams>())).g as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DhParams),
            "::",
            stringify!(g)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DhParams>())).g_len as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DhParams),
            "::",
            stringify!(g_len)
        )
    );
}
impl Default for DhParams {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DhKey {
    pub p: mp_int,
    pub g: mp_int,
    pub heap: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_DhKey() {
    assert_eq!(
        ::std::mem::size_of::<DhKey>(),
        56usize,
        concat!("Size of: ", stringify!(DhKey))
    );
    assert_eq!(
        ::std::mem::align_of::<DhKey>(),
        8usize,
        concat!("Alignment of ", stringify!(DhKey))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DhKey>())).p as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(DhKey), "::", stringify!(p))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DhKey>())).g as *const _ as usize },
        24usize,
        concat!("Offset of field: ", stringify!(DhKey), "::", stringify!(g))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DhKey>())).heap as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DhKey),
            "::",
            stringify!(heap)
        )
    );
}
impl Default for DhKey {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn wc_InitDhKey(key: *mut DhKey) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_InitDhKey_ex(
        key: *mut DhKey,
        heap: *mut ::std::os::raw::c_void,
        devId: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_FreeDhKey(key: *mut DhKey);
}
extern "C" {
    pub fn wc_DhGenerateKeyPair(
        key: *mut DhKey,
        rng: *mut WC_RNG,
        priv_: *mut byte,
        privSz: *mut word32,
        pub_: *mut byte,
        pubSz: *mut word32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_DhAgree(
        key: *mut DhKey,
        agree: *mut byte,
        agreeSz: *mut word32,
        priv_: *const byte,
        privSz: word32,
        otherPub: *const byte,
        pubSz: word32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_DhKeyDecode(
        input: *const byte,
        inOutIdx: *mut word32,
        key: *mut DhKey,
        arg1: word32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_DhSetKey(
        key: *mut DhKey,
        p: *const byte,
        pSz: word32,
        g: *const byte,
        gSz: word32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_DhParamsLoad(
        input: *const byte,
        inSz: word32,
        p: *mut byte,
        pInOutSz: *mut word32,
        g: *mut byte,
        gInOutSz: *mut word32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_DhCheckPubKey(
        key: *mut DhKey,
        pub_: *const byte,
        pubSz: word32,
    ) -> ::std::os::raw::c_int;
}
pub const DSA_PUBLIC: ::std::os::raw::c_uint = 0;
pub const DSA_PRIVATE: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_37 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DsaKey {
    pub p: mp_int,
    pub q: mp_int,
    pub g: mp_int,
    pub y: mp_int,
    pub x: mp_int,
    pub type_: ::std::os::raw::c_int,
    pub heap: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_DsaKey() {
    assert_eq!(
        ::std::mem::size_of::<DsaKey>(),
        136usize,
        concat!("Size of: ", stringify!(DsaKey))
    );
    assert_eq!(
        ::std::mem::align_of::<DsaKey>(),
        8usize,
        concat!("Alignment of ", stringify!(DsaKey))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DsaKey>())).p as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(DsaKey), "::", stringify!(p))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DsaKey>())).q as *const _ as usize },
        24usize,
        concat!("Offset of field: ", stringify!(DsaKey), "::", stringify!(q))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DsaKey>())).g as *const _ as usize },
        48usize,
        concat!("Offset of field: ", stringify!(DsaKey), "::", stringify!(g))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DsaKey>())).y as *const _ as usize },
        72usize,
        concat!("Offset of field: ", stringify!(DsaKey), "::", stringify!(y))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DsaKey>())).x as *const _ as usize },
        96usize,
        concat!("Offset of field: ", stringify!(DsaKey), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DsaKey>())).type_ as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(DsaKey),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DsaKey>())).heap as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(DsaKey),
            "::",
            stringify!(heap)
        )
    );
}
impl Default for DsaKey {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn wc_InitDsaKey(key: *mut DsaKey) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_InitDsaKey_h(
        key: *mut DsaKey,
        h: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_FreeDsaKey(key: *mut DsaKey);
}
extern "C" {
    pub fn wc_DsaSign(
        digest: *const byte,
        out: *mut byte,
        key: *mut DsaKey,
        rng: *mut WC_RNG,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_DsaVerify(
        digest: *const byte,
        sig: *const byte,
        key: *mut DsaKey,
        answer: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_DsaPublicKeyDecode(
        input: *const byte,
        inOutIdx: *mut word32,
        arg1: *mut DsaKey,
        arg2: word32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_DsaPrivateKeyDecode(
        input: *const byte,
        inOutIdx: *mut word32,
        arg1: *mut DsaKey,
        arg2: word32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_DsaKeyToDer(
        key: *mut DsaKey,
        output: *mut byte,
        inLen: word32,
    ) -> ::std::os::raw::c_int;
}
pub const WC_SHA: ::std::os::raw::c_uint = 1;
pub const WC_SHA_BLOCK_SIZE: ::std::os::raw::c_uint = 64;
pub const WC_SHA_DIGEST_SIZE: ::std::os::raw::c_uint = 20;
pub const WC_SHA_PAD_SIZE: ::std::os::raw::c_uint = 56;
pub type _bindgen_ty_38 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wc_Sha {
    pub buffLen: word32,
    pub loLen: word32,
    pub hiLen: word32,
    pub buffer: [word32; 16usize],
    pub digest: [word32; 5usize],
    pub heap: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_wc_Sha() {
    assert_eq!(
        ::std::mem::size_of::<wc_Sha>(),
        104usize,
        concat!("Size of: ", stringify!(wc_Sha))
    );
    assert_eq!(
        ::std::mem::align_of::<wc_Sha>(),
        8usize,
        concat!("Alignment of ", stringify!(wc_Sha))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wc_Sha>())).buffLen as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wc_Sha),
            "::",
            stringify!(buffLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wc_Sha>())).loLen as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(wc_Sha),
            "::",
            stringify!(loLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wc_Sha>())).hiLen as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wc_Sha),
            "::",
            stringify!(hiLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wc_Sha>())).buffer as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(wc_Sha),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wc_Sha>())).digest as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(wc_Sha),
            "::",
            stringify!(digest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wc_Sha>())).heap as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(wc_Sha),
            "::",
            stringify!(heap)
        )
    );
}
impl Default for wc_Sha {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn wc_InitSha(arg1: *mut wc_Sha) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_InitSha_ex(
        sha: *mut wc_Sha,
        heap: *mut ::std::os::raw::c_void,
        devId: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_ShaUpdate(
        arg1: *mut wc_Sha,
        arg2: *const byte,
        arg3: word32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_ShaFinal(arg1: *mut wc_Sha, arg2: *mut byte) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_ShaFree(arg1: *mut wc_Sha);
}
extern "C" {
    pub fn wc_ShaGetHash(arg1: *mut wc_Sha, arg2: *mut byte) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_ShaCopy(arg1: *mut wc_Sha, arg2: *mut wc_Sha) -> ::std::os::raw::c_int;
}
pub const WC_MD5: ::std::os::raw::c_uint = 0;
pub const WC_MD5_BLOCK_SIZE: ::std::os::raw::c_uint = 64;
pub const WC_MD5_DIGEST_SIZE: ::std::os::raw::c_uint = 16;
pub const WC_MD5_PAD_SIZE: ::std::os::raw::c_uint = 56;
pub type _bindgen_ty_39 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wc_Md5 {
    pub buffLen: word32,
    pub loLen: word32,
    pub hiLen: word32,
    pub buffer: [word32; 16usize],
    pub digest: [word32; 4usize],
    pub heap: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_wc_Md5() {
    assert_eq!(
        ::std::mem::size_of::<wc_Md5>(),
        104usize,
        concat!("Size of: ", stringify!(wc_Md5))
    );
    assert_eq!(
        ::std::mem::align_of::<wc_Md5>(),
        8usize,
        concat!("Alignment of ", stringify!(wc_Md5))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wc_Md5>())).buffLen as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wc_Md5),
            "::",
            stringify!(buffLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wc_Md5>())).loLen as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(wc_Md5),
            "::",
            stringify!(loLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wc_Md5>())).hiLen as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wc_Md5),
            "::",
            stringify!(hiLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wc_Md5>())).buffer as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(wc_Md5),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wc_Md5>())).digest as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(wc_Md5),
            "::",
            stringify!(digest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wc_Md5>())).heap as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(wc_Md5),
            "::",
            stringify!(heap)
        )
    );
}
impl Default for wc_Md5 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn wc_InitMd5(arg1: *mut wc_Md5) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_InitMd5_ex(
        arg1: *mut wc_Md5,
        arg2: *mut ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_Md5Update(
        arg1: *mut wc_Md5,
        arg2: *const byte,
        arg3: word32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_Md5Final(arg1: *mut wc_Md5, arg2: *mut byte) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_Md5Free(arg1: *mut wc_Md5);
}
extern "C" {
    pub fn wc_Md5GetHash(arg1: *mut wc_Md5, arg2: *mut byte) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_Md5Copy(arg1: *mut wc_Md5, arg2: *mut wc_Md5) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RsaKey {
    _unused: [u8; 0],
}
pub const CertType_CERT_TYPE: CertType = 0;
pub const CertType_PRIVATEKEY_TYPE: CertType = 1;
pub const CertType_DH_PARAM_TYPE: CertType = 2;
pub const CertType_DSA_PARAM_TYPE: CertType = 3;
pub const CertType_CRL_TYPE: CertType = 4;
pub const CertType_CA_TYPE: CertType = 5;
pub const CertType_ECC_PRIVATEKEY_TYPE: CertType = 6;
pub const CertType_DSA_PRIVATEKEY_TYPE: CertType = 7;
pub const CertType_CERTREQ_TYPE: CertType = 8;
pub const CertType_DSA_TYPE: CertType = 9;
pub const CertType_ECC_TYPE: CertType = 10;
pub const CertType_RSA_TYPE: CertType = 11;
pub const CertType_PUBLICKEY_TYPE: CertType = 12;
pub const CertType_RSA_PUBLICKEY_TYPE: CertType = 13;
pub const CertType_ECC_PUBLICKEY_TYPE: CertType = 14;
pub const CertType_TRUSTED_PEER_TYPE: CertType = 15;
pub const CertType_EDDSA_PRIVATEKEY_TYPE: CertType = 16;
pub const CertType_ED25519_TYPE: CertType = 17;
pub type CertType = ::std::os::raw::c_uint;
pub const Ctc_SigType_CTC_SHAwDSA: Ctc_SigType = 517;
pub const Ctc_SigType_CTC_MD2wRSA: Ctc_SigType = 646;
pub const Ctc_SigType_CTC_MD5wRSA: Ctc_SigType = 648;
pub const Ctc_SigType_CTC_SHAwRSA: Ctc_SigType = 649;
pub const Ctc_SigType_CTC_SHAwECDSA: Ctc_SigType = 520;
pub const Ctc_SigType_CTC_SHA224wRSA: Ctc_SigType = 658;
pub const Ctc_SigType_CTC_SHA224wECDSA: Ctc_SigType = 523;
pub const Ctc_SigType_CTC_SHA256wRSA: Ctc_SigType = 655;
pub const Ctc_SigType_CTC_SHA256wECDSA: Ctc_SigType = 524;
pub const Ctc_SigType_CTC_SHA384wRSA: Ctc_SigType = 656;
pub const Ctc_SigType_CTC_SHA384wECDSA: Ctc_SigType = 525;
pub const Ctc_SigType_CTC_SHA512wRSA: Ctc_SigType = 657;
pub const Ctc_SigType_CTC_SHA512wECDSA: Ctc_SigType = 526;
pub const Ctc_SigType_CTC_ED25519: Ctc_SigType = 256;
pub type Ctc_SigType = ::std::os::raw::c_uint;
pub const Ctc_Encoding_CTC_UTF8: Ctc_Encoding = 12;
pub const Ctc_Encoding_CTC_PRINTABLE: Ctc_Encoding = 19;
pub type Ctc_Encoding = ::std::os::raw::c_uint;
pub const Ctc_Misc_CTC_COUNTRY_SIZE: Ctc_Misc = 2;
pub const Ctc_Misc_CTC_NAME_SIZE: Ctc_Misc = 64;
pub const Ctc_Misc_CTC_DATE_SIZE: Ctc_Misc = 32;
pub const Ctc_Misc_CTC_MAX_ALT_SIZE: Ctc_Misc = 16384;
pub const Ctc_Misc_CTC_SERIAL_SIZE: Ctc_Misc = 16;
pub type Ctc_Misc = ::std::os::raw::c_uint;
extern "C" {
    pub fn wc_DerToPem(
        der: *const byte,
        derSz: word32,
        output: *mut byte,
        outputSz: word32,
        type_: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_DerToPemEx(
        der: *const byte,
        derSz: word32,
        output: *mut byte,
        outputSz: word32,
        cipherIno: *mut byte,
        type_: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_EncodeSignature(
        out: *mut byte,
        digest: *const byte,
        digSz: word32,
        hashOID: ::std::os::raw::c_int,
    ) -> word32;
}
extern "C" {
    pub fn wc_GetCTC_HashOID(type_: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_GetPkcs8TraditionalOffset(
        input: *mut byte,
        inOutIdx: *mut word32,
        sz: word32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_CreatePKCS8Key(
        out: *mut byte,
        outSz: *mut word32,
        key: *mut byte,
        keySz: word32,
        algoID: ::std::os::raw::c_int,
        curveOID: *const byte,
        oidSz: word32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_GetTime(
        timePtr: *mut ::std::os::raw::c_void,
        timeSize: word32,
    ) -> ::std::os::raw::c_int;
}
pub const ISSUER: ::std::os::raw::c_uint = 0;
pub const SUBJECT: ::std::os::raw::c_uint = 1;
pub const EXTERNAL_SERIAL_SIZE: ::std::os::raw::c_uint = 32;
pub const BEFORE: ::std::os::raw::c_uint = 0;
pub const AFTER: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_40 = ::std::os::raw::c_uint;
pub const ASN_Tags_ASN_BOOLEAN: ASN_Tags = 1;
pub const ASN_Tags_ASN_INTEGER: ASN_Tags = 2;
pub const ASN_Tags_ASN_BIT_STRING: ASN_Tags = 3;
pub const ASN_Tags_ASN_OCTET_STRING: ASN_Tags = 4;
pub const ASN_Tags_ASN_TAG_NULL: ASN_Tags = 5;
pub const ASN_Tags_ASN_OBJECT_ID: ASN_Tags = 6;
pub const ASN_Tags_ASN_ENUMERATED: ASN_Tags = 10;
pub const ASN_Tags_ASN_UTF8STRING: ASN_Tags = 12;
pub const ASN_Tags_ASN_SEQUENCE: ASN_Tags = 16;
pub const ASN_Tags_ASN_SET: ASN_Tags = 17;
pub const ASN_Tags_ASN_UTC_TIME: ASN_Tags = 23;
pub const ASN_Tags_ASN_OTHER_TYPE: ASN_Tags = 0;
pub const ASN_Tags_ASN_RFC822_TYPE: ASN_Tags = 1;
pub const ASN_Tags_ASN_DNS_TYPE: ASN_Tags = 2;
pub const ASN_Tags_ASN_DIR_TYPE: ASN_Tags = 4;
pub const ASN_Tags_ASN_GENERALIZED_TIME: ASN_Tags = 24;
pub const ASN_Tags_CRL_EXTENSIONS: ASN_Tags = 160;
pub const ASN_Tags_ASN_EXTENSIONS: ASN_Tags = 163;
pub const ASN_Tags_ASN_LONG_LENGTH: ASN_Tags = 128;
pub type ASN_Tags = ::std::os::raw::c_uint;
pub const ASN_Flags_ASN_CONSTRUCTED: ASN_Flags = 32;
pub const ASN_Flags_ASN_CONTEXT_SPECIFIC: ASN_Flags = 128;
pub type ASN_Flags = ::std::os::raw::c_uint;
pub const DN_Tags_ASN_COMMON_NAME: DN_Tags = 3;
pub const DN_Tags_ASN_SUR_NAME: DN_Tags = 4;
pub const DN_Tags_ASN_SERIAL_NUMBER: DN_Tags = 5;
pub const DN_Tags_ASN_COUNTRY_NAME: DN_Tags = 6;
pub const DN_Tags_ASN_LOCALITY_NAME: DN_Tags = 7;
pub const DN_Tags_ASN_STATE_NAME: DN_Tags = 8;
pub const DN_Tags_ASN_ORG_NAME: DN_Tags = 10;
pub const DN_Tags_ASN_ORGUNIT_NAME: DN_Tags = 11;
pub type DN_Tags = ::std::os::raw::c_uint;
pub const PBES_PBE_MD5_DES: PBES = 0;
pub const PBES_PBE_SHA1_DES: PBES = 1;
pub const PBES_PBE_SHA1_DES3: PBES = 2;
pub const PBES_PBE_SHA1_RC4_128: PBES = 3;
pub const PBES_PBES2: PBES = 13;
pub type PBES = ::std::os::raw::c_uint;
pub const ENCRYPTION_TYPES_DES_TYPE: ENCRYPTION_TYPES = 0;
pub const ENCRYPTION_TYPES_DES3_TYPE: ENCRYPTION_TYPES = 1;
pub const ENCRYPTION_TYPES_RC4_TYPE: ENCRYPTION_TYPES = 2;
pub type ENCRYPTION_TYPES = ::std::os::raw::c_uint;
pub const ECC_TYPES_ECC_PREFIX_0: ECC_TYPES = 160;
pub const ECC_TYPES_ECC_PREFIX_1: ECC_TYPES = 161;
pub type ECC_TYPES = ::std::os::raw::c_uint;
pub const Misc_ASN_ASN_NAME_MAX: Misc_ASN = 256;
pub const Misc_ASN_MAX_SALT_SIZE: Misc_ASN = 64;
pub const Misc_ASN_MAX_IV_SIZE: Misc_ASN = 64;
pub const Misc_ASN_MAX_KEY_SIZE: Misc_ASN = 64;
pub const Misc_ASN_PKCS5: Misc_ASN = 5;
pub const Misc_ASN_PKCS5v2: Misc_ASN = 6;
pub const Misc_ASN_PKCS8v0: Misc_ASN = 0;
pub const Misc_ASN_PKCS12v1: Misc_ASN = 12;
pub const Misc_ASN_MAX_UNICODE_SZ: Misc_ASN = 256;
pub const Misc_ASN_ASN_BOOL_SIZE: Misc_ASN = 2;
pub const Misc_ASN_ASN_ECC_HEADER_SZ: Misc_ASN = 2;
pub const Misc_ASN_ASN_ECC_CONTEXT_SZ: Misc_ASN = 2;
pub const Misc_ASN_KEYID_SIZE: Misc_ASN = 20;
pub const Misc_ASN_RSA_INTS: Misc_ASN = 8;
pub const Misc_ASN_DSA_INTS: Misc_ASN = 5;
pub const Misc_ASN_MIN_DATE_SIZE: Misc_ASN = 13;
pub const Misc_ASN_MAX_DATE_SIZE: Misc_ASN = 32;
pub const Misc_ASN_ASN_GEN_TIME_SZ: Misc_ASN = 15;
pub const Misc_ASN_MAX_ENCODED_SIG_SZ: Misc_ASN = 512;
pub const Misc_ASN_MAX_SIG_SZ: Misc_ASN = 256;
pub const Misc_ASN_MAX_ALGO_SZ: Misc_ASN = 20;
pub const Misc_ASN_MAX_SEQ_SZ: Misc_ASN = 5;
pub const Misc_ASN_MAX_SET_SZ: Misc_ASN = 5;
pub const Misc_ASN_MAX_OCTET_STR_SZ: Misc_ASN = 5;
pub const Misc_ASN_MAX_EXP_SZ: Misc_ASN = 5;
pub const Misc_ASN_MAX_PRSTR_SZ: Misc_ASN = 5;
pub const Misc_ASN_MAX_VERSION_SZ: Misc_ASN = 5;
pub const Misc_ASN_MAX_ENCODED_DIG_SZ: Misc_ASN = 73;
pub const Misc_ASN_MAX_RSA_INT_SZ: Misc_ASN = 517;
pub const Misc_ASN_MAX_NTRU_KEY_SZ: Misc_ASN = 610;
pub const Misc_ASN_MAX_NTRU_ENC_SZ: Misc_ASN = 628;
pub const Misc_ASN_MAX_LENGTH_SZ: Misc_ASN = 4;
pub const Misc_ASN_MAX_RSA_E_SZ: Misc_ASN = 16;
pub const Misc_ASN_MAX_CA_SZ: Misc_ASN = 32;
pub const Misc_ASN_MAX_SN_SZ: Misc_ASN = 35;
pub const Misc_ASN_MAX_DER_DIGEST_SZ: Misc_ASN = 98;
pub const Misc_ASN_OCSP_NONCE_EXT_SZ: Misc_ASN = 35;
pub const Misc_ASN_MAX_OCSP_EXT_SZ: Misc_ASN = 58;
pub const Misc_ASN_MAX_OCSP_NONCE_SZ: Misc_ASN = 16;
pub const Misc_ASN_EIGHTK_BUF: Misc_ASN = 8192;
pub const Misc_ASN_MAX_PUBLIC_KEY_SZ: Misc_ASN = 658;
pub const Misc_ASN_HEADER_ENCRYPTED_KEY_SIZE: Misc_ASN = 88;
pub const Misc_ASN_TRAILING_ZERO: Misc_ASN = 1;
pub const Misc_ASN_MIN_VERSION_SZ: Misc_ASN = 3;
pub type Misc_ASN = ::std::os::raw::c_uint;
pub const Oid_Types_oidHashType: Oid_Types = 0;
pub const Oid_Types_oidSigType: Oid_Types = 1;
pub const Oid_Types_oidKeyType: Oid_Types = 2;
pub const Oid_Types_oidCurveType: Oid_Types = 3;
pub const Oid_Types_oidBlkType: Oid_Types = 4;
pub const Oid_Types_oidOcspType: Oid_Types = 5;
pub const Oid_Types_oidCertExtType: Oid_Types = 6;
pub const Oid_Types_oidCertAuthInfoType: Oid_Types = 7;
pub const Oid_Types_oidCertPolicyType: Oid_Types = 8;
pub const Oid_Types_oidCertAltNameType: Oid_Types = 9;
pub const Oid_Types_oidCertKeyUseType: Oid_Types = 10;
pub const Oid_Types_oidKdfType: Oid_Types = 11;
pub const Oid_Types_oidKeyWrapType: Oid_Types = 12;
pub const Oid_Types_oidCmsKeyAgreeType: Oid_Types = 13;
pub const Oid_Types_oidIgnoreType: Oid_Types = 14;
pub type Oid_Types = ::std::os::raw::c_uint;
pub const Hash_Sum_MD2h: Hash_Sum = 646;
pub const Hash_Sum_MD5h: Hash_Sum = 649;
pub const Hash_Sum_SHAh: Hash_Sum = 88;
pub const Hash_Sum_SHA224h: Hash_Sum = 417;
pub const Hash_Sum_SHA256h: Hash_Sum = 414;
pub const Hash_Sum_SHA384h: Hash_Sum = 415;
pub const Hash_Sum_SHA512h: Hash_Sum = 416;
pub type Hash_Sum = ::std::os::raw::c_uint;
pub const Block_Sum_AES128CBCb: Block_Sum = 414;
pub const Block_Sum_AES192CBCb: Block_Sum = 434;
pub const Block_Sum_AES256CBCb: Block_Sum = 454;
pub const Block_Sum_DESb: Block_Sum = 69;
pub const Block_Sum_DES3b: Block_Sum = 652;
pub type Block_Sum = ::std::os::raw::c_uint;
pub const Key_Sum_DSAk: Key_Sum = 515;
pub const Key_Sum_RSAk: Key_Sum = 645;
pub const Key_Sum_NTRUk: Key_Sum = 274;
pub const Key_Sum_ECDSAk: Key_Sum = 518;
pub const Key_Sum_ED25519k: Key_Sum = 256;
pub type Key_Sum = ::std::os::raw::c_uint;
pub const KeyWrap_Sum_AES128_WRAP: KeyWrap_Sum = 417;
pub const KeyWrap_Sum_AES192_WRAP: KeyWrap_Sum = 437;
pub const KeyWrap_Sum_AES256_WRAP: KeyWrap_Sum = 457;
pub type KeyWrap_Sum = ::std::os::raw::c_uint;
pub const Key_Agree_dhSinglePass_stdDH_sha1kdf_scheme: Key_Agree = 464;
pub const Key_Agree_dhSinglePass_stdDH_sha224kdf_scheme: Key_Agree = 188;
pub const Key_Agree_dhSinglePass_stdDH_sha256kdf_scheme: Key_Agree = 189;
pub const Key_Agree_dhSinglePass_stdDH_sha384kdf_scheme: Key_Agree = 190;
pub const Key_Agree_dhSinglePass_stdDH_sha512kdf_scheme: Key_Agree = 191;
pub type Key_Agree = ::std::os::raw::c_uint;
pub const Ecc_Sum_ECC_SECP112R1_OID: Ecc_Sum = 182;
pub const Ecc_Sum_ECC_SECP112R2_OID: Ecc_Sum = 183;
pub const Ecc_Sum_ECC_SECP128R1_OID: Ecc_Sum = 204;
pub const Ecc_Sum_ECC_SECP128R2_OID: Ecc_Sum = 205;
pub const Ecc_Sum_ECC_SECP160R1_OID: Ecc_Sum = 184;
pub const Ecc_Sum_ECC_SECP160R2_OID: Ecc_Sum = 206;
pub const Ecc_Sum_ECC_SECP160K1_OID: Ecc_Sum = 185;
pub const Ecc_Sum_ECC_BRAINPOOLP160R1_OID: Ecc_Sum = 98;
pub const Ecc_Sum_ECC_SECP192R1_OID: Ecc_Sum = 520;
pub const Ecc_Sum_ECC_PRIME192V2_OID: Ecc_Sum = 521;
pub const Ecc_Sum_ECC_PRIME192V3_OID: Ecc_Sum = 522;
pub const Ecc_Sum_ECC_SECP192K1_OID: Ecc_Sum = 207;
pub const Ecc_Sum_ECC_BRAINPOOLP192R1_OID: Ecc_Sum = 100;
pub const Ecc_Sum_ECC_SECP224R1_OID: Ecc_Sum = 209;
pub const Ecc_Sum_ECC_SECP224K1_OID: Ecc_Sum = 208;
pub const Ecc_Sum_ECC_BRAINPOOLP224R1_OID: Ecc_Sum = 102;
pub const Ecc_Sum_ECC_PRIME239V1_OID: Ecc_Sum = 523;
pub const Ecc_Sum_ECC_PRIME239V2_OID: Ecc_Sum = 524;
pub const Ecc_Sum_ECC_PRIME239V3_OID: Ecc_Sum = 525;
pub const Ecc_Sum_ECC_SECP256R1_OID: Ecc_Sum = 526;
pub const Ecc_Sum_ECC_SECP256K1_OID: Ecc_Sum = 186;
pub const Ecc_Sum_ECC_BRAINPOOLP256R1_OID: Ecc_Sum = 104;
pub const Ecc_Sum_ECC_X25519_OID: Ecc_Sum = 365;
pub const Ecc_Sum_ECC_ED25519_OID: Ecc_Sum = 256;
pub const Ecc_Sum_ECC_BRAINPOOLP320R1_OID: Ecc_Sum = 106;
pub const Ecc_Sum_ECC_SECP384R1_OID: Ecc_Sum = 210;
pub const Ecc_Sum_ECC_BRAINPOOLP384R1_OID: Ecc_Sum = 108;
pub const Ecc_Sum_ECC_BRAINPOOLP512R1_OID: Ecc_Sum = 110;
pub const Ecc_Sum_ECC_SECP521R1_OID: Ecc_Sum = 211;
pub type Ecc_Sum = ::std::os::raw::c_uint;
pub const KDF_Sum_PBKDF2_OID: KDF_Sum = 660;
pub type KDF_Sum = ::std::os::raw::c_uint;
pub const Extensions_Sum_BASIC_CA_OID: Extensions_Sum = 133;
pub const Extensions_Sum_ALT_NAMES_OID: Extensions_Sum = 131;
pub const Extensions_Sum_CRL_DIST_OID: Extensions_Sum = 145;
pub const Extensions_Sum_AUTH_INFO_OID: Extensions_Sum = 69;
pub const Extensions_Sum_AUTH_KEY_OID: Extensions_Sum = 149;
pub const Extensions_Sum_SUBJ_KEY_OID: Extensions_Sum = 128;
pub const Extensions_Sum_CERT_POLICY_OID: Extensions_Sum = 146;
pub const Extensions_Sum_KEY_USAGE_OID: Extensions_Sum = 129;
pub const Extensions_Sum_INHIBIT_ANY_OID: Extensions_Sum = 168;
pub const Extensions_Sum_EXT_KEY_USAGE_OID: Extensions_Sum = 151;
pub const Extensions_Sum_NAME_CONS_OID: Extensions_Sum = 144;
pub const Extensions_Sum_PRIV_KEY_USAGE_PERIOD_OID: Extensions_Sum = 130;
pub const Extensions_Sum_SUBJECT_INFO_ACCESS: Extensions_Sum = 79;
pub const Extensions_Sum_POLICY_MAP_OID: Extensions_Sum = 147;
pub const Extensions_Sum_POLICY_CONST_OID: Extensions_Sum = 150;
pub const Extensions_Sum_ISSUE_ALT_NAMES_OID: Extensions_Sum = 132;
pub const Extensions_Sum_TLS_FEATURE_OID: Extensions_Sum = 92;
pub type Extensions_Sum = ::std::os::raw::c_uint;
pub const CertificatePolicy_Sum_CP_ANY_OID: CertificatePolicy_Sum = 146;
pub type CertificatePolicy_Sum = ::std::os::raw::c_uint;
pub const SepHardwareName_Sum_HW_NAME_OID: SepHardwareName_Sum = 79;
pub type SepHardwareName_Sum = ::std::os::raw::c_uint;
pub const AuthInfo_Sum_AIA_OCSP_OID: AuthInfo_Sum = 116;
pub const AuthInfo_Sum_AIA_CA_ISSUER_OID: AuthInfo_Sum = 117;
pub type AuthInfo_Sum = ::std::os::raw::c_uint;
pub const ExtKeyUsage_Sum_EKU_ANY_OID: ExtKeyUsage_Sum = 151;
pub const ExtKeyUsage_Sum_EKU_SERVER_AUTH_OID: ExtKeyUsage_Sum = 71;
pub const ExtKeyUsage_Sum_EKU_CLIENT_AUTH_OID: ExtKeyUsage_Sum = 72;
pub const ExtKeyUsage_Sum_EKU_CODESIGNING_OID: ExtKeyUsage_Sum = 73;
pub const ExtKeyUsage_Sum_EKU_EMAILPROTECT_OID: ExtKeyUsage_Sum = 74;
pub const ExtKeyUsage_Sum_EKU_TIMESTAMP_OID: ExtKeyUsage_Sum = 78;
pub const ExtKeyUsage_Sum_EKU_OCSP_SIGN_OID: ExtKeyUsage_Sum = 79;
pub type ExtKeyUsage_Sum = ::std::os::raw::c_uint;
pub const VerifyType_NO_VERIFY: VerifyType = 0;
pub const VerifyType_VERIFY: VerifyType = 1;
pub const VerifyType_VERIFY_CRL: VerifyType = 2;
pub const VerifyType_VERIFY_OCSP: VerifyType = 3;
pub type VerifyType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DNS_entry {
    pub next: *mut DNS_entry,
    pub name: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_DNS_entry() {
    assert_eq!(
        ::std::mem::size_of::<DNS_entry>(),
        16usize,
        concat!("Size of: ", stringify!(DNS_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<DNS_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(DNS_entry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DNS_entry>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DNS_entry),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DNS_entry>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DNS_entry),
            "::",
            stringify!(name)
        )
    );
}
impl Default for DNS_entry {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Base_entry {
    pub next: *mut Base_entry,
    pub name: *mut ::std::os::raw::c_char,
    pub nameSz: ::std::os::raw::c_int,
    pub type_: byte,
}
#[test]
fn bindgen_test_layout_Base_entry() {
    assert_eq!(
        ::std::mem::size_of::<Base_entry>(),
        24usize,
        concat!("Size of: ", stringify!(Base_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<Base_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(Base_entry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Base_entry>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Base_entry),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Base_entry>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Base_entry),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Base_entry>())).nameSz as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Base_entry),
            "::",
            stringify!(nameSz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Base_entry>())).type_ as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Base_entry),
            "::",
            stringify!(type_)
        )
    );
}
impl Default for Base_entry {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DecodedName {
    pub fullName: *mut ::std::os::raw::c_char,
    pub fullNameLen: ::std::os::raw::c_int,
    pub entryCount: ::std::os::raw::c_int,
    pub cnIdx: ::std::os::raw::c_int,
    pub cnLen: ::std::os::raw::c_int,
    pub snIdx: ::std::os::raw::c_int,
    pub snLen: ::std::os::raw::c_int,
    pub cIdx: ::std::os::raw::c_int,
    pub cLen: ::std::os::raw::c_int,
    pub lIdx: ::std::os::raw::c_int,
    pub lLen: ::std::os::raw::c_int,
    pub stIdx: ::std::os::raw::c_int,
    pub stLen: ::std::os::raw::c_int,
    pub oIdx: ::std::os::raw::c_int,
    pub oLen: ::std::os::raw::c_int,
    pub ouIdx: ::std::os::raw::c_int,
    pub ouLen: ::std::os::raw::c_int,
    pub emailIdx: ::std::os::raw::c_int,
    pub emailLen: ::std::os::raw::c_int,
    pub uidIdx: ::std::os::raw::c_int,
    pub uidLen: ::std::os::raw::c_int,
    pub serialIdx: ::std::os::raw::c_int,
    pub serialLen: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_DecodedName() {
    assert_eq!(
        ::std::mem::size_of::<DecodedName>(),
        96usize,
        concat!("Size of: ", stringify!(DecodedName))
    );
    assert_eq!(
        ::std::mem::align_of::<DecodedName>(),
        8usize,
        concat!("Alignment of ", stringify!(DecodedName))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedName>())).fullName as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedName),
            "::",
            stringify!(fullName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedName>())).fullNameLen as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedName),
            "::",
            stringify!(fullNameLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedName>())).entryCount as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedName),
            "::",
            stringify!(entryCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedName>())).cnIdx as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedName),
            "::",
            stringify!(cnIdx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedName>())).cnLen as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedName),
            "::",
            stringify!(cnLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedName>())).snIdx as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedName),
            "::",
            stringify!(snIdx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedName>())).snLen as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedName),
            "::",
            stringify!(snLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedName>())).cIdx as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedName),
            "::",
            stringify!(cIdx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedName>())).cLen as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedName),
            "::",
            stringify!(cLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedName>())).lIdx as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedName),
            "::",
            stringify!(lIdx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedName>())).lLen as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedName),
            "::",
            stringify!(lLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedName>())).stIdx as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedName),
            "::",
            stringify!(stIdx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedName>())).stLen as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedName),
            "::",
            stringify!(stLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedName>())).oIdx as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedName),
            "::",
            stringify!(oIdx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedName>())).oLen as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedName),
            "::",
            stringify!(oLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedName>())).ouIdx as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedName),
            "::",
            stringify!(ouIdx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedName>())).ouLen as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedName),
            "::",
            stringify!(ouLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedName>())).emailIdx as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedName),
            "::",
            stringify!(emailIdx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedName>())).emailLen as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedName),
            "::",
            stringify!(emailLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedName>())).uidIdx as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedName),
            "::",
            stringify!(uidIdx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedName>())).uidLen as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedName),
            "::",
            stringify!(uidLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedName>())).serialIdx as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedName),
            "::",
            stringify!(serialIdx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedName>())).serialLen as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedName),
            "::",
            stringify!(serialLen)
        )
    );
}
impl Default for DecodedName {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const SignatureState_SIG_STATE_BEGIN: SignatureState = 0;
pub const SignatureState_SIG_STATE_HASH: SignatureState = 1;
pub const SignatureState_SIG_STATE_KEY: SignatureState = 2;
pub const SignatureState_SIG_STATE_DO: SignatureState = 3;
pub const SignatureState_SIG_STATE_CHECK: SignatureState = 4;
pub type SignatureState = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SignatureCtx {
    pub heap: *mut ::std::os::raw::c_void,
    pub digest: *mut byte,
    pub out: *mut byte,
    pub plain: *mut byte,
    pub key: SignatureCtx__bindgen_ty_1,
    pub devId: ::std::os::raw::c_int,
    pub state: ::std::os::raw::c_int,
    pub typeH: ::std::os::raw::c_int,
    pub digestSz: ::std::os::raw::c_int,
    pub keyOID: word32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union SignatureCtx__bindgen_ty_1 {
    pub rsa: *mut RsaKey,
    pub ptr: *mut ::std::os::raw::c_void,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_SignatureCtx__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<SignatureCtx__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(SignatureCtx__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<SignatureCtx__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(SignatureCtx__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SignatureCtx__bindgen_ty_1>())).rsa as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SignatureCtx__bindgen_ty_1),
            "::",
            stringify!(rsa)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SignatureCtx__bindgen_ty_1>())).ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SignatureCtx__bindgen_ty_1),
            "::",
            stringify!(ptr)
        )
    );
}
impl Default for SignatureCtx__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout_SignatureCtx() {
    assert_eq!(
        ::std::mem::size_of::<SignatureCtx>(),
        64usize,
        concat!("Size of: ", stringify!(SignatureCtx))
    );
    assert_eq!(
        ::std::mem::align_of::<SignatureCtx>(),
        8usize,
        concat!("Alignment of ", stringify!(SignatureCtx))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SignatureCtx>())).heap as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SignatureCtx),
            "::",
            stringify!(heap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SignatureCtx>())).digest as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SignatureCtx),
            "::",
            stringify!(digest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SignatureCtx>())).out as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SignatureCtx),
            "::",
            stringify!(out)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SignatureCtx>())).plain as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SignatureCtx),
            "::",
            stringify!(plain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SignatureCtx>())).key as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SignatureCtx),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SignatureCtx>())).devId as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SignatureCtx),
            "::",
            stringify!(devId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SignatureCtx>())).state as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(SignatureCtx),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SignatureCtx>())).typeH as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SignatureCtx),
            "::",
            stringify!(typeH)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SignatureCtx>())).digestSz as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(SignatureCtx),
            "::",
            stringify!(digestSz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SignatureCtx>())).keyOID as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(SignatureCtx),
            "::",
            stringify!(keyOID)
        )
    );
}
impl Default for SignatureCtx {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const CertSignState_CERTSIGN_STATE_BEGIN: CertSignState = 0;
pub const CertSignState_CERTSIGN_STATE_DIGEST: CertSignState = 1;
pub const CertSignState_CERTSIGN_STATE_ENCODE: CertSignState = 2;
pub const CertSignState_CERTSIGN_STATE_DO: CertSignState = 3;
pub type CertSignState = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CertSignCtx {
    pub sig: *mut byte,
    pub digest: *mut byte,
    pub encSig: *mut byte,
    pub encSigSz: ::std::os::raw::c_int,
    pub state: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_CertSignCtx() {
    assert_eq!(
        ::std::mem::size_of::<CertSignCtx>(),
        32usize,
        concat!("Size of: ", stringify!(CertSignCtx))
    );
    assert_eq!(
        ::std::mem::align_of::<CertSignCtx>(),
        8usize,
        concat!("Alignment of ", stringify!(CertSignCtx))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CertSignCtx>())).sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CertSignCtx),
            "::",
            stringify!(sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CertSignCtx>())).digest as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CertSignCtx),
            "::",
            stringify!(digest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CertSignCtx>())).encSig as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CertSignCtx),
            "::",
            stringify!(encSig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CertSignCtx>())).encSigSz as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CertSignCtx),
            "::",
            stringify!(encSigSz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CertSignCtx>())).state as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(CertSignCtx),
            "::",
            stringify!(state)
        )
    );
}
impl Default for CertSignCtx {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DecodedCert {
    pub publicKey: *mut byte,
    pub pubKeySize: word32,
    pub pubKeyStored: ::std::os::raw::c_int,
    pub certBegin: word32,
    pub sigIndex: word32,
    pub sigLength: word32,
    pub signatureOID: word32,
    pub keyOID: word32,
    pub version: ::std::os::raw::c_int,
    pub altNames: *mut DNS_entry,
    pub altEmailNames: *mut DNS_entry,
    pub permittedNames: *mut Base_entry,
    pub excludedNames: *mut Base_entry,
    pub subjectHash: [byte; 20usize],
    pub issuerHash: [byte; 20usize],
    pub signature: *mut byte,
    pub subjectCN: *mut ::std::os::raw::c_char,
    pub subjectCNLen: ::std::os::raw::c_int,
    pub subjectCNEnc: ::std::os::raw::c_char,
    pub subjectCNStored: ::std::os::raw::c_int,
    pub issuer: [::std::os::raw::c_char; 256usize],
    pub subject: [::std::os::raw::c_char; 256usize],
    pub verify: ::std::os::raw::c_int,
    pub source: *mut byte,
    pub srcIdx: word32,
    pub maxIdx: word32,
    pub heap: *mut ::std::os::raw::c_void,
    pub serial: [byte; 32usize],
    pub serialSz: ::std::os::raw::c_int,
    pub extensions: *mut byte,
    pub extensionsSz: ::std::os::raw::c_int,
    pub extensionsIdx: word32,
    pub extAuthInfo: *mut byte,
    pub extAuthInfoSz: ::std::os::raw::c_int,
    pub extCrlInfo: *mut byte,
    pub extCrlInfoSz: ::std::os::raw::c_int,
    pub extSubjKeyId: [byte; 20usize],
    pub extSubjKeyIdSet: byte,
    pub extAuthKeyId: [byte; 20usize],
    pub extAuthKeyIdSet: byte,
    pub extNameConstraintSet: byte,
    pub isCA: byte,
    pub pathLengthSet: byte,
    pub pathLength: byte,
    pub weOwnAltNames: byte,
    pub extKeyUsageSet: byte,
    pub extKeyUsage: word16,
    pub extExtKeyUsageSet: byte,
    pub extExtKeyUsage: byte,
    pub beforeDate: *mut byte,
    pub beforeDateLen: ::std::os::raw::c_int,
    pub afterDate: *mut byte,
    pub afterDateLen: ::std::os::raw::c_int,
    pub subjectRaw: *mut byte,
    pub subjectRawLen: ::std::os::raw::c_int,
    pub ca: *mut Signer,
    pub sigCtx: SignatureCtx,
}
#[test]
fn bindgen_test_layout_DecodedCert() {
    assert_eq!(
        ::std::mem::size_of::<DecodedCert>(),
        936usize,
        concat!("Size of: ", stringify!(DecodedCert))
    );
    assert_eq!(
        ::std::mem::align_of::<DecodedCert>(),
        8usize,
        concat!("Alignment of ", stringify!(DecodedCert))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedCert>())).publicKey as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedCert),
            "::",
            stringify!(publicKey)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedCert>())).pubKeySize as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedCert),
            "::",
            stringify!(pubKeySize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedCert>())).pubKeyStored as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedCert),
            "::",
            stringify!(pubKeyStored)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedCert>())).certBegin as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedCert),
            "::",
            stringify!(certBegin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedCert>())).sigIndex as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedCert),
            "::",
            stringify!(sigIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedCert>())).sigLength as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedCert),
            "::",
            stringify!(sigLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedCert>())).signatureOID as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedCert),
            "::",
            stringify!(signatureOID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedCert>())).keyOID as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedCert),
            "::",
            stringify!(keyOID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedCert>())).version as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedCert),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedCert>())).altNames as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedCert),
            "::",
            stringify!(altNames)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedCert>())).altEmailNames as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedCert),
            "::",
            stringify!(altEmailNames)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedCert>())).permittedNames as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedCert),
            "::",
            stringify!(permittedNames)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedCert>())).excludedNames as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedCert),
            "::",
            stringify!(excludedNames)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedCert>())).subjectHash as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedCert),
            "::",
            stringify!(subjectHash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedCert>())).issuerHash as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedCert),
            "::",
            stringify!(issuerHash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedCert>())).signature as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedCert),
            "::",
            stringify!(signature)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedCert>())).subjectCN as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedCert),
            "::",
            stringify!(subjectCN)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedCert>())).subjectCNLen as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedCert),
            "::",
            stringify!(subjectCNLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedCert>())).subjectCNEnc as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedCert),
            "::",
            stringify!(subjectCNEnc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedCert>())).subjectCNStored as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedCert),
            "::",
            stringify!(subjectCNStored)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedCert>())).issuer as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedCert),
            "::",
            stringify!(issuer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedCert>())).subject as *const _ as usize },
        396usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedCert),
            "::",
            stringify!(subject)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedCert>())).verify as *const _ as usize },
        652usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedCert),
            "::",
            stringify!(verify)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedCert>())).source as *const _ as usize },
        656usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedCert),
            "::",
            stringify!(source)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedCert>())).srcIdx as *const _ as usize },
        664usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedCert),
            "::",
            stringify!(srcIdx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedCert>())).maxIdx as *const _ as usize },
        668usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedCert),
            "::",
            stringify!(maxIdx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedCert>())).heap as *const _ as usize },
        672usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedCert),
            "::",
            stringify!(heap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedCert>())).serial as *const _ as usize },
        680usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedCert),
            "::",
            stringify!(serial)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedCert>())).serialSz as *const _ as usize },
        712usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedCert),
            "::",
            stringify!(serialSz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedCert>())).extensions as *const _ as usize },
        720usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedCert),
            "::",
            stringify!(extensions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedCert>())).extensionsSz as *const _ as usize },
        728usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedCert),
            "::",
            stringify!(extensionsSz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedCert>())).extensionsIdx as *const _ as usize },
        732usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedCert),
            "::",
            stringify!(extensionsIdx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedCert>())).extAuthInfo as *const _ as usize },
        736usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedCert),
            "::",
            stringify!(extAuthInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedCert>())).extAuthInfoSz as *const _ as usize },
        744usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedCert),
            "::",
            stringify!(extAuthInfoSz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedCert>())).extCrlInfo as *const _ as usize },
        752usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedCert),
            "::",
            stringify!(extCrlInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedCert>())).extCrlInfoSz as *const _ as usize },
        760usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedCert),
            "::",
            stringify!(extCrlInfoSz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedCert>())).extSubjKeyId as *const _ as usize },
        764usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedCert),
            "::",
            stringify!(extSubjKeyId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedCert>())).extSubjKeyIdSet as *const _ as usize },
        784usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedCert),
            "::",
            stringify!(extSubjKeyIdSet)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedCert>())).extAuthKeyId as *const _ as usize },
        785usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedCert),
            "::",
            stringify!(extAuthKeyId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedCert>())).extAuthKeyIdSet as *const _ as usize },
        805usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedCert),
            "::",
            stringify!(extAuthKeyIdSet)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<DecodedCert>())).extNameConstraintSet as *const _ as usize
        },
        806usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedCert),
            "::",
            stringify!(extNameConstraintSet)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedCert>())).isCA as *const _ as usize },
        807usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedCert),
            "::",
            stringify!(isCA)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedCert>())).pathLengthSet as *const _ as usize },
        808usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedCert),
            "::",
            stringify!(pathLengthSet)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedCert>())).pathLength as *const _ as usize },
        809usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedCert),
            "::",
            stringify!(pathLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedCert>())).weOwnAltNames as *const _ as usize },
        810usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedCert),
            "::",
            stringify!(weOwnAltNames)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedCert>())).extKeyUsageSet as *const _ as usize },
        811usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedCert),
            "::",
            stringify!(extKeyUsageSet)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedCert>())).extKeyUsage as *const _ as usize },
        812usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedCert),
            "::",
            stringify!(extKeyUsage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedCert>())).extExtKeyUsageSet as *const _ as usize },
        814usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedCert),
            "::",
            stringify!(extExtKeyUsageSet)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedCert>())).extExtKeyUsage as *const _ as usize },
        815usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedCert),
            "::",
            stringify!(extExtKeyUsage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedCert>())).beforeDate as *const _ as usize },
        816usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedCert),
            "::",
            stringify!(beforeDate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedCert>())).beforeDateLen as *const _ as usize },
        824usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedCert),
            "::",
            stringify!(beforeDateLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedCert>())).afterDate as *const _ as usize },
        832usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedCert),
            "::",
            stringify!(afterDate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedCert>())).afterDateLen as *const _ as usize },
        840usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedCert),
            "::",
            stringify!(afterDateLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedCert>())).subjectRaw as *const _ as usize },
        848usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedCert),
            "::",
            stringify!(subjectRaw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedCert>())).subjectRawLen as *const _ as usize },
        856usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedCert),
            "::",
            stringify!(subjectRawLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedCert>())).ca as *const _ as usize },
        864usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedCert),
            "::",
            stringify!(ca)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DecodedCert>())).sigCtx as *const _ as usize },
        872usize,
        concat!(
            "Offset of field: ",
            stringify!(DecodedCert),
            "::",
            stringify!(sigCtx)
        )
    );
}
impl Default for DecodedCert {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WOLFSSL_ASN1_OBJECT {
    pub heap: *mut ::std::os::raw::c_void,
    pub obj: *mut byte,
    pub type_: ::std::os::raw::c_int,
    pub objSz: word32,
    pub dynamic: byte,
}
#[test]
fn bindgen_test_layout_WOLFSSL_ASN1_OBJECT() {
    assert_eq!(
        ::std::mem::size_of::<WOLFSSL_ASN1_OBJECT>(),
        32usize,
        concat!("Size of: ", stringify!(WOLFSSL_ASN1_OBJECT))
    );
    assert_eq!(
        ::std::mem::align_of::<WOLFSSL_ASN1_OBJECT>(),
        8usize,
        concat!("Alignment of ", stringify!(WOLFSSL_ASN1_OBJECT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WOLFSSL_ASN1_OBJECT>())).heap as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WOLFSSL_ASN1_OBJECT),
            "::",
            stringify!(heap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WOLFSSL_ASN1_OBJECT>())).obj as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WOLFSSL_ASN1_OBJECT),
            "::",
            stringify!(obj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WOLFSSL_ASN1_OBJECT>())).type_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WOLFSSL_ASN1_OBJECT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WOLFSSL_ASN1_OBJECT>())).objSz as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(WOLFSSL_ASN1_OBJECT),
            "::",
            stringify!(objSz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WOLFSSL_ASN1_OBJECT>())).dynamic as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WOLFSSL_ASN1_OBJECT),
            "::",
            stringify!(dynamic)
        )
    );
}
impl Default for WOLFSSL_ASN1_OBJECT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub static mut BEGIN_CERT: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut END_CERT: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut BEGIN_CERT_REQ: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut END_CERT_REQ: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut BEGIN_DSA_PARAM: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut END_DSA_PARAM: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut BEGIN_DH_PARAM: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut END_DH_PARAM: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut BEGIN_X509_CRL: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut END_X509_CRL: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut BEGIN_RSA_PRIV: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut END_RSA_PRIV: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut BEGIN_PRIV_KEY: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut END_PRIV_KEY: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut BEGIN_ENC_PRIV_KEY: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut END_ENC_PRIV_KEY: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut BEGIN_EC_PRIV: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut END_EC_PRIV: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut BEGIN_DSA_PRIV: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut END_DSA_PRIV: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut BEGIN_PUB_KEY: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut END_PUB_KEY: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut BEGIN_EDDSA_PRIV: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut END_EDDSA_PRIV: *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Signer {
    pub pubKeySize: word32,
    pub keyOID: word32,
    pub keyUsage: word16,
    pub pathLength: byte,
    pub pathLengthSet: byte,
    pub publicKey: *mut byte,
    pub nameLen: ::std::os::raw::c_int,
    pub name: *mut ::std::os::raw::c_char,
    pub permittedNames: *mut Base_entry,
    pub excludedNames: *mut Base_entry,
    pub subjectNameHash: [byte; 20usize],
    pub subjectKeyIdHash: [byte; 20usize],
    pub next: *mut Signer,
}
#[test]
fn bindgen_test_layout_Signer() {
    assert_eq!(
        ::std::mem::size_of::<Signer>(),
        104usize,
        concat!("Size of: ", stringify!(Signer))
    );
    assert_eq!(
        ::std::mem::align_of::<Signer>(),
        8usize,
        concat!("Alignment of ", stringify!(Signer))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Signer>())).pubKeySize as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Signer),
            "::",
            stringify!(pubKeySize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Signer>())).keyOID as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Signer),
            "::",
            stringify!(keyOID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Signer>())).keyUsage as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Signer),
            "::",
            stringify!(keyUsage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Signer>())).pathLength as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(Signer),
            "::",
            stringify!(pathLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Signer>())).pathLengthSet as *const _ as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(Signer),
            "::",
            stringify!(pathLengthSet)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Signer>())).publicKey as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Signer),
            "::",
            stringify!(publicKey)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Signer>())).nameLen as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Signer),
            "::",
            stringify!(nameLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Signer>())).name as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Signer),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Signer>())).permittedNames as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Signer),
            "::",
            stringify!(permittedNames)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Signer>())).excludedNames as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Signer),
            "::",
            stringify!(excludedNames)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Signer>())).subjectNameHash as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Signer),
            "::",
            stringify!(subjectNameHash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Signer>())).subjectKeyIdHash as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(Signer),
            "::",
            stringify!(subjectKeyIdHash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Signer>())).next as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(Signer),
            "::",
            stringify!(next)
        )
    );
}
impl Default for Signer {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn FreeAltNames(arg1: *mut DNS_entry, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn FreeNameSubtrees(arg1: *mut Base_entry, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn InitDecodedCert(
        arg1: *mut DecodedCert,
        arg2: *mut byte,
        arg3: word32,
        arg4: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn FreeDecodedCert(arg1: *mut DecodedCert);
}
extern "C" {
    pub fn ParseCert(
        arg1: *mut DecodedCert,
        type_: ::std::os::raw::c_int,
        verify: ::std::os::raw::c_int,
        cm: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ParseCertRelative(
        arg1: *mut DecodedCert,
        type_: ::std::os::raw::c_int,
        verify: ::std::os::raw::c_int,
        cm: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DecodeToKey(
        arg1: *mut DecodedCert,
        verify: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MakeSigner(arg1: *mut ::std::os::raw::c_void) -> *mut Signer;
}
extern "C" {
    pub fn FreeSigner(arg1: *mut Signer, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn FreeSignerTable(
        arg1: *mut *mut Signer,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn ToTraditional(buffer: *mut byte, length: word32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ToTraditionalInline(
        input: *const byte,
        inOutIdx: *mut word32,
        length: word32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ToTraditionalEnc(
        buffer: *mut byte,
        length: word32,
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DecryptContent(
        input: *mut byte,
        sz: word32,
        psw: *const ::std::os::raw::c_char,
        pswSz: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_GetKeyOID(
        key: *mut byte,
        keySz: word32,
        curveOID: *mut *const byte,
        oidSz: *mut word32,
        algoID: *mut ::std::os::raw::c_int,
        heap: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
pub type wolfssl_tm = tm;
extern "C" {
    pub fn ExtractDate(
        date: *const ::std::os::raw::c_uchar,
        format: ::std::os::raw::c_uchar,
        certTime: *mut wolfssl_tm,
        idx: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ValidateDate(
        date: *const byte,
        format: byte,
        dateType: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GetShortInt(
        input: *const byte,
        inOutIdx: *mut word32,
        number: *mut ::std::os::raw::c_int,
        maxIdx: word32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GetLength(
        input: *const byte,
        inOutIdx: *mut word32,
        len: *mut ::std::os::raw::c_int,
        maxIdx: word32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GetSequence(
        input: *const byte,
        inOutIdx: *mut word32,
        len: *mut ::std::os::raw::c_int,
        maxIdx: word32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GetSet(
        input: *const byte,
        inOutIdx: *mut word32,
        len: *mut ::std::os::raw::c_int,
        maxIdx: word32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GetMyVersion(
        input: *const byte,
        inOutIdx: *mut word32,
        version: *mut ::std::os::raw::c_int,
        maxIdx: word32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GetInt(
        mpi: *mut mp_int,
        input: *const byte,
        inOutIdx: *mut word32,
        maxIdx: word32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GetObjectId(
        input: *const byte,
        inOutIdx: *mut word32,
        oid: *mut word32,
        oidType: word32,
        maxIdx: word32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GetAlgoId(
        input: *const byte,
        inOutIdx: *mut word32,
        oid: *mut word32,
        oidType: word32,
        maxIdx: word32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SetLength(length: word32, output: *mut byte) -> word32;
}
extern "C" {
    pub fn SetSequence(len: word32, output: *mut byte) -> word32;
}
extern "C" {
    pub fn SetOctetString(len: word32, output: *mut byte) -> word32;
}
extern "C" {
    pub fn SetImplicit(tag: byte, number: byte, len: word32, output: *mut byte) -> word32;
}
extern "C" {
    pub fn SetExplicit(number: byte, len: word32, output: *mut byte) -> word32;
}
extern "C" {
    pub fn SetSet(len: word32, output: *mut byte) -> word32;
}
extern "C" {
    pub fn SetAlgoID(
        algoOID: ::std::os::raw::c_int,
        output: *mut byte,
        type_: ::std::os::raw::c_int,
        curveSz: ::std::os::raw::c_int,
    ) -> word32;
}
extern "C" {
    pub fn SetMyVersion(
        version: word32,
        output: *mut byte,
        header: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SetSerialNumber(
        sn: *const byte,
        snSz: word32,
        output: *mut byte,
        maxSnSz: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GetSerialNumber(
        input: *const byte,
        inOutIdx: *mut word32,
        serial: *mut byte,
        serialSz: *mut ::std::os::raw::c_int,
        maxIdx: word32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GetNameHash(
        source: *const byte,
        idx: *mut word32,
        hash: *mut byte,
        maxIdx: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_CheckPrivateKey(
        key: *mut byte,
        keySz: word32,
        der: *mut DecodedCert,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn InitSignatureCtx(
        sigCtx: *mut SignatureCtx,
        heap: *mut ::std::os::raw::c_void,
        devId: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn FreeSignatureCtx(sigCtx: *mut SignatureCtx);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CertStatus {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RevokedCert {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct attestation_verification_report_t {
    pub ias_report: [u8; 2048usize],
    pub ias_report_len: u32,
    pub ias_sign_ca_cert: [u8; 2048usize],
    pub ias_sign_ca_cert_len: u32,
    pub ias_sign_cert: [u8; 2048usize],
    pub ias_sign_cert_len: u32,
    pub ias_report_signature: [u8; 2048usize],
    pub ias_report_signature_len: u32,
}
#[test]
fn bindgen_test_layout_attestation_verification_report_t() {
    assert_eq!(
        ::std::mem::size_of::<attestation_verification_report_t>(),
        8208usize,
        concat!("Size of: ", stringify!(attestation_verification_report_t))
    );
    assert_eq!(
        ::std::mem::align_of::<attestation_verification_report_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(attestation_verification_report_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<attestation_verification_report_t>())).ias_report as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(attestation_verification_report_t),
            "::",
            stringify!(ias_report)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<attestation_verification_report_t>())).ias_report_len as *const _
                as usize
        },
        2048usize,
        concat!(
            "Offset of field: ",
            stringify!(attestation_verification_report_t),
            "::",
            stringify!(ias_report_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<attestation_verification_report_t>())).ias_sign_ca_cert
                as *const _ as usize
        },
        2052usize,
        concat!(
            "Offset of field: ",
            stringify!(attestation_verification_report_t),
            "::",
            stringify!(ias_sign_ca_cert)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<attestation_verification_report_t>())).ias_sign_ca_cert_len
                as *const _ as usize
        },
        4100usize,
        concat!(
            "Offset of field: ",
            stringify!(attestation_verification_report_t),
            "::",
            stringify!(ias_sign_ca_cert_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<attestation_verification_report_t>())).ias_sign_cert as *const _
                as usize
        },
        4104usize,
        concat!(
            "Offset of field: ",
            stringify!(attestation_verification_report_t),
            "::",
            stringify!(ias_sign_cert)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<attestation_verification_report_t>())).ias_sign_cert_len
                as *const _ as usize
        },
        6152usize,
        concat!(
            "Offset of field: ",
            stringify!(attestation_verification_report_t),
            "::",
            stringify!(ias_sign_cert_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<attestation_verification_report_t>())).ias_report_signature
                as *const _ as usize
        },
        6156usize,
        concat!(
            "Offset of field: ",
            stringify!(attestation_verification_report_t),
            "::",
            stringify!(ias_report_signature)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<attestation_verification_report_t>())).ias_report_signature_len
                as *const _ as usize
        },
        8204usize,
        concat!(
            "Offset of field: ",
            stringify!(attestation_verification_report_t),
            "::",
            stringify!(ias_report_signature_len)
        )
    );
}
impl Default for attestation_verification_report_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const rsa_3072_der_len: ::std::os::raw::c_int = 1766;
pub const rsa_pub_3072_pcks_der_len: ::std::os::raw::c_int = 422;
pub const rsa_pub_3072_pcks_header_len: ::std::os::raw::c_int = 24;
pub const rsa_pub_3072_raw_der_len: ::std::os::raw::c_int = 398;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ecdsa_attestation_evidence_t {
    pub quote: [u8; 2048usize],
    pub quote_len: u32,
    pub pck_crt: [u8; 2048usize],
    pub pck_crt_len: u32,
    pub pck_sign_chain: [u8; 4096usize],
    pub pck_sign_chain_len: u32,
    pub tcb_info: [u8; 4096usize],
    pub tcb_info_len: u32,
    pub tcb_sign_chain: [u8; 4096usize],
    pub tcb_sign_chain_len: u32,
    pub qe_identity: [u8; 1024usize],
    pub qe_identity_len: u32,
    pub root_ca_crl: [u8; 1024usize],
    pub root_ca_crl_len: u32,
    pub pck_crl: [u8; 1024usize],
    pub pck_crl_len: u32,
}
#[test]
fn bindgen_test_layout_ecdsa_attestation_evidence_t() {
    assert_eq!(
        ::std::mem::size_of::<ecdsa_attestation_evidence_t>(),
        19488usize,
        concat!("Size of: ", stringify!(ecdsa_attestation_evidence_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ecdsa_attestation_evidence_t>(),
        4usize,
        concat!("Alignment of ", stringify!(ecdsa_attestation_evidence_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ecdsa_attestation_evidence_t>())).quote as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ecdsa_attestation_evidence_t),
            "::",
            stringify!(quote)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ecdsa_attestation_evidence_t>())).quote_len as *const _ as usize
        },
        2048usize,
        concat!(
            "Offset of field: ",
            stringify!(ecdsa_attestation_evidence_t),
            "::",
            stringify!(quote_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ecdsa_attestation_evidence_t>())).pck_crt as *const _ as usize
        },
        2052usize,
        concat!(
            "Offset of field: ",
            stringify!(ecdsa_attestation_evidence_t),
            "::",
            stringify!(pck_crt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ecdsa_attestation_evidence_t>())).pck_crt_len as *const _
                as usize
        },
        4100usize,
        concat!(
            "Offset of field: ",
            stringify!(ecdsa_attestation_evidence_t),
            "::",
            stringify!(pck_crt_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ecdsa_attestation_evidence_t>())).pck_sign_chain as *const _
                as usize
        },
        4104usize,
        concat!(
            "Offset of field: ",
            stringify!(ecdsa_attestation_evidence_t),
            "::",
            stringify!(pck_sign_chain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ecdsa_attestation_evidence_t>())).pck_sign_chain_len as *const _
                as usize
        },
        8200usize,
        concat!(
            "Offset of field: ",
            stringify!(ecdsa_attestation_evidence_t),
            "::",
            stringify!(pck_sign_chain_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ecdsa_attestation_evidence_t>())).tcb_info as *const _ as usize
        },
        8204usize,
        concat!(
            "Offset of field: ",
            stringify!(ecdsa_attestation_evidence_t),
            "::",
            stringify!(tcb_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ecdsa_attestation_evidence_t>())).tcb_info_len as *const _
                as usize
        },
        12300usize,
        concat!(
            "Offset of field: ",
            stringify!(ecdsa_attestation_evidence_t),
            "::",
            stringify!(tcb_info_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ecdsa_attestation_evidence_t>())).tcb_sign_chain as *const _
                as usize
        },
        12304usize,
        concat!(
            "Offset of field: ",
            stringify!(ecdsa_attestation_evidence_t),
            "::",
            stringify!(tcb_sign_chain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ecdsa_attestation_evidence_t>())).tcb_sign_chain_len as *const _
                as usize
        },
        16400usize,
        concat!(
            "Offset of field: ",
            stringify!(ecdsa_attestation_evidence_t),
            "::",
            stringify!(tcb_sign_chain_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ecdsa_attestation_evidence_t>())).qe_identity as *const _
                as usize
        },
        16404usize,
        concat!(
            "Offset of field: ",
            stringify!(ecdsa_attestation_evidence_t),
            "::",
            stringify!(qe_identity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ecdsa_attestation_evidence_t>())).qe_identity_len as *const _
                as usize
        },
        17428usize,
        concat!(
            "Offset of field: ",
            stringify!(ecdsa_attestation_evidence_t),
            "::",
            stringify!(qe_identity_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ecdsa_attestation_evidence_t>())).root_ca_crl as *const _
                as usize
        },
        17432usize,
        concat!(
            "Offset of field: ",
            stringify!(ecdsa_attestation_evidence_t),
            "::",
            stringify!(root_ca_crl)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ecdsa_attestation_evidence_t>())).root_ca_crl_len as *const _
                as usize
        },
        18456usize,
        concat!(
            "Offset of field: ",
            stringify!(ecdsa_attestation_evidence_t),
            "::",
            stringify!(root_ca_crl_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ecdsa_attestation_evidence_t>())).pck_crl as *const _ as usize
        },
        18460usize,
        concat!(
            "Offset of field: ",
            stringify!(ecdsa_attestation_evidence_t),
            "::",
            stringify!(pck_crl)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ecdsa_attestation_evidence_t>())).pck_crl_len as *const _
                as usize
        },
        19484usize,
        concat!(
            "Offset of field: ",
            stringify!(ecdsa_attestation_evidence_t),
            "::",
            stringify!(pck_crl_len)
        )
    );
}
impl Default for ecdsa_attestation_evidence_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _attributes_t {
    pub flags: u64,
    pub xfrm: u64,
}
#[test]
fn bindgen_test_layout__attributes_t() {
    assert_eq!(
        ::std::mem::size_of::<_attributes_t>(),
        16usize,
        concat!("Size of: ", stringify!(_attributes_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_attributes_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_attributes_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_attributes_t>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_attributes_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_attributes_t>())).xfrm as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_attributes_t),
            "::",
            stringify!(xfrm)
        )
    );
}
pub type sgx_attributes_t = _attributes_t;
pub type sgx_misc_select_t = u32;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _sgx_misc_attribute_t {
    pub secs_attr: sgx_attributes_t,
    pub misc_select: sgx_misc_select_t,
}
#[test]
fn bindgen_test_layout__sgx_misc_attribute_t() {
    assert_eq!(
        ::std::mem::size_of::<_sgx_misc_attribute_t>(),
        24usize,
        concat!("Size of: ", stringify!(_sgx_misc_attribute_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_sgx_misc_attribute_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_sgx_misc_attribute_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sgx_misc_attribute_t>())).secs_attr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_sgx_misc_attribute_t),
            "::",
            stringify!(secs_attr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_sgx_misc_attribute_t>())).misc_select as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_sgx_misc_attribute_t),
            "::",
            stringify!(misc_select)
        )
    );
}
pub type sgx_misc_attribute_t = _sgx_misc_attribute_t;
pub type sgx_key_128bit_t = [u8; 16usize];
pub type sgx_isv_svn_t = u16;
pub type sgx_config_svn_t = u16;
pub type sgx_config_id_t = [u8; 64usize];
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _sgx_cpu_svn_t {
    pub svn: [u8; 16usize],
}
#[test]
fn bindgen_test_layout__sgx_cpu_svn_t() {
    assert_eq!(
        ::std::mem::size_of::<_sgx_cpu_svn_t>(),
        16usize,
        concat!("Size of: ", stringify!(_sgx_cpu_svn_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_sgx_cpu_svn_t>(),
        1usize,
        concat!("Alignment of ", stringify!(_sgx_cpu_svn_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sgx_cpu_svn_t>())).svn as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_sgx_cpu_svn_t),
            "::",
            stringify!(svn)
        )
    );
}
pub type sgx_cpu_svn_t = _sgx_cpu_svn_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _sgx_key_id_t {
    pub id: [u8; 32usize],
}
#[test]
fn bindgen_test_layout__sgx_key_id_t() {
    assert_eq!(
        ::std::mem::size_of::<_sgx_key_id_t>(),
        32usize,
        concat!("Size of: ", stringify!(_sgx_key_id_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_sgx_key_id_t>(),
        1usize,
        concat!("Alignment of ", stringify!(_sgx_key_id_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sgx_key_id_t>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_sgx_key_id_t),
            "::",
            stringify!(id)
        )
    );
}
pub type sgx_key_id_t = _sgx_key_id_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _key_request_t {
    pub key_name: u16,
    pub key_policy: u16,
    pub isv_svn: sgx_isv_svn_t,
    pub reserved1: u16,
    pub cpu_svn: sgx_cpu_svn_t,
    pub attribute_mask: sgx_attributes_t,
    pub key_id: sgx_key_id_t,
    pub misc_mask: sgx_misc_select_t,
    pub config_svn: sgx_config_svn_t,
    pub reserved2: [u8; 434usize],
}
#[test]
fn bindgen_test_layout__key_request_t() {
    assert_eq!(
        ::std::mem::size_of::<_key_request_t>(),
        512usize,
        concat!("Size of: ", stringify!(_key_request_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_key_request_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_key_request_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_key_request_t>())).key_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_key_request_t),
            "::",
            stringify!(key_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_key_request_t>())).key_policy as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_key_request_t),
            "::",
            stringify!(key_policy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_key_request_t>())).isv_svn as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_key_request_t),
            "::",
            stringify!(isv_svn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_key_request_t>())).reserved1 as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_key_request_t),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_key_request_t>())).cpu_svn as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_key_request_t),
            "::",
            stringify!(cpu_svn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_key_request_t>())).attribute_mask as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_key_request_t),
            "::",
            stringify!(attribute_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_key_request_t>())).key_id as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_key_request_t),
            "::",
            stringify!(key_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_key_request_t>())).misc_mask as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_key_request_t),
            "::",
            stringify!(misc_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_key_request_t>())).config_svn as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_key_request_t),
            "::",
            stringify!(config_svn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_key_request_t>())).reserved2 as *const _ as usize },
        78usize,
        concat!(
            "Offset of field: ",
            stringify!(_key_request_t),
            "::",
            stringify!(reserved2)
        )
    );
}
impl Default for _key_request_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type sgx_key_request_t = _key_request_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _sgx_measurement_t {
    pub m: [u8; 32usize],
}
#[test]
fn bindgen_test_layout__sgx_measurement_t() {
    assert_eq!(
        ::std::mem::size_of::<_sgx_measurement_t>(),
        32usize,
        concat!("Size of: ", stringify!(_sgx_measurement_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_sgx_measurement_t>(),
        1usize,
        concat!("Alignment of ", stringify!(_sgx_measurement_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sgx_measurement_t>())).m as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_sgx_measurement_t),
            "::",
            stringify!(m)
        )
    );
}
pub type sgx_measurement_t = _sgx_measurement_t;
pub type sgx_mac_t = [u8; 16usize];
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _sgx_report_data_t {
    pub d: [u8; 64usize],
}
#[test]
fn bindgen_test_layout__sgx_report_data_t() {
    assert_eq!(
        ::std::mem::size_of::<_sgx_report_data_t>(),
        64usize,
        concat!("Size of: ", stringify!(_sgx_report_data_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_sgx_report_data_t>(),
        1usize,
        concat!("Alignment of ", stringify!(_sgx_report_data_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sgx_report_data_t>())).d as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_sgx_report_data_t),
            "::",
            stringify!(d)
        )
    );
}
impl Default for _sgx_report_data_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type sgx_report_data_t = _sgx_report_data_t;
pub type sgx_prod_id_t = u16;
pub type sgx_isvext_prod_id_t = [u8; 16usize];
pub type sgx_isvfamily_id_t = [u8; 16usize];
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _target_info_t {
    pub mr_enclave: sgx_measurement_t,
    pub attributes: sgx_attributes_t,
    pub reserved1: [u8; 2usize],
    pub config_svn: sgx_config_svn_t,
    pub misc_select: sgx_misc_select_t,
    pub reserved2: [u8; 8usize],
    pub config_id: sgx_config_id_t,
    pub reserved3: [u8; 384usize],
}
#[test]
fn bindgen_test_layout__target_info_t() {
    assert_eq!(
        ::std::mem::size_of::<_target_info_t>(),
        512usize,
        concat!("Size of: ", stringify!(_target_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_target_info_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_target_info_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_target_info_t>())).mr_enclave as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_target_info_t),
            "::",
            stringify!(mr_enclave)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_target_info_t>())).attributes as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_target_info_t),
            "::",
            stringify!(attributes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_target_info_t>())).reserved1 as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_target_info_t),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_target_info_t>())).config_svn as *const _ as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(_target_info_t),
            "::",
            stringify!(config_svn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_target_info_t>())).misc_select as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_target_info_t),
            "::",
            stringify!(misc_select)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_target_info_t>())).reserved2 as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_target_info_t),
            "::",
            stringify!(reserved2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_target_info_t>())).config_id as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_target_info_t),
            "::",
            stringify!(config_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_target_info_t>())).reserved3 as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_target_info_t),
            "::",
            stringify!(reserved3)
        )
    );
}
impl Default for _target_info_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type sgx_target_info_t = _target_info_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _report_body_t {
    pub cpu_svn: sgx_cpu_svn_t,
    pub misc_select: sgx_misc_select_t,
    pub reserved1: [u8; 12usize],
    pub isv_ext_prod_id: sgx_isvext_prod_id_t,
    pub attributes: sgx_attributes_t,
    pub mr_enclave: sgx_measurement_t,
    pub reserved2: [u8; 32usize],
    pub mr_signer: sgx_measurement_t,
    pub reserved3: [u8; 32usize],
    pub config_id: sgx_config_id_t,
    pub isv_prod_id: sgx_prod_id_t,
    pub isv_svn: sgx_isv_svn_t,
    pub config_svn: sgx_config_svn_t,
    pub reserved4: [u8; 42usize],
    pub isv_family_id: sgx_isvfamily_id_t,
    pub report_data: sgx_report_data_t,
}
#[test]
fn bindgen_test_layout__report_body_t() {
    assert_eq!(
        ::std::mem::size_of::<_report_body_t>(),
        384usize,
        concat!("Size of: ", stringify!(_report_body_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_report_body_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_report_body_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_report_body_t>())).cpu_svn as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_report_body_t),
            "::",
            stringify!(cpu_svn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_report_body_t>())).misc_select as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_report_body_t),
            "::",
            stringify!(misc_select)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_report_body_t>())).reserved1 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_report_body_t),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_report_body_t>())).isv_ext_prod_id as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_report_body_t),
            "::",
            stringify!(isv_ext_prod_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_report_body_t>())).attributes as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_report_body_t),
            "::",
            stringify!(attributes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_report_body_t>())).mr_enclave as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_report_body_t),
            "::",
            stringify!(mr_enclave)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_report_body_t>())).reserved2 as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_report_body_t),
            "::",
            stringify!(reserved2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_report_body_t>())).mr_signer as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_report_body_t),
            "::",
            stringify!(mr_signer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_report_body_t>())).reserved3 as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_report_body_t),
            "::",
            stringify!(reserved3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_report_body_t>())).config_id as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_report_body_t),
            "::",
            stringify!(config_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_report_body_t>())).isv_prod_id as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_report_body_t),
            "::",
            stringify!(isv_prod_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_report_body_t>())).isv_svn as *const _ as usize },
        258usize,
        concat!(
            "Offset of field: ",
            stringify!(_report_body_t),
            "::",
            stringify!(isv_svn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_report_body_t>())).config_svn as *const _ as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(_report_body_t),
            "::",
            stringify!(config_svn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_report_body_t>())).reserved4 as *const _ as usize },
        262usize,
        concat!(
            "Offset of field: ",
            stringify!(_report_body_t),
            "::",
            stringify!(reserved4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_report_body_t>())).isv_family_id as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(_report_body_t),
            "::",
            stringify!(isv_family_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_report_body_t>())).report_data as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(_report_body_t),
            "::",
            stringify!(report_data)
        )
    );
}
impl Default for _report_body_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type sgx_report_body_t = _report_body_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _report_t {
    pub body: sgx_report_body_t,
    pub key_id: sgx_key_id_t,
    pub mac: sgx_mac_t,
}
#[test]
fn bindgen_test_layout__report_t() {
    assert_eq!(
        ::std::mem::size_of::<_report_t>(),
        432usize,
        concat!("Size of: ", stringify!(_report_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_report_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_report_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_report_t>())).body as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_report_t),
            "::",
            stringify!(body)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_report_t>())).key_id as *const _ as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(_report_t),
            "::",
            stringify!(key_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_report_t>())).mac as *const _ as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(_report_t),
            "::",
            stringify!(mac)
        )
    );
}
impl Default for _report_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type sgx_report_t = _report_t;
pub type sgx_epid_group_id_t = [u8; 4usize];
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _spid_t {
    pub id: [u8; 16usize],
}
#[test]
fn bindgen_test_layout__spid_t() {
    assert_eq!(
        ::std::mem::size_of::<_spid_t>(),
        16usize,
        concat!("Size of: ", stringify!(_spid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_spid_t>(),
        1usize,
        concat!("Alignment of ", stringify!(_spid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_spid_t>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_spid_t),
            "::",
            stringify!(id)
        )
    );
}
pub type sgx_spid_t = _spid_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _basename_t {
    pub name: [u8; 32usize],
}
#[test]
fn bindgen_test_layout__basename_t() {
    assert_eq!(
        ::std::mem::size_of::<_basename_t>(),
        32usize,
        concat!("Size of: ", stringify!(_basename_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_basename_t>(),
        1usize,
        concat!("Alignment of ", stringify!(_basename_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_basename_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_basename_t),
            "::",
            stringify!(name)
        )
    );
}
pub type sgx_basename_t = _basename_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _quote_nonce {
    pub rand: [u8; 16usize],
}
#[test]
fn bindgen_test_layout__quote_nonce() {
    assert_eq!(
        ::std::mem::size_of::<_quote_nonce>(),
        16usize,
        concat!("Size of: ", stringify!(_quote_nonce))
    );
    assert_eq!(
        ::std::mem::align_of::<_quote_nonce>(),
        1usize,
        concat!("Alignment of ", stringify!(_quote_nonce))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_quote_nonce>())).rand as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_quote_nonce),
            "::",
            stringify!(rand)
        )
    );
}
pub type sgx_quote_nonce_t = _quote_nonce;
pub const sgx_quote_sign_type_t_SGX_UNLINKABLE_SIGNATURE: sgx_quote_sign_type_t = 0;
pub const sgx_quote_sign_type_t_SGX_LINKABLE_SIGNATURE: sgx_quote_sign_type_t = 1;
pub type sgx_quote_sign_type_t = ::std::os::raw::c_uint;
#[repr(C, packed)]
pub struct _quote_t {
    pub version: u16,
    pub sign_type: u16,
    pub epid_group_id: sgx_epid_group_id_t,
    pub qe_svn: sgx_isv_svn_t,
    pub pce_svn: sgx_isv_svn_t,
    pub xeid: u32,
    pub basename: sgx_basename_t,
    pub report_body: sgx_report_body_t,
    pub signature_len: u32,
    pub signature: __IncompleteArrayField<u8>,
}
#[test]
fn bindgen_test_layout__quote_t() {
    assert_eq!(
        ::std::mem::size_of::<_quote_t>(),
        436usize,
        concat!("Size of: ", stringify!(_quote_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_quote_t>(),
        1usize,
        concat!("Alignment of ", stringify!(_quote_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_quote_t>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_quote_t),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_quote_t>())).sign_type as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_quote_t),
            "::",
            stringify!(sign_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_quote_t>())).epid_group_id as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_quote_t),
            "::",
            stringify!(epid_group_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_quote_t>())).qe_svn as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_quote_t),
            "::",
            stringify!(qe_svn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_quote_t>())).pce_svn as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_quote_t),
            "::",
            stringify!(pce_svn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_quote_t>())).xeid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_quote_t),
            "::",
            stringify!(xeid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_quote_t>())).basename as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_quote_t),
            "::",
            stringify!(basename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_quote_t>())).report_body as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_quote_t),
            "::",
            stringify!(report_body)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_quote_t>())).signature_len as *const _ as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(_quote_t),
            "::",
            stringify!(signature_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_quote_t>())).signature as *const _ as usize },
        436usize,
        concat!(
            "Offset of field: ",
            stringify!(_quote_t),
            "::",
            stringify!(signature)
        )
    );
}
impl Default for _quote_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type sgx_quote_t = _quote_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _platform_info {
    pub platform_info: [u8; 101usize],
}
#[test]
fn bindgen_test_layout__platform_info() {
    assert_eq!(
        ::std::mem::size_of::<_platform_info>(),
        101usize,
        concat!("Size of: ", stringify!(_platform_info))
    );
    assert_eq!(
        ::std::mem::align_of::<_platform_info>(),
        1usize,
        concat!("Alignment of ", stringify!(_platform_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_platform_info>())).platform_info as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_platform_info),
            "::",
            stringify!(platform_info)
        )
    );
}
impl Default for _platform_info {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type sgx_platform_info_t = _platform_info;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _update_info_bit {
    pub ucodeUpdate: ::std::os::raw::c_int,
    pub csmeFwUpdate: ::std::os::raw::c_int,
    pub pswUpdate: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__update_info_bit() {
    assert_eq!(
        ::std::mem::size_of::<_update_info_bit>(),
        12usize,
        concat!("Size of: ", stringify!(_update_info_bit))
    );
    assert_eq!(
        ::std::mem::align_of::<_update_info_bit>(),
        1usize,
        concat!("Alignment of ", stringify!(_update_info_bit))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_update_info_bit>())).ucodeUpdate as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_update_info_bit),
            "::",
            stringify!(ucodeUpdate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_update_info_bit>())).csmeFwUpdate as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_update_info_bit),
            "::",
            stringify!(csmeFwUpdate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_update_info_bit>())).pswUpdate as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_update_info_bit),
            "::",
            stringify!(pswUpdate)
        )
    );
}
pub type sgx_update_info_bit_t = _update_info_bit;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _att_key_id_t {
    pub att_key_id: [u8; 256usize],
}
#[test]
fn bindgen_test_layout__att_key_id_t() {
    assert_eq!(
        ::std::mem::size_of::<_att_key_id_t>(),
        256usize,
        concat!("Size of: ", stringify!(_att_key_id_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_att_key_id_t>(),
        1usize,
        concat!("Alignment of ", stringify!(_att_key_id_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_att_key_id_t>())).att_key_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_att_key_id_t),
            "::",
            stringify!(att_key_id)
        )
    );
}
impl Default for _att_key_id_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type sgx_att_key_id_t = _att_key_id_t;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct _sgx_ql_att_key_id_t {
    pub id: u16,
    pub version: u16,
    pub mrsigner_length: u16,
    pub mrsigner: [u8; 48usize],
    pub prod_id: u32,
    pub extended_prod_id: [u8; 16usize],
    pub config_id: [u8; 64usize],
    pub family_id: [u8; 16usize],
    pub algorithm_id: u32,
}
#[test]
fn bindgen_test_layout__sgx_ql_att_key_id_t() {
    assert_eq!(
        ::std::mem::size_of::<_sgx_ql_att_key_id_t>(),
        158usize,
        concat!("Size of: ", stringify!(_sgx_ql_att_key_id_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_sgx_ql_att_key_id_t>(),
        1usize,
        concat!("Alignment of ", stringify!(_sgx_ql_att_key_id_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sgx_ql_att_key_id_t>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_sgx_ql_att_key_id_t),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sgx_ql_att_key_id_t>())).version as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_sgx_ql_att_key_id_t),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_sgx_ql_att_key_id_t>())).mrsigner_length as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_sgx_ql_att_key_id_t),
            "::",
            stringify!(mrsigner_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sgx_ql_att_key_id_t>())).mrsigner as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_sgx_ql_att_key_id_t),
            "::",
            stringify!(mrsigner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sgx_ql_att_key_id_t>())).prod_id as *const _ as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(_sgx_ql_att_key_id_t),
            "::",
            stringify!(prod_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_sgx_ql_att_key_id_t>())).extended_prod_id as *const _ as usize
        },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(_sgx_ql_att_key_id_t),
            "::",
            stringify!(extended_prod_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sgx_ql_att_key_id_t>())).config_id as *const _ as usize },
        74usize,
        concat!(
            "Offset of field: ",
            stringify!(_sgx_ql_att_key_id_t),
            "::",
            stringify!(config_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sgx_ql_att_key_id_t>())).family_id as *const _ as usize },
        138usize,
        concat!(
            "Offset of field: ",
            stringify!(_sgx_ql_att_key_id_t),
            "::",
            stringify!(family_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_sgx_ql_att_key_id_t>())).algorithm_id as *const _ as usize
        },
        154usize,
        concat!(
            "Offset of field: ",
            stringify!(_sgx_ql_att_key_id_t),
            "::",
            stringify!(algorithm_id)
        )
    );
}
impl Default for _sgx_ql_att_key_id_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type sgx_ql_att_key_id_t = _sgx_ql_att_key_id_t;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct _sgx_att_key_id_ext_t {
    pub base: sgx_ql_att_key_id_t,
    pub spid: [u8; 16usize],
    pub att_key_type: u16,
    pub reserved: [u8; 80usize],
}
#[test]
fn bindgen_test_layout__sgx_att_key_id_ext_t() {
    assert_eq!(
        ::std::mem::size_of::<_sgx_att_key_id_ext_t>(),
        256usize,
        concat!("Size of: ", stringify!(_sgx_att_key_id_ext_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_sgx_att_key_id_ext_t>(),
        1usize,
        concat!("Alignment of ", stringify!(_sgx_att_key_id_ext_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sgx_att_key_id_ext_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_sgx_att_key_id_ext_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sgx_att_key_id_ext_t>())).spid as *const _ as usize },
        158usize,
        concat!(
            "Offset of field: ",
            stringify!(_sgx_att_key_id_ext_t),
            "::",
            stringify!(spid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_sgx_att_key_id_ext_t>())).att_key_type as *const _ as usize
        },
        174usize,
        concat!(
            "Offset of field: ",
            stringify!(_sgx_att_key_id_ext_t),
            "::",
            stringify!(att_key_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sgx_att_key_id_ext_t>())).reserved as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_sgx_att_key_id_ext_t),
            "::",
            stringify!(reserved)
        )
    );
}
impl Default for _sgx_att_key_id_ext_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type sgx_att_key_id_ext_t = _sgx_att_key_id_ext_t;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct _qe_report_info_t {
    pub nonce: sgx_quote_nonce_t,
    pub app_enclave_target_info: sgx_target_info_t,
    pub qe_report: sgx_report_t,
}
#[test]
fn bindgen_test_layout__qe_report_info_t() {
    assert_eq!(
        ::std::mem::size_of::<_qe_report_info_t>(),
        960usize,
        concat!("Size of: ", stringify!(_qe_report_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_qe_report_info_t>(),
        1usize,
        concat!("Alignment of ", stringify!(_qe_report_info_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_qe_report_info_t>())).nonce as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_qe_report_info_t),
            "::",
            stringify!(nonce)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_qe_report_info_t>())).app_enclave_target_info as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_qe_report_info_t),
            "::",
            stringify!(app_enclave_target_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_qe_report_info_t>())).qe_report as *const _ as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(_qe_report_info_t),
            "::",
            stringify!(qe_report)
        )
    );
}
impl Default for _qe_report_info_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type sgx_qe_report_info_t = _qe_report_info_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ra_tls_options {
    pub spid: sgx_spid_t,
    pub quote_type: sgx_quote_sign_type_t,
    pub ias_server: [::std::os::raw::c_char; 512usize],
    pub subscription_key: [::std::os::raw::c_char; 32usize],
}
#[test]
fn bindgen_test_layout_ra_tls_options() {
    assert_eq!(
        ::std::mem::size_of::<ra_tls_options>(),
        564usize,
        concat!("Size of: ", stringify!(ra_tls_options))
    );
    assert_eq!(
        ::std::mem::align_of::<ra_tls_options>(),
        4usize,
        concat!("Alignment of ", stringify!(ra_tls_options))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ra_tls_options>())).spid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ra_tls_options),
            "::",
            stringify!(spid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ra_tls_options>())).quote_type as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ra_tls_options),
            "::",
            stringify!(quote_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ra_tls_options>())).ias_server as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ra_tls_options),
            "::",
            stringify!(ias_server)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ra_tls_options>())).subscription_key as *const _ as usize },
        532usize,
        concat!(
            "Offset of field: ",
            stringify!(ra_tls_options),
            "::",
            stringify!(subscription_key)
        )
    );
}
impl Default for ra_tls_options {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ecdsa_ra_tls_options {
    pub subscription_key: [::std::os::raw::c_char; 32usize],
}
#[test]
fn bindgen_test_layout_ecdsa_ra_tls_options() {
    assert_eq!(
        ::std::mem::size_of::<ecdsa_ra_tls_options>(),
        32usize,
        concat!("Size of: ", stringify!(ecdsa_ra_tls_options))
    );
    assert_eq!(
        ::std::mem::align_of::<ecdsa_ra_tls_options>(),
        1usize,
        concat!("Alignment of ", stringify!(ecdsa_ra_tls_options))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ecdsa_ra_tls_options>())).subscription_key as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ecdsa_ra_tls_options),
            "::",
            stringify!(subscription_key)
        )
    );
}
extern "C" {
    pub fn create_key_and_x509_pem(
        pem_key: *mut u8,
        pem_key_len: *mut ::std::os::raw::c_int,
        pem_cert: *mut u8,
        pem_cert_len: *mut ::std::os::raw::c_int,
        opts: *const ra_tls_options,
    );
}
extern "C" {
    pub fn ra_tls_create_report(report: *mut sgx_report_t);
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
impl Default for __va_list_tag {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
