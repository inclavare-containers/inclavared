enclave {
    include "wolfssl/ssl.h"
    include "wolfssl/wolfcrypt/settings.h"
    include "wolfssl/wolfcrypt/types.h"

    include "wolfcrypt/test/test.h"
    include "wolfcrypt/benchmark/benchmark.h"
    include "unistd.h"

    trusted {
        //public int wc_test([user_check]void* args);
        //public int wc_benchmark_test([user_check]void* args);

        public int ecall_wolfSSL_Init();
        public void ecall_wolfSSL_Debugging_ON();
        public void ecall_wolfSSL_Debugging_OFF();
        public WOLFSSL_METHOD* ecall_wolfTLSv1_2_client_method();
        public WOLFSSL_METHOD* ecall_wolfTLSv1_2_server_method();
        public WOLFSSL_CTX* ecall_wolfSSL_CTX_new([user_check] WOLFSSL_METHOD* method);
        public int ecall_wolfSSL_CTX_use_PrivateKey_buffer([user_check] WOLFSSL_CTX* ctx,
                                                [in, size=sz] const unsigned char* buf,
                                                long sz,
                                                int type);
        public int ecall_wolfSSL_CTX_load_verify_buffer([user_check] WOLFSSL_CTX* ctx,
                                                [in, size=sz] const unsigned char* buf,
                                                long sz,
                                                int type);
        public int ecall_wolfSSL_CTX_use_certificate_chain_buffer_format([user_check] WOLFSSL_CTX* ctx,
                                                [in, size=sz] const unsigned char* buf,
                                                long sz,
                                                int type);
        public int ecall_wolfSSL_CTX_use_certificate_buffer([user_check] WOLFSSL_CTX* ctx,
                                                [in, size=sz] const unsigned char* buf,
                                                long sz,
                                                int type);
        public int ecall_wolfSSL_CTX_set_cipher_list([user_check] WOLFSSL_CTX* ctx,
                                                [in, string] const char* list);
        public WOLFSSL* ecall_wolfSSL_new([user_check] WOLFSSL_CTX* ctx);
        public int ecall_wolfSSL_set_fd([user_check]WOLFSSL* ssl, int fd);
        public int ecall_wolfSSL_connect([user_check]WOLFSSL* ssl);
        public int ecall_wolfSSL_write([user_check]WOLFSSL* ssl,
                                     [in, size=sz] const void* in,
                                     int sz);
        public int ecall_wolfSSL_get_error([user_check]WOLFSSL* ssl,
                                         int ret);
        public int ecall_wolfSSL_read([user_check]WOLFSSL* ssl,
                                    [out, size=sz]void* out,
                                    int sz);
        public void ecall_wolfSSL_free([user_check]WOLFSSL* ssl);
        public void ecall_wolfSSL_CTX_free([user_check]WOLFSSL_CTX* ctx);
        public int ecall_wolfSSL_Cleanup();
        public void ecall_create_key_and_x509([user_check]WOLFSSL_CTX* ctx);
    };

    untrusted {
        /* define OCALLs here. */
        void ocall_low_res_time([out] int* time);
        //void ocall_print_string([in, string] const char* str);
        //void ocall_current_time([out] double* time);
        ssize_t ocall_recv(int sockfd, [out, size=len] void *buf, size_t len, int flags) propagate_errno;
        ssize_t ocall_send(int sockfd, [in, size=len] const void *buf, size_t len, int flags) propagate_errno;
        //void time_t ocall_XTIME([out] time_t* t);
    };
};

